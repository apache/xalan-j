<patterns module="TRaX">

 <pattern>
  <pattern-name>Processor</pattern-name>
  <intent>Serve as a vendor neutral Processor interface for XSLT processors and 
          similar processors.</intent>
  <responsibilities>Serve as a factory for a concrete implementation of
  an Processor, serve as a factory for Templates objects, and  
  manage processor specific features.</responsibilities>
  <thread-safety>Processors can not run concurrently.</thread-safety>
 </pattern>
 
 <pattern>
  <pattern-name>Templates</pattern-name>
  <intent>The run time representation of the transformation instructions.</intent>
  <responsibilities>Acts as a data bag for transformation instructions, act as 
                    a factory for Transformers.</responsibilities>
  <thread-safety>Threadsafe concurrently over multiple threads once
  construction is complete.</thread-safety>
 </pattern>

 <pattern>
  <pattern-name>TemplatesBuilder</pattern-name>
  <intent>An event handler for parse events that specify the transformation instructions.</intent>
  <responsibilities>Handle parse events, and build a Templates object.</responsibilities>
  <thread-safety>Only safe one instance per thread.</thread-safety>
 </pattern>

 <pattern>
  <pattern-name>Transformer</pattern-name>
  <intent>Act as a per-thread execution context for transformations, act as an interface 
  for performing the transformation.</intent>
  <thread-safety>Only safe one instance per thread.</thread-safety>
  <notes>The Transformer is bound to the Templates object that created it.</notes>
 </pattern>

 <pattern>
  <pattern-name>URIResolver</pattern-name>
  <intent>An interface that can be called by the processor to for turning the
  URIs used in document(), xsl:import, etc. into an InputSource.</intent>
  <responsibilities>Returns an InputSource or NodeInputSource, 
  given a URI.</responsibilities>
  <thread-safety>Needs to be threadsafe concurrently  over multiple
  threads.</thread-safety>
 </pattern>

 <pattern>
  <pattern-name>Result</pattern-name>
  <potential-alternate-name>ResultTarget</potential-alternate-name>
  <intent>Serve as a single object for multiple types of output, so there can
  be simple process method signatures.</intent>
  <responsibilities>Act as simple data holder for output stream, DOM node,
  ContentHandler, etc.</responsibilities>
  <thread-safety>Threadsafe concurrently over multiple threads for read-only,
  must be synchronized for edit.</thread-safety>
 </pattern>

 <pattern>
  <pattern-name>NodeInputSource</pattern-name>
  <intent>Serve as a single vendor-neutral object for multiple types of
  input.  Primarily useful as a return for objects that may need to 
  return DOM nodes, as well as streams, etc.</intent>
  <responsibilities>Act as simple data holder for System IDs, DOM nodes,
  streams, etc.</responsibilities>
  <thread-safety>Threadsafe concurrently over multiple threads for read-only,
  must be synchronized for edit.</thread-safety>
 </pattern>

 <pattern>
  <pattern-name>ProcessorException</pattern-name>
  <intent>Need specific processor exception that can be caught by a catch
  clause.</intent>
  <responsibilities>Same as for SAXException.</responsibilities>
  <thread-safety>Instance per thread.</thread-safety>
 </pattern>

 <pattern>
  <pattern-name>ProcessorFactoryException</pattern-name>
  <intent>Need specific processor factory exception that can be caught by a catch
  clause.</intent>
  <responsibilities>Same as for SAXException.</responsibilities>
  <thread-safety>Instance per thread.</thread-safety>
 </pattern>

 <pattern>
  <pattern-name>TransformException</pattern-name>
  <intent>Need specific transform exception that can be caught by a catch
  clause.</intent>
  <responsibilities>Same as for SAXException.</responsibilities>
  <thread-safety>Instance per thread.</thread-safety>
 </pattern>

</patterns>