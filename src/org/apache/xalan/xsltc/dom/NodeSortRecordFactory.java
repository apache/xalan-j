/*
 * Copyright 2001-2004 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * $Id$
 */

package org.apache.xalan.xsltc.dom;

import org.apache.xalan.xsltc.DOM;
import org.apache.xalan.xsltc.Translet;
import org.apache.xalan.xsltc.TransletException;
import org.apache.xalan.xsltc.runtime.AbstractTranslet;
import org.apache.xml.utils.ObjectFactory;
import org.apache.xml.utils.LocaleUtility;
import java.util.Locale;
import java.text.Collator;

/**
 * @author Jacek Ambroziak
 * @author Santiago Pericas-Geertsen
 * @author Morten Jorgensen
 */
public class NodeSortRecordFactory {

    private static int DESCENDING = "descending".length();
    private static int NUMBER     = "number".length();

    private final DOM      _dom;
    private final String   _className;
    private Class _class;
    private int   _order[];
    private int   _type[];
    private Locale _locale[];
    private Collator _collator[];
    private String _case_order[];
    private final AbstractTranslet _translet;

    /**
     * Creates a NodeSortRecord producing object. The DOM specifies which tree
     * to get the nodes to sort from, the class name specifies what auxillary
     * class to use to sort the nodes (this class is generated by the Sort
     * class), and the translet parameter is needed for methods called by
     * this object.
     */
     public NodeSortRecordFactory(DOM dom, String className, Translet translet,
                 String order[], String type[], String lang[], String case_order[])
    throws TransletException {
    try {
        _dom = dom;
        _className = className;
        // This should return a Class definition if using TrAX
        _class = translet.getAuxiliaryClass(className);
        // This code is only run when the native API is used
        if (_class == null) {
                _class = ObjectFactory.findProviderClass(
                    className, ObjectFactory.findClassLoader(), true);
            } 
        _translet = (AbstractTranslet)translet;

        int levels = order.length;
        _order = new int[levels];
        _type = new int[levels];
        for (int i = 0; i < levels; i++) {
        if (order[i].length() == DESCENDING)
            _order[i] = NodeSortRecord.COMPARE_DESCENDING;
        if (type[i].length() == NUMBER)
            _type[i] = NodeSortRecord.COMPARE_NUMERIC;
        }
         setLang(lang);
        _case_order = case_order;
    }
    catch (ClassNotFoundException e) {
        throw new TransletException(e);
    }
    }
    
    

    /**
     * Create an instance of a sub-class of NodeSortRecord. The name of this
     * sub-class is passed to us in the constructor.
     */
    public NodeSortRecord makeNodeSortRecord(int node, int last)
	throws ExceptionInInitializerError,
	       LinkageError,
	       IllegalAccessException,
	       InstantiationException,
	       SecurityException,
	       TransletException {

	final NodeSortRecord sortRecord =
	    (NodeSortRecord)_class.newInstance();
	sortRecord.initialize(node, last, _dom, _translet, _order, 
                         _type, _locale,  _collator, _case_order, this);
	return sortRecord;
    }

    public String getClassName() {
	return _className;
    }
    
   private final void setLang(final String lang[]){
        
      final int length = lang.length;
      _locale = new Locale[length];
      _collator = new Collator[length];
      for(int i = 0; i< length; i++){
        _locale[i] = LocaleUtility.langToLocale(lang[i]);
        _collator[i] = Collator.getInstance(_locale[i] );
      }
    }
}
