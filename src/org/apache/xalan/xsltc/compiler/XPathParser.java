
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Tue Apr 17 10:19:24 EDT 2001
//----------------------------------------------------

package org.apache.xalan.xsltc.compiler;

import java.util.Stack;
import java.util.Vector;
import java.io.StringReader;
import java_cup.runtime.*;
import org.apache.xalan.xsltc.dom.Axis;
import org.apache.xalan.xsltc.runtime.Operators;
import org.apache.xalan.xsltc.compiler.util.ErrorMsg;

/** CUP v0.10j generated parser.
  * @version Tue Apr 17 10:19:24 EDT 2001
  */
public class XPathParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public XPathParser() {super();}

  /** Constructor which sets the default scanner. */
  public XPathParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\004\000\002\003\004\000\002\003" +
    "\004\000\002\036\003\000\002\036\005\000\002\037\003" +
    "\000\002\037\004\000\002\037\003\000\002\037\005\000" +
    "\002\037\005\000\002\037\004\000\002\037\003\000\002" +
    "\035\006\000\002\035\010\000\002\040\003\000\002\040" +
    "\005\000\002\040\005\000\002\041\003\000\002\041\004" +
    "\000\002\041\004\000\002\041\005\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\043\003\000\002\043\003\000\002\052" +
    "\003\000\002\052\004\000\002\052\004\000\002\044\003" +
    "\000\002\044\004\000\002\007\005\000\002\004\003\000" +
    "\002\012\003\000\002\012\005\000\002\013\003\000\002" +
    "\013\005\000\002\014\003\000\002\014\005\000\002\014" +
    "\005\000\002\015\003\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\016\003\000" +
    "\002\016\005\000\002\016\005\000\002\017\003\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\020" +
    "\003\000\002\020\004\000\002\024\003\000\002\024\005" +
    "\000\002\025\003\000\002\025\003\000\002\025\005\000" +
    "\002\025\005\000\002\006\003\000\002\006\003\000\002" +
    "\027\003\000\002\027\005\000\002\027\003\000\002\031" +
    "\003\000\002\031\004\000\002\031\003\000\002\030\005" +
    "\000\002\032\004\000\002\011\003\000\002\011\004\000" +
    "\002\011\005\000\002\011\004\000\002\011\003\000\002" +
    "\051\004\000\002\051\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\026\003\000\002\026" +
    "\003\000\002\010\003\000\002\010\004\000\002\023\003" +
    "\000\002\023\005\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\021\004\000\002" +
    "\022\005\000\002\022\006\000\002\045\003\000\002\045" +
    "\005\000\002\047\003\000\002\005\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\034\003\000\002\034\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\006\065\006\066\005\001\002\000\004\002" +
    "\264\001\002\000\106\004\065\005\115\011\075\013\107" +
    "\015\137\016\072\017\112\021\074\031\105\032\030\033" +
    "\011\034\064\035\021\036\043\037\042\040\144\041\147" +
    "\044\070\045\067\046\121\047\126\050\142\051\102\052" +
    "\145\053\135\054\131\055\120\056\110\057\143\060\073" +
    "\061\066\062\132\063\134\064\076\001\002\000\046\004" +
    "\016\013\015\016\023\021\036\032\030\033\011\035\021" +
    "\036\024\037\012\040\034\041\041\044\031\045\032\047" +
    "\040\050\037\051\035\052\017\062\027\001\002\000\012" +
    "\002\ufffa\004\260\010\ufffa\021\257\001\002\000\040\013" +
    "\015\032\030\033\011\035\021\036\043\037\042\040\034" +
    "\041\041\044\031\045\032\047\040\050\037\051\171\052" +
    "\170\062\027\001\002\000\056\002\uff8b\004\uff8b\006\uff8b" +
    "\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\021" +
    "\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b" +
    "\030\uff8b\031\uff8b\032\uff8b\033\uff8b\042\uff8b\043\uff8b\001" +
    "\002\000\016\002\uff8a\004\uff8a\006\uff8a\010\uff8a\011\250" +
    "\021\uff8a\001\002\000\014\002\ufff0\004\ufff0\006\062\010" +
    "\ufff0\021\ufff0\001\002\000\014\002\uffe6\004\uffe6\006\uffe6" +
    "\010\uffe6\021\uffe6\001\002\000\014\002\uffe7\004\uffe7\006" +
    "\uffe7\010\uffe7\021\uffe7\001\002\000\046\002\ufffc\010\ufffc" +
    "\013\015\016\023\032\030\033\011\035\021\036\043\037" +
    "\042\040\034\041\041\044\031\045\032\047\040\050\037" +
    "\051\035\052\017\062\027\001\002\000\016\002\uff86\004" +
    "\uff86\006\uff86\010\uff86\020\057\021\uff86\001\002\000\006" +
    "\002\ufffe\010\055\001\002\000\056\002\uff8d\004\uff8d\006" +
    "\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d" +
    "\021\uff8d\022\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027" +
    "\uff8d\030\uff8d\031\uff8d\032\uff8d\033\uff8d\042\uff8d\043\uff8d" +
    "\001\002\000\004\002\000\001\002\000\040\013\uffe5\032" +
    "\uffe5\033\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\044\uffe5\045\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\062" +
    "\uffe5\001\002\000\016\002\uff84\004\uff84\006\uff84\010\uff84" +
    "\011\052\021\uff84\001\002\000\006\002\ufff6\010\ufff6\001" +
    "\002\000\012\002\ufff3\004\047\010\ufff3\021\046\001\002" +
    "\000\054\002\uff87\004\uff87\006\uff87\007\uff87\010\uff87\012" +
    "\uff87\013\uff87\014\uff87\021\uff87\022\uff87\023\uff87\024\uff87" +
    "\025\uff87\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033" +
    "\uff87\042\uff87\043\uff87\001\002\000\056\002\uff8c\004\uff8c" +
    "\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013\uff8c\014" +
    "\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c" +
    "\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\042\uff8c\043" +
    "\uff8c\001\002\000\014\002\uffe9\004\uffe9\006\uffe9\010\uffe9" +
    "\021\uffe9\001\002\000\014\002\uffe8\004\uffe8\006\uffe8\010" +
    "\uffe8\021\uffe8\001\002\000\014\002\uffec\004\uffec\006\uffec" +
    "\010\uffec\021\uffec\001\002\000\014\002\uffea\004\uffea\006" +
    "\uffea\010\uffea\021\uffea\001\002\000\016\002\uff89\004\uff89" +
    "\006\uff89\010\uff89\020\045\021\uff89\001\002\000\042\013" +
    "\015\016\023\032\030\033\011\035\021\036\043\037\042" +
    "\040\034\041\041\044\031\045\032\047\040\050\037\051" +
    "\035\052\017\062\027\001\002\000\054\002\uff88\004\uff88" +
    "\006\uff88\007\uff88\010\uff88\012\uff88\013\uff88\014\uff88\021" +
    "\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027\uff88" +
    "\030\uff88\031\uff88\032\uff88\033\uff88\042\uff88\043\uff88\001" +
    "\002\000\054\002\uff85\004\uff85\006\uff85\007\uff85\010\uff85" +
    "\012\uff85\013\uff85\014\uff85\021\uff85\022\uff85\023\uff85\024" +
    "\uff85\025\uff85\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85" +
    "\033\uff85\042\uff85\043\uff85\001\002\000\014\002\uffeb\004" +
    "\uffeb\006\uffeb\010\uffeb\021\uffeb\001\002\000\056\002\uff8a" +
    "\004\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013" +
    "\uff8a\014\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\025\uff8a" +
    "\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\042" +
    "\uff8a\043\uff8a\001\002\000\056\002\uff84\004\uff84\006\uff84" +
    "\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014\uff84\021" +
    "\uff84\022\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84" +
    "\030\uff84\031\uff84\032\uff84\033\uff84\042\uff84\043\uff84\001" +
    "\002\000\006\002\ufff7\010\ufff7\001\002\000\040\013\uffe4" +
    "\032\uffe4\033\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\044\uffe4\045\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\062\uffe4\001\002\000\042\013\015\016\023\032\030\033" +
    "\011\035\021\036\043\037\042\040\034\041\041\044\031" +
    "\045\032\047\040\050\037\051\035\052\017\062\027\001" +
    "\002\000\042\013\015\016\023\032\030\033\011\035\021" +
    "\036\043\037\042\040\034\041\041\044\031\045\032\047" +
    "\040\050\037\051\035\052\017\062\027\001\002\000\006" +
    "\002\ufff2\010\ufff2\001\002\000\006\002\ufff1\010\ufff1\001" +
    "\002\000\004\034\053\001\002\000\004\012\054\001\002" +
    "\000\012\002\ufff5\004\ufff5\010\ufff5\021\ufff5\001\002\000" +
    "\046\004\016\013\015\016\023\021\036\032\030\033\011" +
    "\035\021\036\024\037\012\040\034\041\041\044\031\045" +
    "\032\047\040\050\037\051\035\052\017\062\027\001\002" +
    "\000\004\002\ufffd\001\002\000\040\013\uffe3\032\uffe3\033" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\044\uffe3" +
    "\045\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\062\uffe3\001" +
    "\002\000\006\002\ufffb\010\ufffb\001\002\000\054\002\uffe2" +
    "\004\uffe2\006\062\007\uffe2\010\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\042\uffe2\043" +
    "\uffe2\001\002\000\106\004\065\005\115\011\075\013\107" +
    "\015\137\016\072\017\112\021\074\031\105\032\030\033" +
    "\011\034\064\035\021\036\043\037\042\040\144\041\147" +
    "\044\070\045\067\046\121\047\126\050\142\051\102\052" +
    "\145\053\135\054\131\055\120\056\110\057\143\060\073" +
    "\061\066\062\132\063\134\064\076\001\002\000\012\002" +
    "\uffef\004\uffef\010\uffef\021\uffef\001\002\000\054\002\uff9f" +
    "\004\uff9f\006\uff9f\007\uff9f\010\uff9f\012\uff9f\013\uff9f\014" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f" +
    "\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\042\uff9f\043" +
    "\uff9f\001\002\000\124\002\uffbe\005\115\007\uffbe\010\uffbe" +
    "\012\uffbe\013\107\014\uffbe\016\072\017\112\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\032\030\033\011\035\021\036\043\037\042\040\144\041" +
    "\147\042\uffbe\043\uffbe\044\070\045\067\046\121\047\126" +
    "\050\142\051\102\052\145\053\135\054\131\055\120\056" +
    "\110\057\143\060\073\061\066\062\132\001\002\000\004" +
    "\020\uffaa\001\002\000\054\002\uff90\004\uff90\006\uff90\007" +
    "\uff90\010\uff90\012\uff90\013\uff90\014\uff90\021\uff90\022\uff90" +
    "\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031" +
    "\uff90\032\uff90\033\uff90\042\uff90\043\uff90\001\002\000\054" +
    "\002\uff91\004\uff91\006\uff91\007\uff91\010\uff91\012\uff91\013" +
    "\uff91\014\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91" +
    "\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\042" +
    "\uff91\043\uff91\001\002\000\032\002\uffda\007\uffda\012\uffda" +
    "\014\uffda\022\uffda\023\uffda\024\222\025\223\026\224\027" +
    "\225\042\uffda\043\uffda\001\002\000\040\013\uffb3\032\uffb3" +
    "\033\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\044" +
    "\uffb3\045\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\062\uffb3" +
    "\001\002\000\004\020\uffab\001\002\000\066\005\115\013" +
    "\107\016\072\017\112\032\030\033\011\035\021\036\043" +
    "\037\042\040\144\041\147\044\070\045\067\046\121\047" +
    "\126\050\142\051\102\052\145\053\135\054\131\055\120" +
    "\056\110\057\143\060\073\061\066\062\132\001\002\000" +
    "\106\004\065\005\115\011\075\013\107\015\137\016\072" +
    "\017\112\021\074\031\105\032\030\033\011\034\064\035" +
    "\021\036\043\037\042\040\144\041\147\044\070\045\067" +
    "\046\121\047\126\050\142\051\102\052\145\053\135\054" +
    "\131\055\120\056\110\057\143\060\073\061\066\062\132" +
    "\063\134\064\076\001\002\000\054\002\uff9e\004\uff9e\006" +
    "\uff9e\007\uff9e\010\uff9e\012\uff9e\013\uff9e\014\uff9e\021\uff9e" +
    "\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\032\uff9e\033\uff9e\042\uff9e\043\uff9e\001\002" +
    "\000\046\002\uffbc\007\uffbc\010\uffbc\012\uffbc\013\uffbc\014" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\042\uffbc\043\uffbc\001" +
    "\002\000\054\002\uff9c\004\uff9c\006\uff9c\007\uff9c\010\uff9c" +
    "\012\uff9c\013\uff9c\014\uff9c\021\uff9c\022\uff9c\023\uff9c\024" +
    "\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c" +
    "\033\uff9c\042\uff9c\043\uff9c\001\002\000\004\020\242\001" +
    "\002\000\060\002\uff89\004\uff89\006\uff89\007\uff89\010\uff89" +
    "\011\uff89\012\uff89\013\uff89\014\uff89\020\uffaf\021\uff89\022" +
    "\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89" +
    "\031\uff89\032\uff89\033\uff89\042\uff89\043\uff89\001\002\000" +
    "\016\002\uffde\007\uffde\012\uffde\014\uffde\042\uffde\043\235" +
    "\001\002\000\040\013\107\032\030\033\011\035\021\036" +
    "\043\037\042\040\144\041\147\044\070\045\067\047\040" +
    "\050\037\051\171\052\170\062\027\001\002\000\106\004" +
    "\065\005\115\011\075\013\107\015\137\016\072\017\112" +
    "\021\074\031\105\032\030\033\011\034\064\035\021\036" +
    "\043\037\042\040\144\041\147\044\070\045\067\046\121" +
    "\047\126\050\142\051\102\052\145\053\135\054\131\055" +
    "\120\056\110\057\143\060\073\061\066\062\132\063\134" +
    "\064\076\001\002\000\014\002\uffdf\007\uffdf\012\uffdf\014" +
    "\uffdf\042\233\001\002\000\054\002\uff8f\004\uff8f\006\uff8f" +
    "\007\uff8f\010\uff8f\012\uff8f\013\uff8f\014\uff8f\021\uff8f\022" +
    "\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\030\uff8f" +
    "\031\uff8f\032\uff8f\033\uff8f\042\uff8f\043\uff8f\001\002\000" +
    "\004\020\uffad\001\002\000\022\002\uffdc\007\uffdc\012\uffdc" +
    "\014\uffdc\022\217\023\220\042\uffdc\043\uffdc\001\002\000" +
    "\052\002\uffa4\004\uffa4\007\uffa4\010\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\031\uffa4\032\uffa4\033\uffa4\042\uffa4" +
    "\043\uffa4\001\002\000\054\002\uffb9\004\uffb9\006\062\007" +
    "\uffb9\010\uffb9\012\uffb9\013\uffb9\014\uffb9\021\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\032\uffb9\033\uffb9\042\uffb9\043\uffb9\001\002\000\046" +
    "\002\uffc2\007\uffc2\010\uffc2\012\uffc2\013\uffc2\014\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\042\uffc2\043\uffc2\001\002\000" +
    "\052\002\uffa5\004\uffa5\007\uffa5\010\uffa5\012\uffa5\013\uffa5" +
    "\014\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026" +
    "\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5\042\uffa5" +
    "\043\uffa5\001\002\000\036\002\uffd7\007\uffd7\012\uffd7\014" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\212\031\213\042\uffd7\043\uffd7\001\002\000\044\002" +
    "\uffcf\007\uffcf\012\uffcf\013\uffcf\014\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\042\uffcf\043\uffcf\001\002\000\004\020\uffae" +
    "\001\002\000\004\020\uffa7\001\002\000\004\011\202\001" +
    "\002\000\046\002\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\042\uffc7\043\uffc7" +
    "\001\002\000\052\002\uffc1\004\uffc1\007\uffc1\010\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\042\uffc1\043\uffc1\001\002\000\054\002\uffa3\004\uffa3" +
    "\006\062\007\uffa3\010\uffa3\012\uffa3\013\uffa3\014\uffa3\021" +
    "\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\031\uffa3\032\uffa3\033\uffa3\042\uffa3\043\uffa3\001" +
    "\002\000\060\002\uff85\004\uff85\006\uff85\007\uff85\010\uff85" +
    "\011\uff85\012\uff85\013\uff85\014\uff85\020\uffa6\021\uff85\022" +
    "\uff85\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85" +
    "\031\uff85\032\uff85\033\uff85\042\uff85\043\uff85\001\002\000" +
    "\046\002\uffc9\007\uffc9\010\177\012\uffc9\013\uffc9\014\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\042\uffc9\043\uffc9\001\002" +
    "\000\054\002\uffa1\004\uffa1\006\uffa1\007\uffa1\010\uffa1\012" +
    "\uffa1\013\uffa1\014\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1" +
    "\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033" +
    "\uffa1\042\uffa1\043\uffa1\001\002\000\004\020\uffb1\001\002" +
    "\000\060\002\uff87\004\uff87\006\uff87\007\uff87\010\uff87\011" +
    "\uff87\012\uff87\013\uff87\014\uff87\020\uffa8\021\uff87\022\uff87" +
    "\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031" +
    "\uff87\032\uff87\033\uff87\042\uff87\043\uff87\001\002\000\052" +
    "\002\uffc6\004\174\007\uffc6\010\uffc6\012\uffc6\013\uffc6\014" +
    "\uffc6\021\173\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\042\uffc6\043" +
    "\uffc6\001\002\000\054\002\uff9d\004\uff9d\006\uff9d\007\uff9d" +
    "\010\uff9d\012\uff9d\013\uff9d\014\uff9d\021\uff9d\022\uff9d\023" +
    "\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d" +
    "\032\uff9d\033\uff9d\042\uff9d\043\uff9d\001\002\000\004\020" +
    "\uffb2\001\002\000\004\007\172\001\002\000\026\032\030" +
    "\033\011\035\021\036\043\037\042\047\040\050\037\051" +
    "\171\052\170\062\027\001\002\000\052\002\uffbf\004\uffbf" +
    "\007\uffbf\010\uffbf\012\uffbf\013\uffbf\014\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\042\uffbf\043\uffbf\001\002\000" +
    "\052\002\uffb5\004\uffb5\007\uffb5\010\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\042\uffb5" +
    "\043\uffb5\001\002\000\060\002\uff88\004\uff88\006\uff88\007" +
    "\uff88\010\uff88\011\uff88\012\uff88\013\uff88\014\uff88\020\uffa9" +
    "\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027" +
    "\uff88\030\uff88\031\uff88\032\uff88\033\uff88\042\uff88\043\uff88" +
    "\001\002\000\004\020\uffac\001\002\000\054\002\uff92\004" +
    "\uff92\006\uff92\007\uff92\010\uff92\012\uff92\013\uff92\014\uff92" +
    "\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92\026\uff92\027" +
    "\uff92\030\uff92\031\uff92\032\uff92\033\uff92\042\uff92\043\uff92" +
    "\001\002\000\060\002\uff86\004\uff86\006\uff86\007\uff86\010" +
    "\uff86\011\uff86\012\uff86\013\uff86\014\uff86\020\uffb0\021\uff86" +
    "\022\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030" +
    "\uff86\031\uff86\032\uff86\033\uff86\042\uff86\043\uff86\001\002" +
    "\000\044\002\uffcb\007\uffcb\012\uffcb\013\uffcb\014\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\042\uffcb\043\uffcb\001\002\000" +
    "\054\002\uff93\004\uff93\006\uff93\007\uff93\010\uff93\012\uff93" +
    "\013\uff93\014\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025" +
    "\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93" +
    "\042\uff93\043\uff93\001\002\000\044\002\uffd2\007\uffd2\012" +
    "\uffd2\013\162\014\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\163\033\161\042" +
    "\uffd2\043\uffd2\001\002\000\052\002\uffc3\004\155\007\uffc3" +
    "\010\uffc3\012\uffc3\013\uffc3\014\uffc3\021\154\022\uffc3\023" +
    "\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3" +
    "\032\uffc3\033\uffc3\042\uffc3\043\uffc3\001\002\000\054\002" +
    "\uff94\004\uff94\006\uff94\007\uff94\010\uff94\012\uff94\013\uff94" +
    "\014\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\026" +
    "\uff94\027\uff94\030\uff94\031\uff94\032\uff94\033\uff94\042\uff94" +
    "\043\uff94\001\002\000\056\002\uff8e\004\uff8e\006\uff8e\007" +
    "\uff8e\010\uff8e\011\uff96\012\uff8e\013\uff8e\014\uff8e\021\uff8e" +
    "\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030" +
    "\uff8e\031\uff8e\032\uff8e\033\uff8e\042\uff8e\043\uff8e\001\002" +
    "\000\066\005\115\013\107\016\072\017\112\032\030\033" +
    "\011\035\021\036\043\037\042\040\144\041\147\044\070" +
    "\045\067\046\121\047\126\050\142\051\102\052\145\053" +
    "\135\054\131\055\120\056\110\057\143\060\073\061\066" +
    "\062\132\001\002\000\066\005\115\013\107\016\072\017" +
    "\112\032\030\033\011\035\021\036\043\037\042\040\144" +
    "\041\147\044\070\045\067\046\121\047\126\050\142\051" +
    "\102\052\145\053\135\054\131\055\120\056\110\057\143" +
    "\060\073\061\066\062\132\001\002\000\054\002\uff8e\004" +
    "\uff8e\006\uff8e\007\uff8e\010\uff8e\012\uff8e\013\uff8e\014\uff8e" +
    "\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027" +
    "\uff8e\030\uff8e\031\uff8e\032\uff8e\033\uff8e\042\uff8e\043\uff8e" +
    "\001\002\000\052\002\uffc0\004\uffc0\007\uffc0\010\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033" +
    "\uffc0\042\uffc0\043\uffc0\001\002\000\052\002\uffbb\004\uffbb" +
    "\007\uffbb\010\uffbb\012\uffbb\013\uffbb\014\uffbb\021\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\042\uffbb\043\uffbb\001\002\000" +
    "\106\004\065\005\115\011\075\013\107\015\137\016\072" +
    "\017\112\021\074\031\105\032\030\033\011\034\064\035" +
    "\021\036\043\037\042\040\144\041\147\044\070\045\067" +
    "\046\121\047\126\050\142\051\102\052\145\053\135\054" +
    "\131\055\120\056\110\057\143\060\073\061\066\062\132" +
    "\063\134\064\076\001\002\000\106\004\065\005\115\011" +
    "\075\013\107\015\137\016\072\017\112\021\074\031\105" +
    "\032\030\033\011\034\064\035\021\036\043\037\042\040" +
    "\144\041\147\044\070\045\067\046\121\047\126\050\142" +
    "\051\102\052\145\053\135\054\131\055\120\056\110\057" +
    "\143\060\073\061\066\062\132\063\134\064\076\001\002" +
    "\000\106\004\065\005\115\011\075\013\107\015\137\016" +
    "\072\017\112\021\074\031\105\032\030\033\011\034\064" +
    "\035\021\036\043\037\042\040\144\041\147\044\070\045" +
    "\067\046\121\047\126\050\142\051\102\052\145\053\135" +
    "\054\131\055\120\056\110\057\143\060\073\061\066\062" +
    "\132\063\134\064\076\001\002\000\044\002\uffcd\007\uffcd" +
    "\012\uffcd\013\uffcd\014\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\042\uffcd\043\uffcd\001\002\000\044\002\uffce\007\uffce\012" +
    "\uffce\013\uffce\014\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\042" +
    "\uffce\043\uffce\001\002\000\044\002\uffcc\007\uffcc\012\uffcc" +
    "\013\uffcc\014\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\042\uffcc" +
    "\043\uffcc\001\002\000\054\002\uff9b\004\uff9b\006\uff9b\007" +
    "\uff9b\010\uff9b\012\uff9b\013\uff9b\014\uff9b\021\uff9b\022\uff9b" +
    "\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031" +
    "\uff9b\032\uff9b\033\uff9b\042\uff9b\043\uff9b\001\002\000\054" +
    "\002\uff86\004\uff86\006\uff86\007\uff86\010\uff86\012\uff86\013" +
    "\uff86\014\uff86\021\uff86\022\uff86\023\uff86\024\uff86\025\uff86" +
    "\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\042" +
    "\uff86\043\uff86\001\002\000\054\002\uff89\004\uff89\006\uff89" +
    "\007\uff89\010\uff89\012\uff89\013\uff89\014\uff89\021\uff89\022" +
    "\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89" +
    "\031\uff89\032\uff89\033\uff89\042\uff89\043\uff89\001\002\000" +
    "\054\002\uffe0\004\uffe0\006\uffe0\007\uffe0\010\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\042\uffe0\043\uffe0\001\002\000\066\005\115\013\107\016" +
    "\072\017\112\032\030\033\011\035\021\036\043\037\042" +
    "\040\144\041\147\044\070\045\067\046\121\047\126\050" +
    "\142\051\102\052\145\053\135\054\131\055\120\056\110" +
    "\057\143\060\073\061\066\062\132\001\002\000\066\005" +
    "\115\013\107\016\072\017\112\032\030\033\011\035\021" +
    "\036\043\037\042\040\144\041\147\044\070\045\067\046" +
    "\121\047\126\050\142\051\102\052\145\053\135\054\131" +
    "\055\120\056\110\057\143\060\073\061\066\062\132\001" +
    "\002\000\052\002\uffc5\004\155\007\uffc5\010\uffc5\012\uffc5" +
    "\013\uffc5\014\uffc5\021\154\022\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\042\uffc5\043\uffc5\001\002\000\052\002\uffc4\004\155\007" +
    "\uffc4\010\uffc4\012\uffc4\013\uffc4\014\uffc4\021\154\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\042\uffc4\043\uffc4\001\002\000\104" +
    "\004\065\005\115\011\075\013\107\015\137\016\072\017" +
    "\112\021\074\032\030\033\011\034\064\035\021\036\043" +
    "\037\042\040\144\041\147\044\070\045\067\046\121\047" +
    "\126\050\142\051\102\052\145\053\135\054\131\055\120" +
    "\056\110\057\143\060\073\061\066\062\132\063\134\064" +
    "\076\001\002\000\044\002\uffc8\007\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\042\uffc8\043\uffc8" +
    "\001\002\000\052\002\uffa2\004\uffa2\007\uffa2\010\uffa2\012" +
    "\uffa2\013\uffa2\014\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2" +
    "\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033" +
    "\uffa2\042\uffa2\043\uffa2\001\002\000\110\004\065\005\115" +
    "\011\075\012\203\013\107\015\137\016\072\017\112\021" +
    "\074\031\105\032\030\033\011\034\064\035\021\036\043" +
    "\037\042\040\144\041\147\044\070\045\067\046\121\047" +
    "\126\050\142\051\102\052\145\053\135\054\131\055\120" +
    "\056\110\057\143\060\073\061\066\062\132\063\134\064" +
    "\076\001\002\000\054\002\uff9a\004\uff9a\006\uff9a\007\uff9a" +
    "\010\uff9a\012\uff9a\013\uff9a\014\uff9a\021\uff9a\022\uff9a\023" +
    "\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a" +
    "\032\uff9a\033\uff9a\042\uff9a\043\uff9a\001\002\000\006\012" +
    "\uff98\014\210\001\002\000\006\012\uff95\014\uff95\001\002" +
    "\000\004\012\207\001\002\000\054\002\uff99\004\uff99\006" +
    "\uff99\007\uff99\010\uff99\012\uff99\013\uff99\014\uff99\021\uff99" +
    "\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030" +
    "\uff99\031\uff99\032\uff99\033\uff99\042\uff99\043\uff99\001\002" +
    "\000\106\004\065\005\115\011\075\013\107\015\137\016" +
    "\072\017\112\021\074\031\105\032\030\033\011\034\064" +
    "\035\021\036\043\037\042\040\144\041\147\044\070\045" +
    "\067\046\121\047\126\050\142\051\102\052\145\053\135" +
    "\054\131\055\120\056\110\057\143\060\073\061\066\062" +
    "\132\063\134\064\076\001\002\000\004\012\uff97\001\002" +
    "\000\106\004\065\005\115\011\075\013\107\015\137\016" +
    "\072\017\112\021\074\031\105\032\030\033\011\034\064" +
    "\035\021\036\043\037\042\040\144\041\147\044\070\045" +
    "\067\046\121\047\126\050\142\051\102\052\145\053\135" +
    "\054\131\055\120\056\110\057\143\060\073\061\066\062" +
    "\132\063\134\064\076\001\002\000\106\004\065\005\115" +
    "\011\075\013\107\015\137\016\072\017\112\021\074\031" +
    "\105\032\030\033\011\034\064\035\021\036\043\037\042" +
    "\040\144\041\147\044\070\045\067\046\121\047\126\050" +
    "\142\051\102\052\145\053\135\054\131\055\120\056\110" +
    "\057\143\060\073\061\066\062\132\063\134\064\076\001" +
    "\002\000\044\002\uffd0\007\uffd0\012\uffd0\013\162\014\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\163\033\161\042\uffd0\043\uffd0\001\002" +
    "\000\044\002\uffd1\007\uffd1\012\uffd1\013\162\014\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\163\033\161\042\uffd1\043\uffd1\001\002\000" +
    "\052\002\uffb8\004\uffb8\007\uffb8\010\uffb8\012\uffb8\013\uffb8" +
    "\014\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\042\uffb8" +
    "\043\uffb8\001\002\000\106\004\065\005\115\011\075\013" +
    "\107\015\137\016\072\017\112\021\074\031\105\032\030" +
    "\033\011\034\064\035\021\036\043\037\042\040\144\041" +
    "\147\044\070\045\067\046\121\047\126\050\142\051\102" +
    "\052\145\053\135\054\131\055\120\056\110\057\143\060" +
    "\073\061\066\062\132\063\134\064\076\001\002\000\106" +
    "\004\065\005\115\011\075\013\107\015\137\016\072\017" +
    "\112\021\074\031\105\032\030\033\011\034\064\035\021" +
    "\036\043\037\042\040\144\041\147\044\070\045\067\046" +
    "\121\047\126\050\142\051\102\052\145\053\135\054\131" +
    "\055\120\056\110\057\143\060\073\061\066\062\132\063" +
    "\134\064\076\001\002\000\032\002\uffd8\007\uffd8\012\uffd8" +
    "\014\uffd8\022\uffd8\023\uffd8\024\222\025\223\026\224\027" +
    "\225\042\uffd8\043\uffd8\001\002\000\106\004\065\005\115" +
    "\011\075\013\107\015\137\016\072\017\112\021\074\031" +
    "\105\032\030\033\011\034\064\035\021\036\043\037\042" +
    "\040\144\041\147\044\070\045\067\046\121\047\126\050" +
    "\142\051\102\052\145\053\135\054\131\055\120\056\110" +
    "\057\143\060\073\061\066\062\132\063\134\064\076\001" +
    "\002\000\106\004\065\005\115\011\075\013\107\015\137" +
    "\016\072\017\112\021\074\031\105\032\030\033\011\034" +
    "\064\035\021\036\043\037\042\040\144\041\147\044\070" +
    "\045\067\046\121\047\126\050\142\051\102\052\145\053" +
    "\135\054\131\055\120\056\110\057\143\060\073\061\066" +
    "\062\132\063\134\064\076\001\002\000\106\004\065\005" +
    "\115\011\075\013\107\015\137\016\072\017\112\021\074" +
    "\031\105\032\030\033\011\034\064\035\021\036\043\037" +
    "\042\040\144\041\147\044\070\045\067\046\121\047\126" +
    "\050\142\051\102\052\145\053\135\054\131\055\120\056" +
    "\110\057\143\060\073\061\066\062\132\063\134\064\076" +
    "\001\002\000\106\004\065\005\115\011\075\013\107\015" +
    "\137\016\072\017\112\021\074\031\105\032\030\033\011" +
    "\034\064\035\021\036\043\037\042\040\144\041\147\044" +
    "\070\045\067\046\121\047\126\050\142\051\102\052\145" +
    "\053\135\054\131\055\120\056\110\057\143\060\073\061" +
    "\066\062\132\063\134\064\076\001\002\000\036\002\uffd3" +
    "\007\uffd3\012\uffd3\014\uffd3\022\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\030\212\031\213\042\uffd3\043\uffd3" +
    "\001\002\000\036\002\uffd4\007\uffd4\012\uffd4\014\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\212" +
    "\031\213\042\uffd4\043\uffd4\001\002\000\036\002\uffd5\007" +
    "\uffd5\012\uffd5\014\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\030\212\031\213\042\uffd5\043\uffd5\001" +
    "\002\000\036\002\uffd6\007\uffd6\012\uffd6\014\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\212\031" +
    "\213\042\uffd6\043\uffd6\001\002\000\032\002\uffd9\007\uffd9" +
    "\012\uffd9\014\uffd9\022\uffd9\023\uffd9\024\222\025\223\026" +
    "\224\027\225\042\uffd9\043\uffd9\001\002\000\106\004\065" +
    "\005\115\011\075\013\107\015\137\016\072\017\112\021" +
    "\074\031\105\032\030\033\011\034\064\035\021\036\043" +
    "\037\042\040\144\041\147\044\070\045\067\046\121\047" +
    "\126\050\142\051\102\052\145\053\135\054\131\055\120" +
    "\056\110\057\143\060\073\061\066\062\132\063\134\064" +
    "\076\001\002\000\016\002\uffdd\007\uffdd\012\uffdd\014\uffdd" +
    "\042\uffdd\043\235\001\002\000\106\004\065\005\115\011" +
    "\075\013\107\015\137\016\072\017\112\021\074\031\105" +
    "\032\030\033\011\034\064\035\021\036\043\037\042\040" +
    "\144\041\147\044\070\045\067\046\121\047\126\050\142" +
    "\051\102\052\145\053\135\054\131\055\120\056\110\057" +
    "\143\060\073\061\066\062\132\063\134\064\076\001\002" +
    "\000\022\002\uffdb\007\uffdb\012\uffdb\014\uffdb\022\217\023" +
    "\220\042\uffdb\043\uffdb\001\002\000\044\002\uffca\007\uffca" +
    "\012\uffca\013\uffca\014\uffca\022\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\042\uffca\043\uffca\001\002\000\054\002\uffb6\004\uffb6\006" +
    "\062\007\uffb6\010\uffb6\012\uffb6\013\uffb6\014\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\042\uffb6\043\uffb6\001\002" +
    "\000\052\002\uffb7\004\uffb7\007\uffb7\010\uffb7\012\uffb7\013" +
    "\uffb7\014\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7" +
    "\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\042" +
    "\uffb7\043\uffb7\001\002\000\040\013\uffb4\032\uffb4\033\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\044\uffb4\045" +
    "\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\062\uffb4\001\002" +
    "\000\004\012\244\001\002\000\054\002\uffa0\004\uffa0\006" +
    "\uffa0\007\uffa0\010\uffa0\012\uffa0\013\uffa0\014\uffa0\021\uffa0" +
    "\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030" +
    "\uffa0\031\uffa0\032\uffa0\033\uffa0\042\uffa0\043\uffa0\001\002" +
    "\000\052\002\uffba\004\155\007\uffba\010\uffba\012\uffba\013" +
    "\uffba\014\uffba\021\154\022\uffba\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\042" +
    "\uffba\043\uffba\001\002\000\052\002\uffbd\004\155\007\uffbd" +
    "\010\uffbd\012\uffbd\013\uffbd\014\uffbd\021\154\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\042\uffbd\043\uffbd\001\002\000\052\002" +
    "\uffe1\004\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\042\uffe1\043\uffe1" +
    "\001\002\000\004\034\251\001\002\000\004\014\252\001" +
    "\002\000\004\034\253\001\002\000\004\012\254\001\002" +
    "\000\012\002\ufff4\004\ufff4\010\ufff4\021\ufff4\001\002\000" +
    "\014\002\uffee\004\uffee\006\062\010\uffee\021\uffee\001\002" +
    "\000\012\002\uffed\004\uffed\010\uffed\021\uffed\001\002\000" +
    "\042\013\015\016\023\032\030\033\011\035\021\036\043" +
    "\037\042\040\034\041\041\044\031\045\032\047\040\050" +
    "\037\051\035\052\017\062\027\001\002\000\042\013\015" +
    "\016\023\032\030\033\011\035\021\036\043\037\042\040" +
    "\034\041\041\044\031\045\032\047\040\050\037\051\035" +
    "\052\017\062\027\001\002\000\006\002\ufff9\010\ufff9\001" +
    "\002\000\006\002\ufff8\010\ufff8\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\004\003\003\001\001\000\002\001\001\000" +
    "\070\004\262\006\122\010\132\011\123\012\105\013\102" +
    "\014\110\015\070\016\115\017\147\020\116\021\127\022" +
    "\077\023\124\024\145\025\126\026\140\027\150\030\137" +
    "\031\113\032\076\033\112\034\151\046\152\047\121\050" +
    "\100\051\103\001\001\000\024\035\006\036\021\037\017" +
    "\040\024\041\025\042\012\043\032\046\013\052\007\001" +
    "\001\000\002\001\001\000\010\042\254\043\032\046\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\060\044\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\040\057\041\025\042\012\043\032\046\013\052" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\040\043\041\025\042\012\043\032\046\013\052\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\040\050\041\025\042\012\043\032" +
    "\046\013\052\007\001\001\000\016\040\047\041\025\042" +
    "\012\043\032\046\013\052\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\035\006\036\055\037\017\040\024" +
    "\041\025\042\012\043\032\046\013\052\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\060\044\246\001\001\000\070\004\135\006\122\010" +
    "\132\011\123\012\105\013\102\014\110\015\070\016\115" +
    "\017\147\020\116\021\127\022\077\023\124\024\145\025" +
    "\126\026\140\027\150\030\137\031\113\032\076\033\112" +
    "\034\151\046\152\047\121\050\100\051\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\011\123\026\140" +
    "\027\245\030\137\033\112\034\151\046\155\050\100\051" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\011\123\026\140\027\244\030\137\033\112" +
    "\034\151\046\155\050\100\051\103\001\001\000\070\004" +
    "\242\006\122\010\132\011\123\012\105\013\102\014\110" +
    "\015\070\016\115\017\147\020\116\021\127\022\077\023" +
    "\124\024\145\025\126\026\140\027\150\030\137\031\113" +
    "\032\076\033\112\034\151\046\152\047\121\050\100\051" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\237\034\151\046\155\001\001\000\052" +
    "\006\122\010\132\011\123\020\236\021\127\022\077\023" +
    "\124\024\145\025\126\026\140\027\150\030\137\031\113" +
    "\032\076\033\112\034\151\046\152\047\121\050\100\051" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\060\044\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\060\044\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\011\157" +
    "\026\140\033\112\034\151\046\155\050\100\051\103\001" +
    "\001\000\020\011\156\026\140\033\112\034\151\046\155" +
    "\050\100\051\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\006\122\010\132\011\123" +
    "\020\165\021\127\022\077\023\124\024\145\025\126\026" +
    "\140\027\150\030\137\031\113\032\076\033\112\034\151" +
    "\046\152\047\121\050\100\051\103\001\001\000\052\006" +
    "\122\010\132\011\123\020\164\021\127\022\077\023\124" +
    "\024\145\025\126\026\140\027\150\030\137\031\113\032" +
    "\076\033\112\034\151\046\152\047\121\050\100\051\103" +
    "\001\001\000\052\006\122\010\132\011\123\020\163\021" +
    "\127\022\077\023\124\024\145\025\126\026\140\027\150" +
    "\030\137\031\113\032\076\033\112\034\151\046\152\047" +
    "\121\050\100\051\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\011\123" +
    "\026\140\027\175\030\137\033\112\034\151\046\155\050" +
    "\100\051\103\001\001\000\024\011\123\026\140\027\174" +
    "\030\137\033\112\034\151\046\155\050\100\051\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\006\122" +
    "\010\132\011\123\021\127\022\077\023\124\024\177\025" +
    "\126\026\140\027\150\030\137\031\113\032\076\033\112" +
    "\034\151\046\152\047\121\050\100\051\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\074\004\204\005\203" +
    "\006\122\010\132\011\123\012\105\013\102\014\110\015" +
    "\070\016\115\017\147\020\116\021\127\022\077\023\124" +
    "\024\145\025\126\026\140\027\150\030\137\031\113\032" +
    "\076\033\112\034\151\045\205\046\152\047\121\050\100" +
    "\051\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\004\204\005\203\006\122\010\132\011\123\012\105\013" +
    "\102\014\110\015\070\016\115\017\147\020\116\021\127" +
    "\022\077\023\124\024\145\025\126\026\140\027\150\030" +
    "\137\031\113\032\076\033\112\034\151\045\210\046\152" +
    "\047\121\050\100\051\103\001\001\000\002\001\001\000" +
    "\054\006\122\010\132\011\123\017\214\020\116\021\127" +
    "\022\077\023\124\024\145\025\126\026\140\027\150\030" +
    "\137\031\113\032\076\033\112\034\151\046\152\047\121" +
    "\050\100\051\103\001\001\000\054\006\122\010\132\011" +
    "\123\017\213\020\116\021\127\022\077\023\124\024\145" +
    "\025\126\026\140\027\150\030\137\031\113\032\076\033" +
    "\112\034\151\046\152\047\121\050\100\051\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\006\122\010\132\011\123\015\231\016\115\017\147" +
    "\020\116\021\127\022\077\023\124\024\145\025\126\026" +
    "\140\027\150\030\137\031\113\032\076\033\112\034\151" +
    "\046\152\047\121\050\100\051\103\001\001\000\060\006" +
    "\122\010\132\011\123\015\220\016\115\017\147\020\116" +
    "\021\127\022\077\023\124\024\145\025\126\026\140\027" +
    "\150\030\137\031\113\032\076\033\112\034\151\046\152" +
    "\047\121\050\100\051\103\001\001\000\002\001\001\000" +
    "\056\006\122\010\132\011\123\016\230\017\147\020\116" +
    "\021\127\022\077\023\124\024\145\025\126\026\140\027" +
    "\150\030\137\031\113\032\076\033\112\034\151\046\152" +
    "\047\121\050\100\051\103\001\001\000\056\006\122\010" +
    "\132\011\123\016\227\017\147\020\116\021\127\022\077" +
    "\023\124\024\145\025\126\026\140\027\150\030\137\031" +
    "\113\032\076\033\112\034\151\046\152\047\121\050\100" +
    "\051\103\001\001\000\056\006\122\010\132\011\123\016" +
    "\226\017\147\020\116\021\127\022\077\023\124\024\145" +
    "\025\126\026\140\027\150\030\137\031\113\032\076\033" +
    "\112\034\151\046\152\047\121\050\100\051\103\001\001" +
    "\000\056\006\122\010\132\011\123\016\225\017\147\020" +
    "\116\021\127\022\077\023\124\024\145\025\126\026\140" +
    "\027\150\030\137\031\113\032\076\033\112\034\151\046" +
    "\152\047\121\050\100\051\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\064\006\122\010\132\011\123\013\233" +
    "\014\110\015\070\016\115\017\147\020\116\021\127\022" +
    "\077\023\124\024\145\025\126\026\140\027\150\030\137" +
    "\031\113\032\076\033\112\034\151\046\152\047\121\050" +
    "\100\051\103\001\001\000\002\001\001\000\062\006\122" +
    "\010\132\011\123\014\235\015\070\016\115\017\147\020" +
    "\116\021\127\022\077\023\124\024\145\025\126\026\140" +
    "\027\150\030\137\031\113\032\076\033\112\034\151\046" +
    "\152\047\121\050\100\051\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\060\044\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\060\044" +
    "\255\001\001\000\002\001\001\000\016\040\261\041\025" +
    "\042\012\043\032\046\013\052\007\001\001\000\016\040" +
    "\260\041\025\042\012\043\032\046\013\052\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$XPathParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$XPathParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$XPathParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Used by function calls with no args.
     */
    static public final Vector EmptyArgs = new Vector(0);

    /**
     * Reference to non-existing variable.
     */
    static public final VariableRef DummyVarRef = null;

    /**
     * Reference to the Parser class.
     */
    private Parser _parser;
    private XSLTC  _xsltc;

    /**
     * Line number where this expression/pattern was declared.
     */
    private int _lineNumber = 0;

    /**
     * Reference to the symbol table.
     */
    public SymbolTable _symbolTable;

    public XPathParser(Parser parser) {
        _parser = parser;
	_xsltc = parser.getXSLTC();
        _symbolTable = parser.getSymbolTable();
    }

    public int getLineNumber() {
        return _lineNumber;
    }

    public QName getQName(String name) {
          return _parser.getQName(name);
    }    

    public void setMultiDocument(boolean flag) {
          _xsltc.setMultiDocument(flag);
    }

    public int findNodeType(int axis, Object test) {
	if (test == null) {  // *
            return axis == Axis.ATTRIBUTE
                   ? NodeTest.ATTRIBUTE
                   : NodeTest.ELEMENT;
        }
        else if (test instanceof Integer) {
            return ((Integer)test).intValue();
        }
        else {
	    QName name = (QName)test;
            if (name.getPrefix() == null || name.getNamespace() == null) {
                final String local = name.getLocalPart();
	        if (local.equals("*"))
                    return(NodeTest.ELEMENT);
                else if (local.equals("@*"))
                    return(NodeTest.ATTRIBUTE);
                name = new QName(null,null,local);
            }
	    return axis == Axis.ATTRIBUTE
		? _xsltc.registerAttribute(name)
		: _xsltc.registerElement(name);
        }
    }

    /**
     * Parse the expression passed to the current scanner. If this
     * expression contains references to local variables and it will be 
     * compiled in an external module (not in the main class) request 
     * the current template to create a new variable stack frame.
     *
     * @param lineNumber Line where the current expression is defined.
     * @param external   Set to <tt>true</tt> if this expression is
     *                   compiled in a separate module.
     * 
     */
    public Symbol parse(int lineNumber) throws Exception {
        try {
	    _lineNumber = lineNumber;
	    return super.parse();
        }
        catch (IllegalCharException e) {
	    addError(new ErrorMsg("Illegal character '" + e.getMessage() +
		"' in XPath expression.", lineNumber));
        }
        return null;
    }

    /**
     * Lookup a variable or parameter in the symbol table given its name. 
     *
     * @param name Name of the symbol being looked up.
     */
    final SyntaxTreeNode lookupName(QName name) {
        // Is it a local var or param ?
        final SyntaxTreeNode result = _parser.lookupVariable(name);
	return result != null ? result : _symbolTable.lookupName(name);

	/*
        // Is it a global var or param ?
        if (result == null) {
           result = _symbolTable.lookupName(name);
        }
	else {
	   System.out.println("looked up " + name);
	   result.display(0);
	}
	*/

	/*
	if (result != null) {
	   System.out.println("looked up " + name);
	   result.display(0);
        }
	else {
	   System.out.println("looked up failure");
	}
        return result;
	*/
    }

    public final void addError(ErrorMsg error) {
        _parser.addError(error);
    }
           
    public void report_error(String message, Object info) {
        // empty
    }

    public void report_fatal_error(String message, Object info) {
        // empty
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$XPathParser$actions {
  private final XPathParser parser;

  /** Constructor */
  CUP$XPathParser$actions(XPathParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$XPathParser$do_action(
    int                        CUP$XPathParser$act_num,
    java_cup.runtime.lr_parser CUP$XPathParser$parser,
    java.util.Stack            CUP$XPathParser$stack,
    int                        CUP$XPathParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$XPathParser$result;

      /* select the action based on the action number */
      switch (CUP$XPathParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // QName ::= ID 
            {
              QName RESULT = null;
		 RESULT = parser.getQName("id"); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(36/*QName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // QName ::= SELF 
            {
              QName RESULT = null;
		 RESULT = parser.getQName("self"); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(36/*QName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // QName ::= ATTRIBUTE 
            {
              QName RESULT = null;
		 RESULT = parser.getQName("attribute"); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(36/*QName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // QName ::= PRECEDING 
            {
              QName RESULT = null;
		 RESULT = parser.getQName("preceding"); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(36/*QName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // QName ::= PARENT 
            {
              QName RESULT = null;
		 RESULT = parser.getQName("parent"); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(36/*QName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // QName ::= CHILD 
            {
              QName RESULT = null;
		 RESULT = parser.getQName("child"); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(36/*QName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // QName ::= KEY 
            {
              QName RESULT = null;
		 RESULT = parser.getQName("key"); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(36/*QName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // QName ::= MOD 
            {
              QName RESULT = null;
		 RESULT = parser.getQName("mod"); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(36/*QName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // QName ::= DIV 
            {
              QName RESULT = null;
		 RESULT = parser.getQName("div"); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(36/*QName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // QName ::= QNAME 
            {
              QName RESULT = null;
		int qnameleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int qnameright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		String qname = (String)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = parser.getQName(qname); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(36/*QName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NameTest ::= QName 
            {
              Object RESULT = null;
		int qnleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int qnright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		QName qn = (QName)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = qn; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(26/*NameTest*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NameTest ::= STAR 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(26/*NameTest*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NodeTest ::= PI 
            {
              Object RESULT = null;
		 RESULT = new Integer(NodeTest.PI); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(25/*NodeTest*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NodeTest ::= COMMENT 
            {
              Object RESULT = null;
		 RESULT = new Integer(NodeTest.COMMENT); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(25/*NodeTest*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NodeTest ::= TEXT 
            {
              Object RESULT = null;
		 RESULT = new Integer(NodeTest.TEXT); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(25/*NodeTest*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NodeTest ::= NODE 
            {
              Object RESULT = null;
		 RESULT = new Integer(NodeTest.ANODE); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(25/*NodeTest*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NodeTest ::= NameTest 
            {
              Object RESULT = null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Object nt = (Object)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = nt; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(25/*NodeTest*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Argument ::= Expr 
            {
              Expression RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = ex; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(3/*Argument*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FunctionName ::= QName 
            {
              QName RESULT = null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		QName fname = (QName)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		
             fname.clearDefaultNamespace();
             RESULT = fname; 
        
              CUP$XPathParser$result = new java_cup.runtime.Symbol(37/*FunctionName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NonemptyArgumentList ::= Argument COMMA NonemptyArgumentList 
            {
              Vector RESULT = null;
		int argleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int arglleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int arglright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Vector argl = (Vector)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 argl.insertElementAt(arg, 0); RESULT = argl; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(35/*NonemptyArgumentList*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NonemptyArgumentList ::= Argument 
            {
              Vector RESULT = null;
		int argleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression arg = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 
            Vector temp = new Vector();
            temp.addElement(arg);
            RESULT = temp;
        
              CUP$XPathParser$result = new java_cup.runtime.Symbol(35/*NonemptyArgumentList*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FunctionCall ::= FunctionName LPAREN NonemptyArgumentList RPAREN 
            {
              Expression RESULT = null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-3)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-3)).right;
		QName fname = (QName)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-3)).value;
		int arglleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left;
		int arglright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).right;
		Vector argl = (Vector)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).value;
		
          if (fname == parser.getQName("concat")) {
            RESULT = new ConcatCall(fname, argl);
	  }
          else if (fname == parser.getQName("number")) {
            RESULT = new NumberCall(fname, argl);
	  }
          else if (fname == parser.getQName("document")) {
	    parser.setMultiDocument(true);
            RESULT = new DocumentCall(fname, argl);
	  }
          else if (fname == parser.getQName("string")) {
            RESULT = new StringCall(fname, argl);
	  }
          else if (fname == parser.getQName("boolean")) {
            RESULT = new BooleanCall(fname, argl);
	  }
          else if (fname == parser.getQName("name")) {
            RESULT = new NameCall(fname, argl);
	  }
          else if (fname == parser.getQName("generate-id")) {
            RESULT = new GenerateIdCall(fname, argl);
	  }
          else if (fname == parser.getQName("not")) {
            RESULT = new NotCall(fname, argl);
	  }
          else if (fname == parser.getQName("format-number")) {
            RESULT = new FormatNumberCall(fname, argl);
	  }
          else if (fname == parser.getQName("unparsed-entity-uri")) {
            RESULT = new UnparsedEntityUriCall(fname, argl);
	  }
          else if (fname == parser.getQName("key")) {
            RESULT = new KeyCall(fname, argl);
	  }
          else if (fname == parser.getQName("id")) {
            RESULT = new KeyCall(fname, argl);
	  }
          else if (fname == parser.getQName("ceiling")) {
            RESULT = new CeilingCall(fname, argl);
	  }
          else if (fname == parser.getQName("round")) {
            RESULT = new RoundCall(fname, argl);
	  }
          else if (fname == parser.getQName("floor")) {
            RESULT = new FloorCall(fname, argl);
	  }
          else if (fname == parser.getQName("contains")) {
            RESULT = new ContainsCall(fname, argl);
	  }
          else if (fname == parser.getQName("string-length")) {
            RESULT = new StringLengthCall(fname, argl);
	  }
          else if (fname == parser.getQName("starts-with")) {
            RESULT = new StartsWithCall(fname, argl);
	  }
          else if (fname == parser.getQName("function-available")) {
            RESULT = new FunctionAvailableCall(fname, argl);
	  }
          else if (fname == parser.getQName("element-available")) {
            RESULT = new ElementAvailableCall(fname, argl);
	  }
          else if (fname == parser.getQName("local-name")) {
            RESULT = new LocalNameCall(fname, argl);
	  }
          else if (fname == parser.getQName("lang")) {
            RESULT = new LangCall(fname, argl);
	  }
          else if (fname == parser.getQName("namespace-uri")) {
            RESULT = new NamespaceUriCall(fname, argl);
	  }
          else {
            RESULT = new FunctionCall(fname, argl);
	  }
    
              CUP$XPathParser$result = new java_cup.runtime.Symbol(16/*FunctionCall*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // FunctionCall ::= FunctionName LPAREN RPAREN 
            {
              Expression RESULT = null;
		int fnameleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int fnameright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		QName fname = (QName)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		 
          if (fname == parser.getQName("current")) {
            RESULT = new CurrentCall(fname);
	  }
          else if (fname == parser.getQName("number")) {
            RESULT = new NumberCall(fname, parser.EmptyArgs);
	  }
          else if (fname == parser.getQName("string")) {
            RESULT = new StringCall(fname, parser.EmptyArgs);
	  }
          else if (fname == parser.getQName("concat")) {
            RESULT = new ConcatCall(fname, parser.EmptyArgs);
	  }
          else if (fname == parser.getQName("true")) {
            RESULT = new BooleanExpr(true);
	  }
          else if (fname == parser.getQName("false")) {
            RESULT = new BooleanExpr(false);
	  }
          else if (fname == parser.getQName("name")) {
            RESULT = new NameCall(fname);
	  }
          else if (fname == parser.getQName("generate-id")) {
            RESULT = new GenerateIdCall(fname, parser.EmptyArgs);
	  }
          else if (fname == parser.getQName("string-length")) {
            RESULT = new StringLengthCall(fname, parser.EmptyArgs);
	  }
          else if (fname == parser.getQName("position")) {
            RESULT = new PositionCall(fname);
	  }
          else if (fname == parser.getQName("last")) {
            RESULT = new LastCall(fname);
	  }
          else if (fname == parser.getQName("local-name")) {
            RESULT = new LocalNameCall(fname);
	  }
          else if (fname == parser.getQName("namespace-uri")) {
            RESULT = new NamespaceUriCall(fname);
	  }
          else {
            RESULT = new FunctionCall(fname, parser.EmptyArgs);
	  }
        
              CUP$XPathParser$result = new java_cup.runtime.Symbol(16/*FunctionCall*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VariableReference ::= DOLLAR QName 
            {
              Expression RESULT = null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		QName varName = (QName)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 
            SyntaxTreeNode node = parser.lookupName(varName);
            if (node != null) {
                if (node instanceof Variable) {
                    RESULT = new VariableRef((Variable)node);
                }
                else if (node instanceof Param) {
                    RESULT = new ParameterRef((Param)node);
                } 
                else {
                    node.getParser().internalError();
                }
            }
            else {
                RESULT = parser.DummyVarRef;
                parser.addError(new ErrorMsg(ErrorMsg.VARUNDEF_ERR, 
		    parser.getLineNumber(), varName));
            }
        
              CUP$XPathParser$result = new java_cup.runtime.Symbol(15/*VariableReference*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PrimaryExpr ::= FunctionCall 
            {
              Expression RESULT = null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression fc = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = fc; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(17/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PrimaryExpr ::= REAL 
            {
              Expression RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Double num = (Double)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new RealExpr(num.doubleValue()); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(17/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PrimaryExpr ::= INT 
            {
              Expression RESULT = null;
		int numleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 
	    if (num.doubleValue() == -0)
	        RESULT = new RealExpr(num.doubleValue());
	    else if (num.intValue() == 0)
	        RESULT = new IntExpr(num.intValue());
	    else if (num.doubleValue() == 0.0)
	        RESULT = new RealExpr(num.doubleValue());
	    else
	        RESULT = new IntExpr(num.intValue());
        
              CUP$XPathParser$result = new java_cup.runtime.Symbol(17/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PrimaryExpr ::= Literal 
            {
              Expression RESULT = null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		String string = (String)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 
	/*
	* If the string appears to have the syntax of a QName, store 
	* namespace info in the literal expression. This is used for
	* element-available and function-available functions.
	*/
	final int index = string.indexOf(':');
	final String prefix = index >= 0
                                     ? string.substring(0, index)
                                     : "";
	String namespace = parser._symbolTable.lookupNamespace(prefix);
	RESULT = namespace == null
                         ? new LiteralExpr(string)
                         : new LiteralExpr(string, namespace); 
	
              CUP$XPathParser$result = new java_cup.runtime.Symbol(17/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PrimaryExpr ::= LPAREN Expr RPAREN 
            {
              Expression RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).value;
		 RESULT = ex; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(17/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PrimaryExpr ::= VariableReference 
            {
              Expression RESULT = null;
		int vrleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int vrright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression vr = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = vr; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(17/*PrimaryExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FilterExpr ::= PrimaryExpr Predicates 
            {
              Expression RESULT = null;
		int primaryleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left;
		int primaryright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).right;
		Expression primary = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Vector pp = (Vector)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new FilterExpr(primary, pp); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(6/*FilterExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FilterExpr ::= PrimaryExpr 
            {
              Expression RESULT = null;
		int primaryleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int primaryright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression primary = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = primary; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(6/*FilterExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AbbreviatedStep ::= DDOT 
            {
              Expression RESULT = null;
		 RESULT = new Step(Axis.PARENT, NodeTest.ANODE, null); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(20/*AbbreviatedStep*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // AbbreviatedStep ::= DOT 
            {
              Expression RESULT = null;
		 RESULT = new Step(Axis.SELF, NodeTest.ANODE, null); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(20/*AbbreviatedStep*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // AxisName ::= SELF 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Axis.SELF); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(38/*AxisName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // AxisName ::= PRECEDINGSIBLING 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Axis.PRECEDINGSIBLING); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(38/*AxisName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // AxisName ::= PRECEDING 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Axis.PRECEDING); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(38/*AxisName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // AxisName ::= PARENT 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Axis.PARENT); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(38/*AxisName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // AxisName ::= NAMESPACE 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Axis.NAMESPACE); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(38/*AxisName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // AxisName ::= FOLLOWINGSIBLING 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Axis.FOLLOWINGSIBLING); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(38/*AxisName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // AxisName ::= FOLLOWING 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Axis.FOLLOWING); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(38/*AxisName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // AxisName ::= DESCENDANTORSELF 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Axis.DESCENDANTORSELF); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(38/*AxisName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // AxisName ::= DESCENDANT 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Axis.DESCENDANT); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(38/*AxisName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // AxisName ::= CHILD 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Axis.CHILD); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(38/*AxisName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // AxisName ::= ATTRIBUTE 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Axis.ATTRIBUTE); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(38/*AxisName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // AxisName ::= ANCESTORORSELF 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Axis.ANCESTORORSELF); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(38/*AxisName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // AxisName ::= ANCESTOR 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Axis.ANCESTOR); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(38/*AxisName*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // AxisSpecifier ::= ATSIGN 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Axis.ATTRIBUTE); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(39/*AxisSpecifier*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // AxisSpecifier ::= AxisName DCOLON 
            {
              Integer RESULT = null;
		int anleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left;
		int anright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).right;
		Integer an = (Integer)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).value;
		 RESULT = an; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(39/*AxisSpecifier*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Step ::= AbbreviatedStep 
            {
              Expression RESULT = null;
		int abbrevleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int abbrevright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression abbrev = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = abbrev; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(7/*Step*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Step ::= AxisSpecifier NodeTest 
            {
              Expression RESULT = null;
		int axisleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left;
		int axisright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).right;
		Integer axis = (Integer)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).value;
		int ntestleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ntestright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Object ntest = (Object)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new Step(axis.intValue(),
                             parser.findNodeType(axis.intValue(), ntest),
                             null);
        
              CUP$XPathParser$result = new java_cup.runtime.Symbol(7/*Step*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Step ::= AxisSpecifier NodeTest Predicates 
            {
              Expression RESULT = null;
		int axisleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int axisright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Integer axis = (Integer)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int ntestleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left;
		int ntestright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).right;
		Object ntest = (Object)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Vector pp = (Vector)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new Step(axis.intValue(),
                             parser.findNodeType(axis.intValue(), ntest),
                             pp);
        
              CUP$XPathParser$result = new java_cup.runtime.Symbol(7/*Step*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Step ::= NodeTest Predicates 
            {
              Expression RESULT = null;
		int ntestleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left;
		int ntestright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).right;
		Object ntest = (Object)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Vector pp = (Vector)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new Step(Axis.CHILD,
                             parser.findNodeType(Axis.CHILD, ntest),
                             pp);
        
              CUP$XPathParser$result = new java_cup.runtime.Symbol(7/*Step*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Step ::= NodeTest 
            {
              Expression RESULT = null;
		int ntestleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ntestright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Object ntest = (Object)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new Step(Axis.CHILD,
                             parser.findNodeType(Axis.CHILD, ntest),
                             null);
        
              CUP$XPathParser$result = new java_cup.runtime.Symbol(7/*Step*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // AbbreviatedAbsoluteLocationPath ::= DSLASH RelativeLocationPath 
            {
              Expression RESULT = null;
		int rlpleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int rlpright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression rlp = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 
           // transform rlp
           ((RelativeLocationPath) rlp).setAxis(Axis.DESCENDANT);
           RESULT = new AbsoluteLocationPath(rlp);
        
              CUP$XPathParser$result = new java_cup.runtime.Symbol(24/*AbbreviatedAbsoluteLocationPath*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // AbbreviatedRelativeLocationPath ::= RelativeLocationPath DSLASH Step 
            {
              Expression RESULT = null;
		int rlpleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int rlpright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression rlp = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression step = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 
	   Step nodeStep;
	   final Step temp = (Step) step;
	   if (temp.getAxis() == Axis.CHILD) {
	       // Expand 'rlp//child::E' into 'rlp/descendant::E'
	       nodeStep = new Step(Axis.DESCENDANT, 
				   temp.getNodeType(), 
				   temp.getPredicates());

               if (rlp instanceof Step && ((Step) rlp).isAbbreviatedDot()) {
                  RESULT = nodeStep;       // Remove './/' from the beginning
               }
	       else {
	          RESULT = new ParentLocationPath((RelativeLocationPath) rlp,
                                                  nodeStep);
               }
	   }
	   else {
	       // Expand 'rlp//step' into 'rlp/descendant-or-self::node()/step'
	       nodeStep = new Step(Axis.DESCENDANTORSELF, 
					NodeTest.ANODE, null); 
	       RESULT = new ParentLocationPath(
			    new ParentLocationPath((RelativeLocationPath) rlp, 
						   nodeStep), step);
	   }
        
              CUP$XPathParser$result = new java_cup.runtime.Symbol(22/*AbbreviatedRelativeLocationPath*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // AbsoluteLocationPath ::= AbbreviatedAbsoluteLocationPath 
            {
              Expression RESULT = null;
		int aalpleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int aalpright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression aalp = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = aalp; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(23/*AbsoluteLocationPath*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // AbsoluteLocationPath ::= SLASH RelativeLocationPath 
            {
              Expression RESULT = null;
		int rlpleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int rlpright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression rlp = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new AbsoluteLocationPath(rlp); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(23/*AbsoluteLocationPath*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AbsoluteLocationPath ::= SLASH 
            {
              Expression RESULT = null;
		 RESULT = new AbsoluteLocationPath(); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(23/*AbsoluteLocationPath*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RelativeLocationPath ::= AbbreviatedRelativeLocationPath 
            {
              Expression RESULT = null;
		int arlpleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int arlpright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression arlp = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = arlp; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(21/*RelativeLocationPath*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RelativeLocationPath ::= RelativeLocationPath SLASH Step 
            {
              Expression RESULT = null;
		int rlpleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int rlpright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression rlp = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression step = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		     
        if (rlp instanceof Step && ((Step) rlp).isAbbreviatedDot()) {
              RESULT = step;       // Remove './' from the middle
        }
        else if (((Step) step).isAbbreviatedDot()) {
              RESULT = rlp;        // Remove '/.' from the end
        }
        else {
             RESULT =
                new ParentLocationPath((RelativeLocationPath) rlp, step); 
           }
        
              CUP$XPathParser$result = new java_cup.runtime.Symbol(21/*RelativeLocationPath*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RelativeLocationPath ::= Step 
            {
              Expression RESULT = null;
		int stepleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression step = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = step; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(21/*RelativeLocationPath*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LocationPath ::= AbsoluteLocationPath 
            {
              Expression RESULT = null;
		int alpleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int alpright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression alp = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = alp; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(4/*LocationPath*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LocationPath ::= RelativeLocationPath 
            {
              Expression RESULT = null;
		int rlpleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int rlpright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression rlp = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = rlp; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(4/*LocationPath*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PathExpr ::= FilterExpr DSLASH RelativeLocationPath 
            {
              Expression RESULT = null;
		int fexpleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int fexpright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression fexp = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int rlpleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int rlpright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression rlp = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		
           // Expand '//' into '/descendant-or-self::node()/'
           Step nodeStep = new Step(Axis.DESCENDANTORSELF, 
	                            NodeTest.ANODE, null); 
           RESULT = new FilterParentPath(
	                new FilterParentPath(fexp, nodeStep), rlp);
        
              CUP$XPathParser$result = new java_cup.runtime.Symbol(19/*PathExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PathExpr ::= FilterExpr SLASH RelativeLocationPath 
            {
              Expression RESULT = null;
		int fexpleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int fexpright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression fexp = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int rlpleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int rlpright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression rlp = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new FilterParentPath(fexp, rlp); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(19/*PathExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PathExpr ::= FilterExpr 
            {
              Expression RESULT = null;
		int fexpleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int fexpright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression fexp = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = fexp; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(19/*PathExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PathExpr ::= LocationPath 
            {
              Expression RESULT = null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression lp = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = lp; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(19/*PathExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // UnionExpr ::= PathExpr VBAR UnionExpr 
            {
              Expression RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression pe = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int restleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int restright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression rest = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new UnionPathExpr(pe, rest); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(18/*UnionExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // UnionExpr ::= PathExpr 
            {
              Expression RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression pe = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = pe; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(18/*UnionExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // UnaryExpr ::= MINUS UnaryExpr 
            {
              Expression RESULT = null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression ue = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new UnaryOpExpr(ue); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(14/*UnaryExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // UnaryExpr ::= UnionExpr 
            {
              Expression RESULT = null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression ue = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = ue; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(14/*UnaryExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MultiplicativeExpr ::= MultiplicativeExpr MOD UnaryExpr 
            {
              Expression RESULT = null;
		int meleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression ue = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new BinOpExpr(BinOpExpr.MOD, me, ue); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(13/*MultiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MultiplicativeExpr ::= MultiplicativeExpr DIV UnaryExpr 
            {
              Expression RESULT = null;
		int meleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression ue = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new BinOpExpr(BinOpExpr.DIV, me, ue); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(13/*MultiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // MultiplicativeExpr ::= MultiplicativeExpr STAR UnaryExpr 
            {
              Expression RESULT = null;
		int meleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression ue = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new BinOpExpr(BinOpExpr.TIMES, me, ue); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(13/*MultiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MultiplicativeExpr ::= UnaryExpr 
            {
              Expression RESULT = null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression ue = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = ue; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(13/*MultiplicativeExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AdditiveExpr ::= AdditiveExpr MINUS MultiplicativeExpr 
            {
              Expression RESULT = null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new BinOpExpr(BinOpExpr.MINUS, ae, me); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(12/*AdditiveExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AdditiveExpr ::= AdditiveExpr PLUS MultiplicativeExpr 
            {
              Expression RESULT = null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new BinOpExpr(BinOpExpr.PLUS, ae, me); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(12/*AdditiveExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AdditiveExpr ::= MultiplicativeExpr 
            {
              Expression RESULT = null;
		int meleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = me; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(12/*AdditiveExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RelationalExpr ::= RelationalExpr GE AdditiveExpr 
            {
              Expression RESULT = null;
		int releft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new RelationalExpr(Operators.GE, re, ae); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(11/*RelationalExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RelationalExpr ::= RelationalExpr LE AdditiveExpr 
            {
              Expression RESULT = null;
		int releft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new RelationalExpr(Operators.LE, re, ae); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(11/*RelationalExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RelationalExpr ::= RelationalExpr GT AdditiveExpr 
            {
              Expression RESULT = null;
		int releft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new RelationalExpr(Operators.GT, re, ae); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(11/*RelationalExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RelationalExpr ::= RelationalExpr LT AdditiveExpr 
            {
              Expression RESULT = null;
		int releft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new RelationalExpr(Operators.LT, re, ae); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(11/*RelationalExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RelationalExpr ::= AdditiveExpr 
            {
              Expression RESULT = null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = ae; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(11/*RelationalExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EqualityExpr ::= EqualityExpr NE RelationalExpr 
            {
              Expression RESULT = null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression ee = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new EqualityExpr(Operators.NE, ee, re); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(10/*EqualityExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EqualityExpr ::= EqualityExpr EQ RelationalExpr 
            {
              Expression RESULT = null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression ee = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new EqualityExpr(Operators.EQ, ee, re); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(10/*EqualityExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EqualityExpr ::= RelationalExpr 
            {
              Expression RESULT = null;
		int releft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = re; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(10/*EqualityExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AndExpr ::= AndExpr AND EqualityExpr 
            {
              Expression RESULT = null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression ee = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new LogicalExpr(LogicalExpr.AND, ae, ee); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(9/*AndExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AndExpr ::= EqualityExpr 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = e; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(9/*AndExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OrExpr ::= OrExpr OR AndExpr 
            {
              Expression RESULT = null;
		int oeleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Expression oe = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new LogicalExpr(LogicalExpr.OR, oe, ae); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(8/*OrExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OrExpr ::= AndExpr 
            {
              Expression RESULT = null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = ae; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(8/*OrExpr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expr ::= OrExpr 
            {
              Expression RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = ex; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(2/*Expr*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Predicate ::= LBRACK Expr RBRACK 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).value;
		
		RESULT = new Predicate(e);
	    
              CUP$XPathParser$result = new java_cup.runtime.Symbol(5/*Predicate*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Predicates ::= Predicate Predicates 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Vector pp = (Vector)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 pp.insertElementAt(p, 0); RESULT = pp; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(34/*Predicates*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Predicates ::= Predicate 
            {
              Vector RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression p = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 
		Vector temp = new Vector();
		temp.addElement(p);
		RESULT = temp;     
            
              CUP$XPathParser$result = new java_cup.runtime.Symbol(34/*Predicates*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ChildOrAttributeAxisSpecifier ::= ATTRIBUTE DCOLON 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Axis.ATTRIBUTE); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(40/*ChildOrAttributeAxisSpecifier*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ChildOrAttributeAxisSpecifier ::= CHILD DCOLON 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Axis.CHILD); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(40/*ChildOrAttributeAxisSpecifier*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ChildOrAttributeAxisSpecifier ::= ATSIGN 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Axis.ATTRIBUTE); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(40/*ChildOrAttributeAxisSpecifier*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NameTestPattern ::= QName 
            {
              Object RESULT = null;
		int qnleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int qnright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		QName qn = (QName)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = qn; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(33/*NameTestPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NameTestPattern ::= STAR 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(33/*NameTestPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NodeTestPattern ::= PI 
            {
              Object RESULT = null;
		 RESULT = new Integer(NodeTest.PI); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(32/*NodeTestPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NodeTestPattern ::= COMMENT 
            {
              Object RESULT = null;
		 RESULT = new Integer(NodeTest.COMMENT); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(32/*NodeTestPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NodeTestPattern ::= TEXT 
            {
              Object RESULT = null;
		 RESULT = new Integer(NodeTest.TEXT); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(32/*NodeTestPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NodeTestPattern ::= NODE 
            {
              Object RESULT = null;
		 RESULT = new Integer(NodeTest.ANODE); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(32/*NodeTestPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NodeTestPattern ::= NameTestPattern 
            {
              Object RESULT = null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Object nt = (Object)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = nt; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(32/*NodeTestPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // StepPattern ::= ChildOrAttributeAxisSpecifier NodeTestPattern Predicates 
            {
              StepPattern RESULT = null;
		int axisleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int axisright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Integer axis = (Integer)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int ntleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).right;
		Object nt = (Object)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Vector pp = (Vector)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new StepPattern(axis.intValue(),
                                        parser.findNodeType(axis.intValue(),
                                                            nt),
                                        pp);
            
              CUP$XPathParser$result = new java_cup.runtime.Symbol(31/*StepPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // StepPattern ::= ChildOrAttributeAxisSpecifier NodeTestPattern 
            {
              StepPattern RESULT = null;
		int axisleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left;
		int axisright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).right;
		Integer axis = (Integer)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).value;
		int ntleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Object nt = (Object)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT=new StepPattern(axis.intValue(),
                                      parser.findNodeType(axis.intValue(), nt),
                                      null);
            
              CUP$XPathParser$result = new java_cup.runtime.Symbol(31/*StepPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // StepPattern ::= NodeTestPattern Predicates 
            {
              StepPattern RESULT = null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).right;
		Object nt = (Object)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Vector pp = (Vector)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new StepPattern(Axis.CHILD,
                                        parser.findNodeType(Axis.CHILD, nt),
                                        pp);
            
              CUP$XPathParser$result = new java_cup.runtime.Symbol(31/*StepPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // StepPattern ::= NodeTestPattern 
            {
              StepPattern RESULT = null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Object nt = (Object)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new StepPattern(Axis.CHILD,
                                        parser.findNodeType(Axis.CHILD, nt),
                                        null);
            
              CUP$XPathParser$result = new java_cup.runtime.Symbol(31/*StepPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RelativePathPattern ::= StepPattern DSLASH RelativePathPattern 
            {
              RelativePathPattern RESULT = null;
		int spleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		StepPattern sp = (StepPattern)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int rppleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int rppright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		RelativePathPattern rpp = (RelativePathPattern)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new AncestorPattern(sp, rpp); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(30/*RelativePathPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RelativePathPattern ::= StepPattern SLASH RelativePathPattern 
            {
              RelativePathPattern RESULT = null;
		int spleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		StepPattern sp = (StepPattern)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int rppleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int rppright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		RelativePathPattern rpp = (RelativePathPattern)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new ParentPattern(sp, rpp); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(30/*RelativePathPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // RelativePathPattern ::= StepPattern 
            {
              RelativePathPattern RESULT = null;
		int spleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		StepPattern sp = (StepPattern)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = sp; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(30/*RelativePathPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdKeyPattern ::= KEY LPAREN Literal COMMA Literal RPAREN 
            {
              IdKeyPattern RESULT = null;
		int l1left = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-3)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-3)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-3)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).right;
		String l2 = (String)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).value;
		 RESULT = new KeyPattern(l1, l2); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(27/*IdKeyPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IdKeyPattern ::= ID LPAREN Literal RPAREN 
            {
              IdKeyPattern RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).value;
		 RESULT = new IdPattern(l); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(27/*IdKeyPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LocationPathPattern ::= RelativePathPattern 
            {
              Pattern RESULT = null;
		int rppleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int rppright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		RelativePathPattern rpp = (RelativePathPattern)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = rpp; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(29/*LocationPathPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LocationPathPattern ::= DSLASH RelativePathPattern 
            {
              Pattern RESULT = null;
		int rppleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int rppright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		RelativePathPattern rpp = (RelativePathPattern)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new AncestorPattern(rpp); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(29/*LocationPathPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LocationPathPattern ::= IdKeyPattern DSLASH RelativePathPattern 
            {
              Pattern RESULT = null;
		int ikpleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int ikpright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		IdKeyPattern ikp = (IdKeyPattern)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int rppleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int rppright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		RelativePathPattern rpp = (RelativePathPattern)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new AncestorPattern(ikp, rpp); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(29/*LocationPathPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LocationPathPattern ::= IdKeyPattern SLASH RelativePathPattern 
            {
              Pattern RESULT = null;
		int ikpleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int ikpright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		IdKeyPattern ikp = (IdKeyPattern)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int rppleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int rppright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		RelativePathPattern rpp = (RelativePathPattern)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new ParentPattern(ikp, rpp); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(29/*LocationPathPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LocationPathPattern ::= IdKeyPattern 
            {
              Pattern RESULT = null;
		int ikpleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int ikpright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		IdKeyPattern ikp = (IdKeyPattern)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = ikp; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(29/*LocationPathPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LocationPathPattern ::= SLASH RelativePathPattern 
            {
              Pattern RESULT = null;
		int rppleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int rppright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		RelativePathPattern rpp = (RelativePathPattern)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new AbsolutePathPattern(rpp); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(29/*LocationPathPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LocationPathPattern ::= SLASH 
            {
              Pattern RESULT = null;
		 RESULT = new AbsolutePathPattern(null); 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(29/*LocationPathPattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Pattern ::= LocationPathPattern VBAR Pattern 
            {
              Pattern RESULT = null;
		int lppleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left;
		int lppright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).right;
		Pattern lpp = (Pattern)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Pattern p = (Pattern)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = new AlternativePattern(lpp, p);  
              CUP$XPathParser$result = new java_cup.runtime.Symbol(28/*Pattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Pattern ::= LocationPathPattern 
            {
              Pattern RESULT = null;
		int lppleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int lppright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Pattern lpp = (Pattern)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = lpp; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(28/*Pattern*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TopLevel ::= EXPRESSION Expr 
            {
              SyntaxTreeNode RESULT = null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Expression expr = (Expression)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = expr; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(1/*TopLevel*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TopLevel ::= PATTERN Pattern 
            {
              SyntaxTreeNode RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right;
		Pattern pattern = (Pattern)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).value;
		 RESULT = pattern; 
              CUP$XPathParser$result = new java_cup.runtime.Symbol(1/*TopLevel*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          return CUP$XPathParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= TopLevel EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).right;
		SyntaxTreeNode start_val = (SyntaxTreeNode)((java_cup.runtime.Symbol) CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).value;
		RESULT = start_val;
              CUP$XPathParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$XPathParser$stack.elementAt(CUP$XPathParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$XPathParser$parser.done_parsing();
          return CUP$XPathParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

