/* Generated By:JJTree&JavaCC: Do not edit this line. XPathTokenManager.java */
package org.apache.xpath.impl.parser;
import java.io.*;
import java.util.Stack;

public class XPathTokenManager implements XPathConstants
{
  private Stack stateStack = new Stack();
  static final int PARENMARKER = 2000;

  /**
   * Push the current state onto the state stack.
   */
  private void pushState()
  {
    stateStack.addElement(new Integer(curLexState));
  }

  /**
   * Push the given state onto the state stack.
   * @param state Must be a valid state.
   */
  private void pushState(int state)
  {
    stateStack.push(new Integer(state));
  }

  /**
   * Pop the state on the state stack, and switch to that state.
   */
  private void popState()
  {
    if (stateStack.size() == 0)
    {
      printLinePos();
    }

    int nextState = ((Integer) stateStack.pop()).intValue();
    if(nextState == PARENMARKER)
      printLinePos();
    SwitchTo(nextState);
  }

  /**
   * Push a parenthesis state.  This pushes, in addition to the 
   * lexical state value, a special marker that lets 
   * resetParenStateOrSwitch(int state)
   * know if it should pop and switch.  Used for the comma operator.
   */
  private void pushParenState(int commaState, int rparState)
  {
    stateStack.push(new Integer(rparState));
    stateStack.push(new Integer(commaState));
    stateStack.push(new Integer(PARENMARKER));
    SwitchTo(commaState);
  }


//  /**
//   * Push a parenthesis state.  This pushes, in addition to the 
//   * lexical state value, a special marker that lets 
//   * resetParenStateOrSwitch(int state)
//   * know if it should pop and switch.  Used for the comma operator.
//   */
//  private void pushParenState()
//  {
//    stateStack.push(new Integer(curLexState));
//    stateStack.push(new Integer(PARENMARKER));
//  }

  /**
   * If a PARENMARKER is on the stack, switch the state to 
   * the state underneath the marker.  Leave the stack in 
   * the same state.  If the stack is zero, do nothing.
   * @param state The state to switch to if the PARENMARKER is not found.
   */
  private void resetParenStateOrSwitch(int state)
  {
    if (stateStack.size() == 0)
    {
      SwitchTo(state);
      return;
    }

    int nextState = ((Integer) stateStack.peek()).intValue();
    if (PARENMARKER == nextState)
    {
      // Wait for right paren to do the pop!
      Integer intObj = (Integer) stateStack.elementAt(stateStack.size() - 2);
      nextState = intObj.intValue();
      SwitchTo(nextState);
    }
    else
      SwitchTo(state);
  }

//   /**
//    * Pop the lexical state stack two elements.
//    */
// private void popParenState()
//   {
//     if (stateStack.size() == 0)
//       return;
// 
//     int nextState = ((Integer) stateStack.peek()).intValue();
//     if (PARENMARKER == nextState)
//     {
//       stateStack.pop();
//       stateStack.pop();
//     }
//   }

  /**
   * Pop the lexical state stack two elements.
   */
  private void popParenState()
  {
    if (stateStack.size() == 0)
      return;

    int nextState = ((Integer) stateStack.peek()).intValue();
    if (PARENMARKER == nextState)
    {
      stateStack.pop();
      stateStack.pop();
      int rparState = ((Integer) stateStack.peek()).intValue();
      SwitchTo(rparState);
      stateStack.pop();
    }
  }

  /**
   * Print the current line position.
   */
  public void printLinePos()
  {
    System.err.println("Line: " + input_stream.getEndLine());
  }
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjMoveStringLiteralDfa0_9()
{
   return jjMoveNfa_9(0, 0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_9(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 10;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0, long active1)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_6(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_6(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 41:
         return jjStopAtPos(0, 92);
      default :
         return jjMoveNfa_6(6, 0);
   }
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0xffffffffffffc000L, 0xfffff0007fffffffL, 0x7fffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec4 = {
   0x7ff3ffffffffffffL, 0x7ffffffffffffdfeL, 0xffffffffffffffffL, 0xfc31ffffffffe00fL
};
static final long[] jjbitVec5 = {
   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x3L
};
static final long[] jjbitVec6 = {
   0x0L, 0x0L, 0xfffffffbffffd740L, 0xffffd547f7fffL
};
static final long[] jjbitVec7 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff0003L, 0x33fcfffffff199fL
};
static final long[] jjbitVec8 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0x7fL, 0x707ffffff0000L
};
static final long[] jjbitVec9 = {
   0x7fffffe00000000L, 0xfffe0000000007feL, 0x7cffffffffffffffL, 0x60002f7fffL
};
static final long[] jjbitVec10 = {
   0x23ffffffffffffe0L, 0x3ff000000L, 0x3c5fdfffff99fe0L, 0x30003b0000000L
};
static final long[] jjbitVec11 = {
   0x36dfdfffff987e0L, 0x1c00005e000000L, 0x23edfdfffffbafe0L, 0x100000000L
};
static final long[] jjbitVec12 = {
   0x23cdfdfffff99fe0L, 0x3b0000000L, 0x3bfc718d63dc7e0L, 0x0L
};
static final long[] jjbitVec13 = {
   0x3effdfffffddfe0L, 0x300000000L, 0x3effdfffffddfe0L, 0x340000000L
};
static final long[] jjbitVec14 = {
   0x3fffdfffffddfe0L, 0x300000000L, 0x0L, 0x0L
};
static final long[] jjbitVec15 = {
   0xd7ffffffffffeL, 0x3fL, 0x200d6caefef02596L, 0x1fL
};
static final long[] jjbitVec16 = {
   0x0L, 0x3fffffffeffL, 0x0L, 0x0L
};
static final long[] jjbitVec17 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0x7fffffffff003fL
};
static final long[] jjbitVec18 = {
   0x500000000007daedL, 0x2c62ab82315001L, 0xf580c90040000000L, 0x201080000000007L
};
static final long[] jjbitVec19 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffff0fffffffL, 0x3ffffffffffffffL
};
static final long[] jjbitVec20 = {
   0xffffffff3f3fffffL, 0x3fffffffaaff3f3fL, 0x5fdfffffffffffffL, 0x1fdc1fff0fcf1fdcL
};
static final long[] jjbitVec21 = {
   0x4c4000000000L, 0x0L, 0x7L, 0x0L
};
static final long[] jjbitVec22 = {
   0x3fe00000080L, 0xfffffffffffffffeL, 0xfffffffe001fffffL, 0x7ffffffffffffffL
};
static final long[] jjbitVec23 = {
   0x1fffffffffe0L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec24 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffL, 0x0L
};
static final long[] jjbitVec25 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static final long[] jjbitVec26 = {
   0x0L, 0x0L, 0x80000000000000L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec27 = {
   0xffffffL, 0xffffffffffff0000L, 0xf80001ffffffffffL, 0x30003L
};
static final long[] jjbitVec28 = {
   0xffffffffffffffffL, 0x30000003fL, 0xfffffffbffffd7c0L, 0xffffd547f7fffL
};
static final long[] jjbitVec29 = {
   0xffffffffffffdffeL, 0xffffffffdffeffffL, 0xffffffffffff007bL, 0x33fcfffffff199fL
};
static final long[] jjbitVec30 = {
   0xfffe000000000000L, 0xfffffffe027fffffL, 0xbbfffffbfffe007fL, 0x707ffffff0016L
};
static final long[] jjbitVec31 = {
   0x7fffffe00000000L, 0xffff03ff0007ffffL, 0x7cffffffffffffffL, 0x3ff3dffffef7fffL
};
static final long[] jjbitVec32 = {
   0xf3ffffffffffffeeL, 0xffcfff1e3fffL, 0xd3c5fdfffff99feeL, 0x3ffcfb080399fL
};
static final long[] jjbitVec33 = {
   0xd36dfdfffff987e4L, 0x1fffc05e003987L, 0xf3edfdfffffbafeeL, 0xffc100003bbfL
};
static final long[] jjbitVec34 = {
   0xf3cdfdfffff99feeL, 0xffc3b0c0398fL, 0xc3bfc718d63dc7ecL, 0xff8000803dc7L
};
static final long[] jjbitVec35 = {
   0xc3effdfffffddfeeL, 0xffc300603ddfL, 0xc3effdfffffddfecL, 0xffc340603ddfL
};
static final long[] jjbitVec36 = {
   0xc3fffdfffffddfecL, 0xffc300803dcfL, 0x0L, 0x0L
};
static final long[] jjbitVec37 = {
   0x7ff7ffffffffffeL, 0x3ff7fffL, 0x3bff6caefef02596L, 0x3ff3f5fL
};
static final long[] jjbitVec38 = {
   0xc2a003ff03000000L, 0xfffe03fffffffeffL, 0x2fe3ffffebf0fdfL, 0x0L
};
static final long[] jjbitVec39 = {
   0x0L, 0x0L, 0x0L, 0x21fff0000L
};
static final long[] jjbitVec40 = {
   0x3efffe000000a0L, 0xfffffffffffffffeL, 0xfffffffe661fffffL, 0x77ffffffffffffffL
};
private final int jjMoveNfa_6(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 8;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(4, 5);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 0:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar != 34)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar != 39)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(7);
                  break;
               case 1:
                  jjAddStates(0, 1);
                  break;
               case 4:
                  jjAddStates(2, 3);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(7);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 1);
                  break;
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(2, 3);
                  break;
               case 7:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 128)
                     kind = 128;
                  jjCheckNAdd(7);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_8()
{
   return jjMoveNfa_8(0, 0);
}
private final int jjMoveNfa_8(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 10;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 36:
         return jjStopAtPos(0, 120);
      case 40:
         return jjMoveStringLiteralDfa1_2(0x4L);
      default :
         return jjMoveNfa_2(8, 0);
   }
}
private final int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, active0, 0L);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 102;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 8:
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(4, 5);
                  break;
               case 3:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 41 && kind > 49)
                     kind = 49;
                  break;
               case 10:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(6, 7);
                  break;
               case 11:
                  if (curChar == 40 && kind > 100)
                     kind = 100;
                  break;
               case 15:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 25:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 26:
                  if (curChar == 40 && kind > 107)
                     kind = 107;
                  break;
               case 36:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(10, 11);
                  break;
               case 37:
                  if (curChar == 40 && kind > 108)
                     kind = 108;
                  break;
               case 48:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 60:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(12, 13);
                  break;
               case 61:
                  if (curChar == 40 && kind > 109)
                     kind = 109;
                  break;
               case 66:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(14, 15);
                  break;
               case 67:
                  if (curChar == 40 && kind > 110)
                     kind = 110;
                  break;
               case 75:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(16, 17);
                  break;
               case 76:
                  if (curChar == 40 && kind > 111)
                     kind = 111;
                  break;
               case 81:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(18, 19);
                  break;
               case 82:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 84:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 87:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(20, 21);
                  break;
               case 88:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(89, 90);
                  break;
               case 89:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(89, 90);
                  break;
               case 90:
                  if (curChar == 41 && kind > 52)
                     kind = 52;
                  break;
               case 95:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(22, 23);
                  break;
               case 96:
                  if (curChar == 40 && kind > 105)
                     kind = 105;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 122)
                        kind = 122;
                     jjCheckNAddStates(24, 26);
                  }
                  if (curChar == 101)
                     jjAddStates(27, 28);
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 78;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 72;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 63;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 57;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 1:
                  if (curChar == 109)
                     jjAddStates(4, 5);
                  break;
               case 6:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 7:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if (curChar == 101)
                     jjAddStates(6, 7);
                  break;
               case 12:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 101)
                     jjAddStates(8, 9);
                  break;
               case 27:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 28:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 110)
                     jjAddStates(10, 11);
                  break;
               case 38:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 39:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 49:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 116)
                     jjAddStates(12, 13);
                  break;
               case 62:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 63:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 116)
                     jjAddStates(14, 15);
                  break;
               case 68:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 69:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 101)
                     jjAddStates(16, 17);
                  break;
               case 77:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 78:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAddStates(24, 26);
                  break;
               case 81:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 83:
               case 84:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(84);
                  break;
               case 85:
                  if (curChar == 101)
                     jjAddStates(27, 28);
                  break;
               case 86:
                  if (curChar == 121)
                     jjAddStates(20, 21);
                  break;
               case 91:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 92:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 116)
                     jjAddStates(22, 23);
                  break;
               case 97:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 98:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 101:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAddStates(24, 26);
                  break;
               case 81:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 83:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(84);
                  break;
               case 84:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 122)
                     kind = 122;
                  jjCheckNAdd(84);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 102 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa1_3(0x4L);
      default :
         return jjMoveNfa_3(1, 0);
   }
}
private final int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0);
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 6;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 10;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(4, 5);
                  break;
               case 3:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddStates(29, 31);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAdd(5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddStates(29, 31);
                  break;
               case 2:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAdd(5);
                  break;
               case 5:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAdd(5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x14L) != 0L)
         {
            jjmatchedKind = 3;
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa1_4(0x4L);
      case 58:
         return jjMoveStringLiteralDfa1_4(0x10L);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      case 58:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_4(0, active0);
}
static final long[] jjbitVec41 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x7fffffffffffffffL
};
static final long[] jjbitVec42 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3fffffffffffffffL
};
private final int jjMoveNfa_4(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffff00002600L & l) != 0L)
                     kind = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 3)
                     kind = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x18000000000000L) != 0L)
            return 311;
         if ((active0 & 0x80000000000000L) != 0L)
            return 8;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 36:
         return jjStopAtPos(0, 120);
      case 40:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x4L, 0x0L);
      case 41:
         return jjStopAtPos(0, 91);
      case 42:
         return jjStartNfaWithStates_0(0, 55, 8);
      case 43:
         return jjStopAtPos(0, 82);
      case 44:
         return jjStopAtPos(0, 113);
      case 45:
         return jjStopAtPos(0, 81);
      case 46:
         jjmatchedKind = 115;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000000L);
      case 47:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 64:
         return jjStopAtPos(0, 88);
      case 91:
         return jjStopAtPos(0, 89);
      case 93:
         return jjStopAtPos(0, 90);
      default :
         return jjMoveNfa_0(7, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         break;
      case 47:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 58:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static final long[] jjbitVec43 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 311;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddStates(32, 37);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAdd(6);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(34, 35);
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(4, 5);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 311:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(35, 30);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAdd(34);
                  }
                  break;
               case 0:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar != 34)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar != 39)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(6);
                  break;
               case 8:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 13:
                  if (curChar == 40 && kind > 103)
                     kind = 103;
                  break;
               case 18:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 19:
                  if (curChar == 40 && kind > 126)
                     kind = 126;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(32, 37);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if (curChar != 46)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 44);
                  break;
               case 28:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 31:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(35, 30);
                  break;
               case 38:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(45, 46);
                  break;
               case 39:
                  if (curChar == 58 && kind > 13)
                     kind = 13;
                  break;
               case 40:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 45:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(47, 48);
                  break;
               case 46:
                  if (curChar == 40 && kind > 102)
                     kind = 102;
                  break;
               case 54:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(49, 50);
                  break;
               case 55:
                  if (curChar == 58 && kind > 14)
                     kind = 14;
                  break;
               case 56:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 66:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 67:
                  if (curChar == 58 && kind > 18)
                     kind = 18;
                  break;
               case 68:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 72:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 75:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 86:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 87:
                  if (curChar == 40 && kind > 99)
                     kind = 99;
                  break;
               case 91:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 101:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 102:
                  if (curChar == 58 && kind > 15)
                     kind = 15;
                  break;
               case 103:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 109:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               case 110:
                  if (curChar == 58 && kind > 21)
                     kind = 21;
                  break;
               case 111:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 118:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 128:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               case 129:
                  if (curChar == 58 && kind > 23)
                     kind = 23;
                  break;
               case 130:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 139:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 140:
                  if (curChar == 40 && kind > 104)
                     kind = 104;
                  break;
               case 151:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 163:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(63, 64);
                  break;
               case 164:
                  if (curChar == 58 && kind > 16)
                     kind = 16;
                  break;
               case 165:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 174:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(65, 66);
                  break;
               case 175:
                  if (curChar == 58 && kind > 19)
                     kind = 19;
                  break;
               case 176:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 184:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(67, 68);
                  break;
               case 185:
                  if (curChar == 58 && kind > 25)
                     kind = 25;
                  break;
               case 186:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 190:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 193:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 202:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(69, 70);
                  break;
               case 203:
                  if (curChar == 40 && kind > 51)
                     kind = 51;
                  break;
               case 213:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(71, 72);
                  break;
               case 214:
                  if (curChar == 58 && kind > 17)
                     kind = 17;
                  break;
               case 215:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 219:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(73, 74);
                  break;
               case 220:
                  if (curChar == 36 && kind > 93)
                     kind = 93;
                  break;
               case 225:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(75, 76);
                  break;
               case 226:
                  if (curChar == 58 && kind > 20)
                     kind = 20;
                  break;
               case 227:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 234:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 244:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(77, 78);
                  break;
               case 245:
                  if (curChar == 58 && kind > 22)
                     kind = 22;
                  break;
               case 246:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 245;
                  break;
               case 255:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(79, 80);
                  break;
               case 256:
                  if (curChar == 36 && kind > 95)
                     kind = 95;
                  break;
               case 260:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(81, 82);
                  break;
               case 261:
                  if (curChar == 58 && kind > 24)
                     kind = 24;
                  break;
               case 262:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 271:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(83, 84);
                  break;
               case 272:
                  if (curChar == 40 && kind > 101)
                     kind = 101;
                  break;
               case 277:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(85, 86);
                  break;
               case 278:
                  if (curChar == 40 && kind > 50)
                     kind = 50;
                  break;
               case 285:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(87, 88);
                  break;
               case 286:
                  if (curChar == 36 && kind > 94)
                     kind = 94;
                  break;
               case 291:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(89, 90);
                  break;
               case 292:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 293;
                  break;
               case 293:
                  if (curChar == 42 && kind > 57)
                     kind = 57;
                  break;
               case 294:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(91, 92);
                  break;
               case 295:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 296;
                  break;
               case 297:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjstateSet[jjnewStateCnt++] = 297;
                  break;
               case 298:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(93, 94);
                  break;
               case 299:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 300;
                  break;
               case 301:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddStates(95, 97);
                  break;
               case 302:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(302, 303);
                  break;
               case 303:
                  if (curChar == 40 && kind > 127)
                     kind = 127;
                  break;
               case 306:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(98, 99);
                  break;
               case 307:
                  if (curChar == 40 && kind > 112)
                     kind = 112;
                  break;
               case 309:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(100, 101);
                  break;
               case 310:
                  if (curChar == 40 && kind > 125)
                     kind = 125;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAddStates(102, 111);
                  }
                  if (curChar == 105)
                     jjAddStates(112, 113);
                  else if (curChar == 101)
                     jjAddStates(114, 115);
                  else if (curChar == 110)
                     jjAddStates(116, 117);
                  else if (curChar == 102)
                     jjAddStates(118, 120);
                  else if (curChar == 115)
                     jjAddStates(121, 122);
                  else if (curChar == 97)
                     jjAddStates(123, 126);
                  else if (curChar == 112)
                     jjAddStates(127, 130);
                  else if (curChar == 100)
                     jjAddStates(131, 133);
                  else if (curChar == 99)
                     jjAddStates(134, 135);
                  else if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 1:
                  jjAddStates(0, 1);
                  break;
               case 4:
                  jjAddStates(2, 3);
                  break;
               case 9:
               case 10:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if (curChar == 116)
                     jjAddStates(38, 39);
                  break;
               case 14:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 15:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 121)
                     jjAddStates(40, 41);
                  break;
               case 20:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 21:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(136, 137);
                  break;
               case 36:
                  if (curChar == 99)
                     jjAddStates(134, 135);
                  break;
               case 37:
                  if (curChar == 100)
                     jjAddStates(45, 46);
                  break;
               case 41:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 42:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 116)
                     jjAddStates(47, 48);
                  break;
               case 47:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 48:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 100)
                     jjAddStates(131, 133);
                  break;
               case 53:
                  if (curChar == 116)
                     jjAddStates(49, 50);
                  break;
               case 57:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 58:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 102)
                     jjAddStates(51, 52);
                  break;
               case 69:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 70:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 73:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 76:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 101)
                     jjAddStates(53, 54);
                  break;
               case 88:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 89:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 92:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 112)
                     jjAddStates(127, 130);
                  break;
               case 100:
                  if (curChar == 116)
                     jjAddStates(55, 56);
                  break;
               case 104:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 105:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 103)
                     jjAddStates(57, 58);
                  break;
               case 112:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 113:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 116:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 119:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (curChar == 103)
                     jjAddStates(59, 60);
                  break;
               case 131:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 132:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 135:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
                  if (curChar == 110)
                     jjAddStates(61, 62);
                  break;
               case 141:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 142:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 141;
                  break;
               case 143:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 147:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 150:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 152:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 155:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 159:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 97)
                     jjAddStates(123, 126);
                  break;
               case 162:
                  if (curChar == 101)
                     jjAddStates(63, 64);
                  break;
               case 166:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 167:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 168:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 173:
                  if (curChar == 114)
                     jjAddStates(65, 66);
                  break;
               case 177:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 178:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if (curChar == 102)
                     jjAddStates(67, 68);
                  break;
               case 187:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 188:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 191:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 192:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 194:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 196:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 195;
                  break;
               case 197:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 198;
                  break;
               case 200:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if (curChar == 101)
                     jjAddStates(69, 70);
                  break;
               case 204:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 205:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 206:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 210:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 211:
                  if (curChar == 115)
                     jjAddStates(121, 122);
                  break;
               case 212:
                  if (curChar == 102)
                     jjAddStates(71, 72);
                  break;
               case 216:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 212;
                  break;
               case 217:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 218:
                  if (curChar == 101)
                     jjAddStates(73, 74);
                  break;
               case 221:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 222:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 223:
                  if (curChar == 102)
                     jjAddStates(118, 120);
                  break;
               case 224:
                  if (curChar == 103)
                     jjAddStates(75, 76);
                  break;
               case 228:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               case 229:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 230:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 231:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 230;
                  break;
               case 232:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 233:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 235:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 236:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 237:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 236;
                  break;
               case 238:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 239:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 240:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 241:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 242:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 243:
                  if (curChar == 103)
                     jjAddStates(77, 78);
                  break;
               case 247:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 248:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 249:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 250:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 251:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 252:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 253:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 252;
                  break;
               case 254:
                  if (curChar == 114)
                     jjAddStates(79, 80);
                  break;
               case 257:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 258:
                  if (curChar == 110)
                     jjAddStates(116, 117);
                  break;
               case 259:
                  if (curChar == 101)
                     jjAddStates(81, 82);
                  break;
               case 263:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 264:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 265:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 266:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 268:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 269:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 268;
                  break;
               case 270:
                  if (curChar == 101)
                     jjAddStates(83, 84);
                  break;
               case 273:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 274:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 273;
                  break;
               case 275:
                  if (curChar == 101)
                     jjAddStates(114, 115);
                  break;
               case 276:
                  if (curChar == 116)
                     jjAddStates(85, 86);
                  break;
               case 279:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 276;
                  break;
               case 280:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 279;
                  break;
               case 281:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 282:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 283:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 284:
                  if (curChar == 121)
                     jjAddStates(87, 88);
                  break;
               case 287:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 284;
                  break;
               case 288:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 287;
                  break;
               case 289:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 290:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddStates(102, 111);
                  break;
               case 291:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(291, 292);
                  break;
               case 294:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(294, 295);
                  break;
               case 296:
               case 297:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(297);
                  break;
               case 298:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(298, 299);
                  break;
               case 300:
               case 301:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(95, 97);
                  break;
               case 304:
                  if (curChar == 105)
                     jjAddStates(112, 113);
                  break;
               case 305:
                  if (curChar == 102)
                     jjAddStates(98, 99);
                  break;
               case 308:
                  if (curChar == 100)
                     jjAddStates(100, 101);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 7:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddStates(102, 111);
                  break;
               case 1:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 1);
                  break;
               case 4:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjAddStates(2, 3);
                  break;
               case 9:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(10);
                  break;
               case 10:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(10);
                  break;
               case 291:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(291, 292);
                  break;
               case 294:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(294, 295);
                  break;
               case 296:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(297);
                  break;
               case 297:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(297);
                  break;
               case 298:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(298, 299);
                  break;
               case 300:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(95, 97);
                  break;
               case 301:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(95, 97);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 311 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x100120000000L) != 0L || (active1 & 0x5L) != 0L)
         {
            jjmatchedKind = 124;
            return 16;
         }
         if ((active0 & 0x21005c000000L) != 0L || (active1 & 0x1f00L) != 0L)
         {
            jjmatchedKind = 124;
            return 87;
         }
         if ((active1 & 0x18000000000000L) != 0L)
            return 88;
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 124;
            return 26;
         }
         if ((active0 & 0xa0000000000L) != 0L)
         {
            jjmatchedKind = 124;
            return 46;
         }
         if ((active0 & 0x440000000000L) != 0L || (active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 124;
            return 33;
         }
         if ((active0 & 0x80000000L) != 0L)
            return 19;
         return -1;
      case 1:
         if ((active0 & 0x678078000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 124;
               jjmatchedPos = 1;
            }
            return 87;
         }
         if ((active0 & 0x80004000000L) != 0L || (active1 & 0x1f85L) != 0L)
            return 87;
         if ((active0 & 0x100100000000L) != 0L)
            return 15;
         return -1;
      case 2:
         if ((active0 & 0x778020000000L) != 0L || (active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 2;
            return 87;
         }
         if ((active0 & 0x58000000L) != 0L)
            return 87;
         return -1;
      case 3:
         if ((active0 & 0x718000000000L) != 0L || (active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 3;
            return 87;
         }
         if ((active0 & 0x60020000000L) != 0L)
            return 87;
         return -1;
      case 4:
         if ((active0 & 0x518000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 4;
            return 87;
         }
         if ((active0 & 0x200000000000L) != 0L || (active1 & 0x4L) != 0L)
            return 87;
         return -1;
      case 5:
         if ((active0 & 0x108000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 5;
            return 87;
         }
         if ((active0 & 0x410000000000L) != 0L)
            return 87;
         return -1;
      case 6:
         if ((active0 & 0x108000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 6;
            return 87;
         }
         return -1;
      case 7:
         if ((active0 & 0x108000000000L) != 0L)
         {
            jjmatchedKind = 124;
            jjmatchedPos = 7;
            return 87;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x2L);
      case 36:
         return jjStopAtPos(0, 120);
      case 40:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_1(0x4L, 0x0L);
      case 41:
         return jjStopAtPos(0, 91);
      case 42:
         return jjStartNfaWithStates_1(0, 31, 19);
      case 43:
         return jjStopAtPos(0, 80);
      case 44:
         return jjStopAtPos(0, 113);
      case 45:
         return jjStopAtPos(0, 79);
      case 46:
         jjmatchedKind = 115;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x10000000000000L);
      case 47:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_1(0x4000000000000000L, 0x0L);
      case 60:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x18L);
      case 61:
         return jjStopAtPos(0, 63);
      case 62:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x60L);
      case 91:
         return jjStopAtPos(0, 89);
      case 93:
         return jjStopAtPos(0, 90);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x8000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x10000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x440000000000L, 0x80L);
      case 103:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x600L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x100120000000L, 0x5L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1800L);
      case 109:
         return jjMoveStringLiteralDfa1_1(0x40000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa1_1(0x4000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x10000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x8000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0xa0000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_1(0x200000000000L, 0x0L);
      case 124:
         return jjStopAtPos(0, 86);
      default :
         return jjMoveNfa_1(17, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         break;
      case 47:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 58:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(1, 2);
         break;
      case 60:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         break;
      case 61:
         if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         break;
      case 62:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x8000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000000L, active1, 0L);
      case 101:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(1, 72, 87);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(1, 74, 87);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(1, 76, 87);
         return jjMoveStringLiteralDfa2_1(active0, 0x10000000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x10000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x300008000000L, active1, 0L);
      case 111:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 43, 87);
         return jjMoveStringLiteralDfa2_1(active0, 0x40000000L, active1, 0L);
      case 113:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_1(1, 71, 87);
         break;
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(1, 26, 87);
         break;
      case 115:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x4L);
      case 116:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(1, 73, 87);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(1, 75, 87);
         break;
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0x400000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(2, 27, 87);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(2, 30, 87);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x200020000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_1(active0, 0x118000000000L, active1, 0L);
      case 118:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(2, 28, 87);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 42, 87);
         return jjMoveStringLiteralDfa4_1(active0, 0x500000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_1(3, 41, 87);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_1(active0, 0x200000000000L, active1, 0x4L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x10000000000L, active1, 0L);
      case 118:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(3, 29, 87);
         break;
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 45, 87);
         break;
      case 112:
         return jjMoveStringLiteralDfa5_1(active0, 0x400000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x110000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_1(active0, 0x8000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_1(4, 66, 87);
         break;
      default :
         break;
   }
   return jjStartNfa_1(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa6_1(active0, 0x8000000000L);
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 40, 87);
         break;
      case 115:
         return jjMoveStringLiteralDfa6_1(active0, 0x100000000000L);
      case 116:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_1(5, 46, 87);
         break;
      default :
         break;
   }
   return jjStartNfa_1(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa7_1(active0, 0x100000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_1(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_1(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_1(active0, 0x100000000000L);
      case 101:
         return jjMoveStringLiteralDfa8_1(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_1(6, active0, 0L);
}
private final int jjMoveStringLiteralDfa8_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 39, 87);
         break;
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_1(8, 44, 87);
         break;
      default :
         break;
   }
   return jjStartNfa_1(7, active0, 0L);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 87;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 46:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(86);
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 82;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 87:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(86);
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 82;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 33:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(86);
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 82;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAddStates(138, 143);
                  }
                  else if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAdd(6);
                  }
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(60, 61);
                  else if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(4, 5);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 16:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(86);
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 82;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 15:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(86);
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 82;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 26:
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(86);
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 85;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 82;
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 56);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 6)
                        kind = 6;
                     jjCheckNAdd(60);
                  }
                  break;
               case 0:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar != 34)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar != 39)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(6);
                  break;
               case 8:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(144, 145);
                  break;
               case 18:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(146, 147);
                  break;
               case 24:
                  if (curChar == 36 && kind > 93)
                     kind = 93;
                  break;
               case 29:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(148, 149);
                  break;
               case 30:
                  if (curChar == 36 && kind > 94)
                     kind = 94;
                  break;
               case 36:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(10, 11);
                  break;
               case 37:
                  if (curChar == 36 && kind > 95)
                     kind = 95;
                  break;
               case 41:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(150, 151);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddStates(138, 143);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 51:
                  if (curChar != 46)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(52);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(152, 154);
                  break;
               case 54:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(55, 56);
                  break;
               case 57:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(58);
                  break;
               case 59:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAdd(60);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 56);
                  break;
               case 64:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(155, 156);
                  break;
               case 74:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(157, 158);
                  break;
               case 80:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 81:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 82:
                  if (curChar == 42 && kind > 57)
                     kind = 57;
                  break;
               case 83:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  break;
               case 84:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 86:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(86);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(86);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 87:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(86);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(86);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAddStates(159, 163);
                  }
                  if (curChar == 99)
                     jjAddStates(164, 165);
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 46;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 38;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 33;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(86);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(86);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(86);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 1:
                  jjAddStates(0, 1);
                  break;
               case 4:
                  jjAddStates(2, 3);
                  break;
               case 7:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 9:
                  if (curChar == 102 && kind > 47)
                     kind = 47;
                  break;
               case 10:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 12:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 20:
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if (curChar == 101)
                     jjAddStates(146, 147);
                  break;
               case 25:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 27:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 121)
                     jjAddStates(148, 149);
                  break;
               case 31:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 32:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 34:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 114)
                     jjAddStates(10, 11);
                  break;
               case 38:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 39:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 42:
                  if (curChar == 115 && kind > 97)
                     kind = 97;
                  break;
               case 43:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 45:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 47:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 56:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(166, 167);
                  break;
               case 62:
                  if (curChar == 99)
                     jjAddStates(164, 165);
                  break;
               case 63:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 65:
                  if (curChar == 115 && kind > 48)
                     kind = 48;
                  break;
               case 66:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 68:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 75:
                  if (curChar == 115 && kind > 96)
                     kind = 96;
                  break;
               case 76:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 78:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddStates(159, 163);
                  break;
               case 80:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 83:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  break;
               case 85:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(86);
                  break;
               case 86:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(86);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 46:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(80, 81);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(83, 84);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(86);
                  }
                  break;
               case 87:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(80, 81);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(83, 84);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(86);
                  }
                  break;
               case 33:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(80, 81);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(83, 84);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(86);
                  }
                  break;
               case 17:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAddStates(159, 163);
                  break;
               case 16:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(80, 81);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(83, 84);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(86);
                  }
                  break;
               case 15:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(80, 81);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(83, 84);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(86);
                  }
                  break;
               case 26:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(80, 81);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(83, 84);
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 124)
                        kind = 124;
                     jjCheckNAdd(86);
                  }
                  break;
               case 1:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 1);
                  break;
               case 4:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                     jjAddStates(2, 3);
                  break;
               case 20:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(21);
                  break;
               case 21:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(21);
                  break;
               case 80:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 83:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(83, 84);
                  break;
               case 85:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(86);
                  break;
               case 86:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 124)
                     kind = 124;
                  jjCheckNAdd(86);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 87 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_10()
{
   return jjMoveNfa_10(0, 0);
}
private final int jjMoveNfa_10(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 10;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_13(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_13(int pos, long active0, long active1)
{
   return jjMoveNfa_13(jjStopStringLiteralDfa_13(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_13(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_13(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_13()
{
   switch(curChar)
   {
      case 64:
         return jjStopAtPos(0, 88);
      default :
         return jjMoveNfa_13(1, 0);
   }
}
private final int jjMoveNfa_13(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(4, 5);
                  break;
               case 3:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 5:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddStates(168, 170);
                  break;
               case 6:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if (curChar == 47)
                     kind = 37;
                  break;
               case 8:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(171, 172);
                  break;
               case 9:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 11:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddStates(173, 180);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(168, 170);
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddStates(173, 180);
                  break;
               case 2:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(168, 170);
                  break;
               case 5:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(168, 170);
                  break;
               case 8:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               case 11:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_14()
{
   return jjMoveNfa_14(0, 0);
}
private final int jjMoveNfa_14(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 10;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 41:
         return jjStopAtPos(0, 92);
      case 42:
         return jjStopAtPos(0, 56);
      case 64:
         return jjStopAtPos(0, 88);
      default :
         return jjMoveNfa_5(15, 0);
   }
}
private final int jjMoveNfa_5(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 54;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 15:
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAdd(6);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(4, 5);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 0:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar != 34)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar != 39)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(6);
                  break;
               case 8:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(171, 172);
                  break;
               case 9:
                  if (curChar == 40 && kind > 106)
                     kind = 106;
                  break;
               case 18:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(40, 41);
                  break;
               case 19:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 20:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(181, 182);
                  break;
               case 23:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 25:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddStates(183, 185);
                  break;
               case 26:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if (curChar == 41)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 28:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 47 && kind > 34)
                     kind = 34;
                  break;
               case 33:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(186, 187);
                  break;
               case 34:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 35:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 37:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(188, 189);
                  break;
               case 38:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 40:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddStates(190, 192);
                  break;
               case 41:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar == 41 && kind > 35)
                     kind = 35;
                  break;
               case 46:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(193, 194);
                  break;
               case 47:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 49:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddStates(195, 197);
                  break;
               case 50:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(198, 199);
                  break;
               case 51:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 53:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjstateSet[jjnewStateCnt++] = 53;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 123)
                        kind = 123;
                     jjCheckNAddStates(200, 207);
                  }
                  if (curChar == 116)
                     jjAddStates(208, 209);
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 1:
                  jjAddStates(0, 1);
                  break;
               case 4:
                  jjAddStates(2, 3);
                  break;
               case 7:
                  if (curChar == 116)
                     jjAddStates(171, 172);
                  break;
               case 10:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 11:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if (curChar == 116)
                     jjAddStates(208, 209);
                  break;
               case 17:
                  if (curChar == 101)
                     jjAddStates(40, 41);
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(210, 214);
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
               case 25:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(183, 185);
                  break;
               case 30:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 31:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 101)
                     jjAddStates(186, 187);
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(215, 219);
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 39:
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(190, 192);
                  break;
               case 43:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 44:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddStates(200, 207);
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
               case 49:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(195, 197);
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
               case 53:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 15:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAddStates(200, 207);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(0, 1);
                  break;
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(2, 3);
                  break;
               case 21:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(210, 214);
                  break;
               case 22:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 24:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(183, 185);
                  break;
               case 25:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(183, 185);
                  break;
               case 36:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(215, 219);
                  break;
               case 37:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 39:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(190, 192);
                  break;
               case 40:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(190, 192);
                  break;
               case 46:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(195, 197);
                  break;
               case 49:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(195, 197);
                  break;
               case 50:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(53);
                  break;
               case 53:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 123)
                     kind = 123;
                  jjCheckNAdd(53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 54 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_12(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_12(int pos, long active0, long active1)
{
   return jjMoveNfa_12(jjStopStringLiteralDfa_12(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_12(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_12(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_12()
{
   switch(curChar)
   {
      case 41:
         return jjStopAtPos(0, 92);
      case 44:
         return jjStopAtPos(0, 114);
      case 110:
         return jjMoveStringLiteralDfa1_12(0x200000000L);
      default :
         return jjMoveNfa_12(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_12(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa2_12(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_12(0, active0, 0L);
}
private final int jjMoveStringLiteralDfa2_12(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_12(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa3_12(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_12(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_12(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_12(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa4_12(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_12(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_12(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_12(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_12(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_12(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_12(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_12(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa6_12(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_12(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_12(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_12(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa7_12(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_12(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_12(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_12(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(7, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_12(6, active0, 0L);
}
private final int jjMoveNfa_12(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 10;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_11(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_11(int pos, long active0, long active1)
{
   return jjMoveNfa_11(jjStopStringLiteralDfa_11(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_11(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_11(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_11()
{
   switch(curChar)
   {
      case 42:
         return jjStopAtPos(0, 84);
      case 43:
         return jjStopAtPos(0, 85);
      case 63:
         return jjStopAtPos(0, 83);
      default :
         return jjMoveNfa_11(1, 0);
   }
}
private final int jjMoveNfa_11(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7ffff3ffffffffffL & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  if ((0x100002600L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAdd(0);
                  }
                  break;
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  kind = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 12)
                     kind = 12;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_7()
{
   return jjMoveNfa_7(0, 0);
}
private final int jjMoveNfa_7(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100002600L & l) == 0L)
                     break;
                  kind = 10;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_15()
{
   return jjMoveNfa_15(13, 0);
}
private final int jjMoveNfa_15(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 23;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(0, 1);
                  break;
               case 2:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 5:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(220, 221);
                  break;
               case 6:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjCheckNAddStates(222, 224);
                  break;
               case 9:
                  if ((0x100002600L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 41)
                     kind = 36;
                  break;
               case 15:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(225, 226);
                  break;
               case 16:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 18:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 19:
                  if ((0x3ff600000000000L & l) != 0L)
                     jjAddStates(227, 228);
                  break;
               case 20:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 22:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjstateSet[jjnewStateCnt++] = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 36)
                        kind = 36;
                     jjCheckNAddStates(229, 234);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 0:
                  if (curChar == 101)
                     jjAddStates(0, 1);
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(235, 239);
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(222, 224);
                  break;
               case 11:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 12:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAddStates(229, 234);
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAddStates(229, 234);
                  break;
               case 4:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(235, 239);
                  break;
               case 5:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 7:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(222, 224);
                  break;
               case 8:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(222, 224);
                  break;
               case 15:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(18);
                  break;
               case 18:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 36)
                     kind = 36;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 21:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(22);
                  break;
               case 22:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 23 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 4, 5, 2, 3, 10, 11, 25, 26, 36, 37, 60, 61, 66, 67, 
   75, 76, 81, 82, 87, 88, 95, 96, 81, 82, 84, 93, 101, 2, 3, 5, 
   23, 24, 25, 27, 28, 30, 12, 13, 18, 19, 27, 28, 30, 38, 40, 45, 
   46, 54, 56, 66, 68, 86, 87, 101, 103, 109, 111, 128, 130, 139, 140, 163, 
   165, 174, 176, 184, 186, 202, 203, 213, 215, 219, 220, 225, 227, 244, 246, 255, 
   256, 260, 262, 271, 272, 277, 278, 285, 286, 291, 292, 294, 295, 298, 299, 301, 
   302, 303, 306, 307, 309, 310, 291, 292, 294, 295, 297, 298, 299, 301, 302, 303, 
   305, 308, 283, 289, 269, 274, 242, 253, 257, 217, 222, 172, 182, 200, 210, 107, 
   126, 137, 160, 64, 84, 98, 43, 51, 31, 32, 49, 50, 51, 53, 54, 56, 
   8, 10, 23, 24, 29, 30, 41, 43, 53, 54, 56, 64, 66, 74, 76, 80, 
   81, 83, 84, 86, 72, 78, 57, 58, 5, 6, 7, 8, 9, 2, 3, 5, 
   6, 7, 8, 9, 11, 22, 23, 25, 26, 27, 33, 34, 37, 38, 40, 41, 
   42, 46, 47, 49, 28, 29, 50, 51, 46, 47, 49, 28, 29, 50, 51, 53, 
   31, 44, 22, 23, 25, 26, 27, 37, 38, 40, 41, 42, 5, 6, 8, 9, 
   10, 15, 16, 19, 20, 15, 16, 18, 19, 20, 22, 5, 6, 8, 9, 10, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec25[i2] & l2) != 0L);
      default : 
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 1:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 2:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 4:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 12:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec37[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec38[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 17:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 30:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 31:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec39[i2] & l2) != 0L);
      case 33:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec40[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 159:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 215:
         return ((jjbitVec25[i2] & l2) != 0L);
      default : 
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec42[i2] & l2) != 0L);
      default : 
         if ((jjbitVec41[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default : 
         if ((jjbitVec43[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\157\162", "\141\156\144", "\144\151\166", "\151\144\151\166", "\155\157\144", "\52", 
"\151\156", "\156\151\154\154\141\142\154\145", null, null, null, null, null, 
"\163\141\164\151\163\146\151\145\163", "\162\145\164\165\162\156", "\164\150\145\156", "\145\154\163\145", 
"\164\157", "\151\156\164\145\162\163\145\143\164", "\165\156\151\157\156", 
"\145\170\143\145\160\164", null, null, null, null, null, null, null, null, "\52", "\52", null, null, 
"\57", "\57\57", "\57", "\57\57", "\75", "\151\163", "\41\75", 
"\151\163\156\157\164", "\74\75", "\74\74", "\76\75", "\76\76", "\145\161", "\156\145", "\147\164", 
"\147\145", "\154\164", "\154\145", "\74", "\76", "\55", "\53", "\55", "\53", "\77", 
"\52", "\53", "\174", "\50", "\100", "\133", "\135", "\51", "\51", null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\54", "\54", "\56", "\56\56", null, null, null, "\44", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "OPERATOR", 
   "ITEMTYPE", 
   "VARNAME", 
   "EXPR_COMMENT", 
   "KINDTEST", 
   "KINDTESTFORPI", 
   "QNAME", 
   "NAMESPACEDECL", 
   "XMLSPACE_DECL", 
   "NAMESPACEKEYWORD", 
   "OCCURRENCEINDICATOR", 
   "CLOSEKINDTEST", 
   "SCHEMACONTEXTSTEP", 
   "EXT_KEY", 
   "DUMMY", 
};
public static final int[] jjnewLexState = {
   -1, -1, 4, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, 0, 0, 0, 0, 0, 0, 0, -1, 13, 13, 1, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 11, 
   5, 5, 1, -1, -1, 1, 12, 1, 1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
   0, 0, 0, 0, 0, 0, -1, -1, 1, 1, 1, 0, 0, -1, 0, 1, 1, -1, 3, 3, 3, 2, 2, -1, 5, 
   5, 5, 5, 5, 6, 5, -1, 5, 6, 5, 5, 5, -1, 0, 5, 1, 1, -1, -1, -1, 3, 1, 11, 12, 1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xff9fffffffffe3e1L, 0xff1ffffbffffffffL, 0x1L, 
};
static final long[] jjtoSkip = {
   0x141cL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x1cL, 0x0L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[311];
private final int[] jjstateSet = new int[622];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public XPathTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public XPathTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 311; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 16 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
     case 6:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_6();
       break;
     case 7:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_7();
       break;
     case 8:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_8();
       break;
     case 9:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_9();
       break;
     case 10:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_10();
       break;
     case 11:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_11();
       break;
     case 12:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_12();
       break;
     case 13:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_13();
       break;
     case 14:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_14();
       break;
     case 15:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_15();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 2 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                               pushState();
         break;
      case 4 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                             popState();
         break;
      case 12 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                                 input_stream.backup(1);
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 50 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                              pushState(OPERATOR);
         break;
      case 51 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                                  pushState(OPERATOR);
         break;
      case 92 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[92]);
         else
            image.append(jjstrLiteralImages[92]);
                             popState();
         break;
      case 99 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                                     pushState(OPERATOR);
         break;
      case 100 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                                                pushState(OCCURRENCEINDICATOR);
         break;
      case 101 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                        pushState(OPERATOR);
         break;
      case 102 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                              pushState(OPERATOR);
         break;
      case 103 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                        pushState(OPERATOR);
         break;
      case 104 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                                                           pushState(OPERATOR);
         break;
      case 105 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                                         pushState(OCCURRENCEINDICATOR);
         break;
      case 106 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                                             pushState(KINDTEST);
         break;
      case 107 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                                             pushState(OCCURRENCEINDICATOR);
         break;
      case 108 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                                                                      pushState(OPERATOR);
         break;
      case 109 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                                   pushState(OCCURRENCEINDICATOR);
         break;
      case 110 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                                         pushState(OCCURRENCEINDICATOR);
         break;
      case 111 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                                   pushState(OCCURRENCEINDICATOR);
         break;
      default : 
         break;
   }
}
}
