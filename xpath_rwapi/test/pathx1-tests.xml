<?xml version="1.0" encoding="UTF-8"?>

<tests>
		<test value="$h - $i"/>
		<test value="$hotelnode/location/@country"/>
		<test value="$in//text()"/>
		<test value="$l10n.name"/>
		<test value="$lookup/@text"/>
		<test value="$start + $step"/>
		<test value="$texts[position() &gt; 1]"/>
		<test value="$var1|$var2"/>
		<test value="$var1|child::child2"/>
		<test value="$var1|key('key1','Lynne Rosenthal')"/>
		<test value="$x=''"/>
		<test value="$x='foo'"/>
		<test value="$xml-source"/>
		<test value="$y='foo'"/>
		<test value="$zoo:bear"/>
		<test value="' #text'"/>
		<test value="' 6 ' div 2"/>
		<test value="' 6 '*div"/>
		<test value="' x 4'"/>
		<test value="' x 4'"/>
		<test value="'....5....|'"/>
		<test value="'1' and '0'"/>
		<test value="'2'&gt;'1'"/>
		<test value="'200'"/>
		<test value="'ABC'"/>
		<test value="($terms/table/expand[@language=$lang]/gentext[@key=$key])[1]"/>
		<test value="((((((n3+5)*(3)+(((n2)+2)*(n1 - 6)))-(n4 - n2))+(-(4-6)))))"/>
		<test value="(((ancestor::foo)[1])/@att1)"/>
		<test value="((ancestor::foo))[1]/@att1"/>
		<test value="(* - 4) div 2"/>
		<test value="(* - 4)**"/>
		<test value="(2 + number('xxx'))"/>
		<test value="(24 div 3 +2) div (40 div 8 -3)"/>
		<test value="(5 mod 2 = 1) and (5 mod -2 = 1) and (-5 mod 2 = -1) and (-5 mod -2 = -1)"/>
		<test value="(77 mod $anum + n5 mod 8) mod $anum"/>
		<test value="(ancestor-or-self::*)[@att1][1]/@att1"/>
		<test value="(ancestor::foo)[1]/@att1"/>
		<test value="(ancestor::foo[1])/@att1"/>
		<test value="(ancestor::section|ancestor::simplesect         |ancestor::articleinfo)[last()]"/>
		<test value="(chapter//footnote)[2]"/>
		<test value="(child::chapter/descendant-or-self::node())/footnote[2]"/>
		<test value="(n1*n2*n3*n4*n5*n6)div n7 div n8 div n9 div n10"/>
		<test value="(n1/@attrib)*(n2/@attrib)"/>
		<test value="(n1/@attrib)+(n2/@attrib)"/>
		<test value="(preceding-sibling::*|following-sibling::*)/ancestor::*[last()]/*[last()]"/>
		<test value="(preceding-sibling::foo)[1]/@att1"/>
		<test value="(preceding::foo)[1]/@att1"/>
		<test value="(section//@title)[7]"/>
		<test value="(xalan:nodeset($rtf)/default:docelem/test:elem3)"/>
		<test value="* +3"/>
		<test value="*//la | //Bflat | re"/>
		<test value="*/p"/>
		<test value="*[$index]"/>
		<test value="*[$index]"/>
		<test value="*[$index]"/>
		<test value="*[1]"/>
		<test value="*[3]"/>
		<test value="*[4]"/>
		<test value="*[@test and position()=1]"/>
		<test value="*[@test and position()=4]"/>
		<test value="*[@test and position()=7]"/>
		<test value="*[@test and position()=8]"/>
		<test value="*[@test='true']"/>
		<test value="*[@test][1]/num"/>
		<test value="*[@test][position()=1]/num"/>
		<test value="*[last()=position()]"/>
		<test value="*[last()]"/>
		<test value="*[local-name()='bar']"/>
		<test value="*[not(@test)][last()=position()]"/>
		<test value="*[not(@test)][last()]"/>
		<test value="*[position()=1]"/>
		<test value="*[position()=3]"/>
		<test value="*[position()=4]"/>
		<test value="*[starts-with(name(.),'f')]"/>
		<test value="*|@*"/>
		<test value="*|@*|comment()|processing-instruction()|text()"/>
		<test value="-(n-2/@attrib) - -(n-1/@attrib)"/>
		<test value="-(n1|n2)"/>
		<test value="-.0000000000000000000000000000000000000000123456789"/>
		<test value="-.01"/>
		<test value="-n-2 --n-1"/>
		<test value="-n-2/@attrib --n-1/@attrib"/>
		<test value=".."/>
		<test value="../../a/b[1]"/>
		<test value="..//foo"/>
		<test value="../@id"/>
		<test value="../node()"/>
		<test value="./*[name(.) = $sortcol]"/>
		<test value=".//*[@so]"/>
		<test value=".//PERSONA"/>
		<test value=".//a"/>
		<test value=".//center"/>
		<test value=".//center"/>
		<test value=".//comment()"/>
		<test value=".//f"/>
		<test value=".//near-south/preceding-sibling::*|following-sibling::east/ancestor-or-self::*[2]"/>
		<test value=".//text()"/>
		<test value=".//title"/>
		<test value="./@id"/>
		<test value="./@theattrib"/>
		<test value=".0000000000000000000000000000000000000000123456789"/>
		<test value=".01"/>
		<test value=".123456789"/>
		<test value="/"/>
		<test value="/*/@group"/>
		<test value="//*"/>
		<test value="//*"/>
		<test value="//*[count(./*/*) &gt; 0]"/>
		<test value="//*[count(ancestor::*) &gt;= 2]/../parent::*"/>
		<test value="//ACT"/>
		<test value="//ancestor::*"/>
		<test value="//child1[parent::element1]"/>
		<test value="//child1|//child2"/>
		<test value="//child2[ancestor-or-self::element2]"/>
		<test value="//child2[ancestor::element2]"/>
		<test value="//child5|//child2|//child4"/>
		<test value="//comment()"/>
		<test value="//inc/node4"/>
		<test value="//item[@type=current()/@name]"/>
		<test value="//noChild1|//noChild2"/>
		<test value="//north/dup2 | south/preceding-sibling[4] | north/dup1 | north/*"/>
		<test value="//processing-instruction()"/>
		<test value="//xx/descendant::*"/>
		<test value="/doc/*[@test='true']"/>
		<test value="/doc/a/b/@attr"/>
		<test value="/doc/critter[@type='cat']"/>
		<test value="/doc/mid/inner"/>
		<test value="/doc/sub1/child1|/doc/sub2/child2"/>
		<test value="/docs/a"/>
		<test value="/docs/a"/>
		<test value="/page/contents/avail/hotel"/>
		<test value="/sss/sss/i"/>
		<test value="/sss/sss/i"/>
		<test value="0 &gt; -0"/>
		<test value="0 = -0"/>
		<test value="0 div 0 &gt;= 0"/>
		<test value="0 div 0 &lt; 0"/>
		<test value="0 div 0"/>
		<test value="0 or ''"/>
		<test value="0"/>
		<test value="0000000000"/>
		<test value="1 = '001'"/>
		<test value="1 = 1.00"/>
		<test value="1 div -0 = 1 div 0"/>
		<test value="1 div -0 = 2 div -0"/>
		<test value="1&gt;1"/>
		<test value="1&lt;1"/>
		<test value="1&lt;=1"/>
		<test value="1-2"/>
		<test value="10+5+25+20+15+50+35+40"/>
		<test value="10+7"/>
		<test value="100-$anum -5-15-$anum"/>
		<test value="100-9-7-4-17-18-5"/>
		<test value="100-n6 -4-n1 -1-11"/>
		<test value="12"/>
		<test value="123"/>
		<test value="1234"/>
		<test value="12345"/>
		<test value="123456"/>
		<test value="1234567"/>
		<test value="12345678"/>
		<test value="123456789"/>
		<test value="1234567890"/>
		<test value="12345678901"/>
		<test value="123456789012"/>
		<test value="1234567890123"/>
		<test value="12345678901234"/>
		<test value="123456789012345"/>
		<test value="1234567890123456"/>
		<test value="12345678901234567"/>
		<test value="123456789012345678"/>
		<test value="16-div"/>
		<test value="1=1"/>
		<test value="2 * -number('xxx')"/>
		<test value="2 - number('xxx')"/>
		<test value="2 div number('xxx')"/>
		<test value="2 mod number('xxx')"/>
		<test value="2"/>
		<test value="2&gt;1"/>
		<test value="2&gt;=1"/>
		<test value="2&gt;=2"/>
		<test value="2&lt;1"/>
		<test value="2&lt;=1"/>
		<test value="2*3"/>
		<test value="2+n5+7+n3"/>
		<test value="20"/>
		<test value="25-*"/>
		<test value="256"/>
		<test value="3"/>
		<test value="3"/>
		<test value="3*2+5*4-4*2-1"/>
		<test value="3+6"/>
		<test value="3-1"/>
		<test value="32"/>
		<test value="4"/>
		<test value="4"/>
		<test value="444 + $t1num"/>
		<test value="48 mod 17 - 2 mod 9 + 13 mod 5"/>
		<test value="5 mod 2"/>
		<test value="5"/>
		<test value="5"/>
		<test value="5.*."/>
		<test value="5.+*"/>
		<test value="54 div*"/>
		<test value="555"/>
		<test value="56 mod round(n5*2+1.444) - n6 mod 4 + 7 mod n4"/>
		<test value="6 div -2"/>
		<test value="6 div 2"/>
		<test value="6"/>
		<test value="60"/>
		<test value="7 - -3"/>
		<test value="7"/>
		<test value="7"/>
		<test value="7+-3"/>
		<test value="70 div $anum - 18 div n6 + $anum div n2"/>
		<test value="8"/>
		<test value="80 div n2 + 12 div 2 - n4 div n2"/>
		<test value="9"/>
		<test value="9.87654321012345"/>
		<test value="98.7654321012345"/>
		<test value="987.654321012345"/>
		<test value="9876.54321012345"/>
		<test value="98765.4321012345"/>
		<test value="987654.321012345"/>
		<test value="9876543.21012345"/>
		<test value="98765432.1012345"/>
		<test value="987654321.012345"/>
		<test value="9876543210"/>
		<test value="9876543210.12345"/>
		<test value="98765432101.2345"/>
		<test value="987654321012.345"/>
		<test value="9876543210123.45"/>
		<test value="98765432101234.5"/>
		<test value="FM|PERSONAE|ACT"/>
		<test value="Name/@First"/>
		<test value="OL"/>
		<test value="Personal_Information/Age"/>
		<test value="Spr/State[. = 'Open']"/>
		<test value="a/*[last()]"/>
		<test value="a/child::*[last()]"/>
		<test value="a/child::comment()[last()]"/>
		<test value="a/child::node()[last()]"/>
		<test value="a/child::text()[last()]"/>
		<test value="a/descendant::*[last()]"/>
		<test value="a/x"/>
		<test value="a['3.5' &lt; 4]"/>
		<test value="a['target'!=descendant::*]"/>
		<test value="a['target'=descendant::*]"/>
		<test value="a[('target'=descendant::*) or @squish]"/>
		<test value="a[(@squeesh or @squish) and @squash]"/>
		<test value="a[*=9]"/>
		<test value="a[0 &lt; true()]"/>
		<test value="a[0]"/>
		<test value="a[1 &lt; 2]"/>
		<test value="a[1 &lt; 3]"/>
		<test value="a[1]"/>
		<test value="a[3 &gt; following-sibling::*]"/>
		<test value="a[3 &gt;= following-sibling::*]"/>
		<test value="a[3 &lt; following-sibling::*]"/>
		<test value="a[3 &lt;= following-sibling::*]"/>
		<test value="a[3-2]"/>
		<test value="a[3.0='3.0']"/>
		<test value="a[3=following-sibling::*]"/>
		<test value="a[3]"/>
		<test value="a[4 != following-sibling::*]"/>
		<test value="a[4]"/>
		<test value="a[@squeesh or (@squish and @squash)]"/>
		<test value="a[@squeesh or @squish and @squash]"/>
		<test value="a[descendant::*!='target']"/>
		<test value="a[descendant::*='target']"/>
		<test value="a[div=9]"/>
		<test value="a[false()!=following-sibling::*]"/>
		<test value="a[following-sibling::* != 4]"/>
		<test value="a[following-sibling::* &gt; 3]"/>
		<test value="a[following-sibling::* &gt;= 3]"/>
		<test value="a[following-sibling::* &lt; 3]"/>
		<test value="a[following-sibling::* &lt;= 3]"/>
		<test value="a[following-sibling::*!=false()]"/>
		<test value="a[following-sibling::*=3]"/>
		<test value="a[following-sibling::*=descendant::*]"/>
		<test value="a[following-sibling::*=true()]"/>
		<test value="a[not(('target'=descendant::*) or @squish)]"/>
		<test value="a[not(@*)]"/>
		<test value="a[number('3')]"/>
		<test value="a[position() &lt;=3]"/>
		<test value="a[position()!=2]"/>
		<test value="a[position()&gt;2]"/>
		<test value="a[position()&gt;=2]"/>
		<test value="a[position()&lt;3]"/>
		<test value="a[position()=$first]"/>
		<test value="a[position()=1]"/>
		<test value="a[position()=3]"/>
		<test value="a[position()=4]"/>
		<test value="a[true()='stringwithchars']"/>
		<test value="a[true()=4]"/>
		<test value="a[true()=following-sibling::*]"/>
		<test value="alternate/name/first"/>
		<test value="ancestor-or-self::*"/>
		<test value="ancestor-or-self::*[1]"/>
		<test value="ancestor-or-self::*[1]/text()"/>
		<test value="ancestor-or-self::*[@att1][1]/@att1"/>
		<test value="ancestor-or-self::sub | ancestor-or-self::sub-sub"/>
		<test value="ancestor::*"/>
		<test value="ancestor::*[3]"/>
		<test value="ancestor::*[count(child::*) &gt; 1]/*[not(. = current()/ancestor-or-self::*)]"/>
		<test value="ancestor::foo[1]/@att1"/>
		<test value="ancestor::sub1|ancestor::sub2"/>
		<test value="attribute :: *"/>
		<test value="attribute :: div"/>
		<test value="attribute*(div - 4)"/>
		<test value="attribute::*"/>
		<test value="attribute::*[2]"/>
		<test value="attribute::attr1|attribute::attr2"/>
		<test value="attribute::center-attr-2"/>
		<test value="author/name|author/bibliography/author/chapters"/>
		<test value="author/name|author/bibliography/author/name"/>
		<test value="author/name|author/noElement"/>
		<test value="author[(name/@real='no' and position()=1)]|author[(name/@real='yes' and position()=last())]"/>
		<test value="author[name/@real='no']|author[name/@real='yes']"/>
		<test value="author[name='Mary Brady']|author[name/@real='no']"/>
		<test value="bar | joes:bar"/>
		<test value="bar[(@a='1' and @b='1') or (@c='1' and @d='1')]"/>
		<test value="bar[(@a='1' or @b='1') and (@c='1' or @d='1')]"/>
		<test value="bar[(@a='1' or @b='1') and @c='1']"/>
		<test value="bar[@a='1' and (@b='1' or @c='1') and @d='1']"/>
		<test value="bar[@a='1' and @b='1' or @c='1' and @d='1']"/>
		<test value="bar[@a='1' and @b='1']"/>
		<test value="bar[@a='1' or (@b='1' and @c='1') or @d='1']"/>
		<test value="bar[@a='1' or @b='1' and @c='1' or @d='1']"/>
		<test value="bar[@a='1' or @b='1' or @c='1']"/>
		<test value="boolean($ResultTreeFragTest)"/>
		<test value="boolean($emptyResultTreeFragTest)"/>
		<test value="boolean('')"/>
		<test value="boolean('0')"/>
		<test value="boolean(-0)"/>
		<test value="boolean(0 div 0)"/>
		<test value="boolean(0)"/>
		<test value="boolean(1 div 0)"/>
		<test value="boolean(1)"/>
		<test value="boolean(doc)"/>
		<test value="boolean(foo)"/>
		<test value="ceiling(-1.5)=-1"/>
		<test value="ceiling(0.0)"/>
		<test value="ceiling(1)=1"/>
		<test value="ceiling(1.1)=2"/>
		<test value="ceiling(1.54)"/>
		<test value="ceiling(2.999999)"/>
		<test value="ceiling(n0)"/>
		<test value="ceiling(n1)"/>
		<test value="ceiling(n2)"/>
		<test value="ceiling(number('xxx'))"/>
		<test value="center//*"/>
		<test value="center//child::*"/>
		<test value="center//descendant::*"/>
		<test value="center/child::*"/>
		<test value="center/descendant::*"/>
		<test value="chapter//footnote[1]"/>
		<test value="chapter//footnote[2]"/>
		<test value="chapter/descendant::footnote[6]"/>
		<test value="chapter/note"/>
		<test value="chapter/note"/>
		<test value="child :: sub"/>
		<test value="child1[child::child2]"/>
		<test value="child::*"/>
		<test value="child::*/child::*"/>
		<test value="child::*/descendant::*"/>
		<test value="child::*[2]"/>
		<test value="child::article|key('key1','Carmelo Montanez')"/>
		<test value="child::near-south-west"/>
		<test value="child::node()"/>
		<test value="child::sub"/>
		<test value="child::sub1|child::sub2"/>
		<test value="child[@deep='3']|child[@wide='3']"/>
		<test value="child[@wide='3'] | key('one','3')"/>
		<test value="child[@wide='3']|child[@deep='3']"/>
		<test value="chooser"/>
		<test value="comment ()"/>
		<test value="concat(         substring(subj,1,number(not(starts-with(.,'Re: ')))*string-length(subj)),         substring(substring-after(subj,'Re: '),1,           		number(starts-with(.,'Re: '))*string-length(substring-after(subj,'Re: '))))"/>
		<test value="concat($act,' - ',TITLE,'   ')"/>
		<test value="concat($mParam,$nParam,$oParam,$pParam)"/>
		<test value="concat($str,'....5....|')"/>
		<!-- arg value="concat(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;ef&quot;)"/ -->
		<!-- arg value="concat(&quot;bc&quot;, string(23))"/>
		<test value="concat(&quot;cd&quot;, &quot;34&quot;)"/>
		<test value="concat(&quot;cd&quot;, 34)"/>
		<test value="concat(&quot;x&quot;,&quot;yz&quot;)"/ -->
		<test value="concat('id=', string($p2))"/>
		<test value="concat(/*, /*[@attr='whatsup'])"/>
		<test value="concat(a, 34)"/>
		<test value="concat(a, b)"/>
		<test value="concat(a, b, c, d, e)"/>
		<test value="concat(false(),'ly')"/>
		<test value="concat(left,right,orig)"/>
		<test value="concat(left,right,orig)"/>
		<test value="concat(team[1], ' versus ', team[2])"/>
		<test value="concat(team[1]/@score, '-', team[2]/@score)"/>
		<test value="contains(       unparsed-entity-uri('hatch-pic'),'grafix/OpenHatch.gif')"/>
		<test value="contains($node,$find)"/>
		<test value="contains('','')"/>
		<test value="contains('ENCYCLOPEDIA', 'CYCL')"/>
		<test value="contains('ENCYCLOPEDIA', 'TEST')"/>
		<test value="contains('ab', 'abc')"/>
		<test value="contains('abc', '')"/>
		<test value="contains('abc', 'bc')"/>
		<test value="contains('abc', 'bcd')"/>
		<test value="contains('foo','o')"/>
		<test value="contains('true()', 'e')"/>
		<test value="contains(., '&amp;')"/>
		<test value="contains(concat(.,'BC'),concat('A','B','C'))"/>
		<test value="contains(doc, 'CYCL')"/>
		<test value="contains(doc, 'TEST')"/>
		<test value="contains(doc/@attr, 'TEST')"/>
		<test value="contains(doc/@attr, 'amwi')"/>
		<test value="contains(main,sub)"/>
		<test value="contains(main,sub)"/>
		<test value="contains(main,sub)"/>
		<test value="contains(main,sub)"/>
		<test value="count($var1)"/>
		<test value="count($var2)"/>
		<test value="count(*)"/>
		<test value="count(*)"/>
		<test value="count(*/z[2])"/>
		<test value="count(.//SPEECH)"/>
		<test value="count(.//comment())"/>
		<test value="count(/doc/alpha[last()]/h)"/>
		<test value="count(/doc/chapter/note)"/>
		<test value="count(a/@*)"/>
		<test value="count(a/attribute::*)"/>
		<test value="count(alpha/*[last()][name()='z'])"/>
		<test value="count(ancestor::section             |../ednote|following::title|../bogus)"/>
		<test value="count(ancestor::section             |ancestor::simplesect|ancestor::article)"/>
		<test value="count(ancestor::section           |ancestor::simplesect|ancestor::articleinfo)"/>
		<test value="count(div)"/>
		<test value="count(following-sibling::*)"/>
		<test value="count(key('mykey', 'Introduction'))"/>
		<test value="count(namespace::*)"/>
		<test value="count(preceding::text())"/>
		<test value="count(preceding::text())"/>
		<test value="count(xalan:nodeset($rtf)/default:docelem/default:elem3)"/>
		<test value="counter:read('index')"/>
		<test value="counter:read('index')"/>
		<test value="critter"/>
		<test value="critter"/>
		<test value="current()"/>
		<test value="current()"/>
		<test value="current()"/>
		<test value="customers/customer"/>
		<test value="d"/>
		<test value="dat"/>
		<test value="date"/>
		<test value="date:getYear()"/>
		<test value="day"/>
		<test value="day"/>
		<test value="day"/>
		<test value="day"/>
		<test value="day"/>
		<test value="descendant-or-self::*"/>
		<test value="descendant-or-self::*"/>
		<test value="descendant-or-self::*[3]"/>
		<test value="descendant-or-self::center"/>
		<test value="descendant-or-self::far-south"/>
		<test value="descendant-or-self::sub1|descendant-or-self::sub2"/>
		<test value="descendant::*"/>
		<test value="descendant::*"/>
		<test value="descendant::*/child::*"/>
		<test value="descendant::*[3]"/>
		<test value="descendant::*[string-length(name(.))=1]"/>
		<test value="descendant::child1|descendant::child2"/>
		<test value="descendant::far-south"/>
		<test value="display"/>
		<test value="display"/>
		<test value="display"/>
		<test value="div +3"/>
		<test value="div div mod"/>
		<test value="div mod mod"/>
		<test value="div"/>
		<test value="div/@attrib div mod/@attrib"/>
		<test value="div/@attrib mod mod/@attrib"/>
		<test value="div/para[lang('en')]"/>
		<test value="doc/element1[2]/child1[last()]"/>
		<test value="document($typefile,/)"/>
		<!-- arg value="document(&quot;&quot;)//bdd:test"/>
		<test value="document(&quot;&quot;)//ped:test"/>
		<test value="document(&quot;&quot;)/xsl:stylesheet/ped:test[@attrib=&quot;yeha&quot;]"/>
		<test value="document(&quot;../impincl-test/mdocstest.xml&quot;)//a"/>
		<test value="document(&quot;../impincl-test/mdocstest.xml&quot;)//b"/ -->
		<test value="document('')/*/xsl:template[@name=$whichtmplt]"/>
		<test value="document('')/*/xsl:template[@name=$whichtmplt]"/>
		<test value="document('')/*/xsl:template[@name='qq']/node()"/>
		<test value="document('')/xsl:stylesheet/ped:test[@attrib='yeha']"/>
		<test value="document('')/xsl:stylesheet/ped:test[@attrib='yeha']"/>
		<test value="document('../impincl-test/mdocs11a.xml')//body"/>
		<test value="document('..\mdocs\compu.xml')/market.participant/address.set/*"/>
		<test value="document('bib.xml')"/>
		<test value="document('level3/xreluri09a.xml',document('level1/level2/xreluri09b.xml'))"/>
		<test value="document('mdocs01a.xml')//body"/>
		<test value="document('mdocs03a.xml',section)"/>
		<test value="document('select68.xml')//inside"/>
		<test value="document('select68.xml')//inside"/>
		<test value="document('terms.xml')"/>
		<test value="document('variable20.xml')"/>
		<test value="document('x14template.html')"/>
		<test value="document(a)//body"/>
		<test value="document(a)//body"/>
		<test value="document(a)//body"/>
		<test value="document(document(places))"/>
		<test value="document(filename,document('level1/level2/xreluri10b.xml'))/*/body"/>
		<test value="document(places)"/>
		<test value="document(places)//body"/>
		<test value="document(places,second)/*"/>
		<test value="document(pointer/urlref/@urlstr)/market.participant/business.identity.group/business.name"/>
		<test value="element"/>
		<test value="element1[(((((2*10)-4)+9) div 5) mod 3 )]"/>
		<test value="element1[(((((2*10)-4)+9) div 5) mod floor(3))]"/>
		<test value="element1[descendant-or-self::child2]"/>
		<test value="element1[floor(2)]"/>
		<test value="em:foo"/>
		<test value="expense-report/total"/>
		<test value="expense-report/total"/>
		<test value="ext:getPIData(doc/processing-instruction('a-pi'))"/>
		<test value="extn1:getPIData(doc/processing-instruction('a-pi')[1])"/>
		<test value="extn1:getPIData(doc/processing-instruction('b-pi'))"/>
		<test value="fa/../mi | Aflat/natural/la | Csharp//* | /doc/do | *//ti"/>
		<test value="false() and 1 div 0"/>
		<test value="false() and false()"/>
		<test value="false() and true()"/>
		<test value="false() or false()"/>
		<test value="false() or true()"/>
		<test value="false()"/>
		<test value="false()=''"/>
		<test value="false()=0"/>
		<test value="floor(-1.5)"/>
		<test value="floor(-1.5)=-2"/>
		<test value="floor(0.0)"/>
		<test value="floor(1)=1"/>
		<test value="floor(1.9)"/>
		<test value="floor(1.9)=1"/>
		<test value="floor(2.999999)"/>
		<test value="floor(n0)"/>
		<test value="floor(number('xxx'))"/>
		<test value="following-sibling::*"/>
		<test value="following-sibling::*/preceding-sibling::*"/>
		<test value="following-sibling::*[1]"/>
		<test value="following-sibling::*[2]/preceding-sibling::*"/>
		<test value="following-sibling::*[2]/preceding-sibling::*[4]"/>
		<test value="following-sibling::*[2]/preceding-sibling::*[4]/following-sibling::*[5]/preceding-sibling::*[4]/preceding-sibling::*[2]"/>
		<test value="following-sibling::east"/>
		<test value="following-sibling::node()"/>
		<test value="following::*"/>
		<test value="following::*[4]"/>
		<test value="following::*[4]/../*[2]"/>
		<test value="foo[(bar[2])='this']"/>
		<test value="foo[(bar[2][(baz[2])='goodbye'])]"/>
		<test value="format-number('foo','#############')"/>
		<test value="format-number('foo','#############')"/>
		<test value="format-number(-1 div 0,'###############################')"/>
		<test value="format-number(-1 div 0,'###############################')"/>
		<test value="format-number(-26931.4,'!!!,!!!.!!!')"/>
		<test value="format-number(-26931.4,'###,###.###')"/>
		<test value="format-number(-26931.4,'###,###.###','myminus')"/>
		<test value="format-number(-26931.4,'###,###.###;###,###.###')"/>
		<test value="format-number(-26931.4,'###.###,###','periodgroup')"/>
		<test value="format-number(-26931.4,'###.###,###','periodgroup')"/>
		<test value="format-number(-26931.4,'###.###,###','periodgroup')"/>
		<test value="format-number(-26931.4,'###.###,###','periodgroup')"/>
		<test value="format-number(-26931.4,'+!!,!!!.!!!\-!!!,!!!.!!!')"/>
		<test value="format-number(-26931.4,'+###,###.###;-###,###.###')"/>
		<test value="format-number(-26931.4,'+###,###.###;_###,###.###')"/>
		<test value="format-number(-26931.4,'-###,###.###')"/>
		<test value="format-number(-26931.4,'-###,###.###','myminus')"/>
		<test value="format-number(-26931.4,'_###,###.###','myminus')"/>
		<test value="format-number(-42857.1,'###,###.###')"/>
		<test value="format-number(-42857.1,'###,###.###','myminus')"/>
		<test value="format-number(-42857.1,'###,###.###','myminus')"/>
		<test value="format-number(-42857.1,'###,###.###','newminus')"/>
		<test value="format-number(-42857.1,'###,###.###','newminus')"/>
		<test value="format-number(-73816.9,'###,###.###')"/>
		<test value="format-number(-73816.9,'###,###.###')"/>
		<test value="format-number(-73816.9,'###,###.###')"/>
		<test value="format-number(-73816.9,'###,###.###')"/>
		<test value="format-number(0.25, '00%')"/>
		<test value="format-number(0.4857,'###.###%')"/>
		<test value="format-number(0.4857,'###.###c')"/>
		<test value="format-number(0.4857,'###.###m')"/>
		<test value="format-number(0.4857,'###.###â€°')"/>
		<test value="format-number(1 div 0,'###############################')"/>
		<test value="format-number(1 div 0,'###############################')"/>
		<test value="format-number(1, '#,##0')"/>
		<test value="format-number(1, '00')"/>
		<test value="format-number(1, '00.0')"/>
		<test value="format-number(1000, '###0')"/>
		<test value="format-number(1234.567,'#*###*###!###','foo:decimal1')"/>
		<test value="format-number(12792.14*96.58,'##,###,000.000###')"/>
		<test value="format-number(2.14*86.58,'PREFIX##00.000###SUFFIX')"/>
		<test value="format-number(2392.14*(-36.58),'000,000.000###;###,###.000###')"/>
		<test value="format-number(2392.14*(-36.58),'000,000.000###;-###,###.000###')"/>
		<test value="format-number(2392.14*36.58,'000,000.000000')"/>
		<test value="format-number(2392.14*36.58,'000,000.000000','myminus')"/>
		<test value="format-number(2392.14*36.58,'000,000.000000;###,###.000###')"/>
		<test value="format-number(2392.14*36.58,'000,000.000000;###,###.000###','myminus')"/>
		<test value="format-number(239236.588,'00000.00')"/>
		<test value="format-number(26931.4,'+!!!,!!!.!!!\-!!,!!!.!!!')"/>
		<test value="format-number(2792.14*(-36.58),'000,000.000###')"/>
		<test value="format-number(4030201.0506,'#!!!,!!!,aaa.aaaaaa0')"/>
		<test value="format-number(7654321.4857,'### ### ###,#####')"/>
		<test value="format-number(931.4857,'###!###!###')"/>
		<test value="format-number(931.4857,'000.000|###')"/>
		<test value="format-number(95.4857,'Â¤###.####')"/>
		<test value="format-number(987654321,'###,##0,00.00')"/>
		<test value="generate-id(d)"/>
		<test value="generate-id(xalan:nodeset($rtf)/default:docelem/default:elem4)"/>
		<test value="growth"/>
		<test value="growth"/>
		<test value="human"/>
		<test value="id('c')/@id"/>
		<test value="id('c')/@id"/>
		<test value="id('d b c')"/>
		<test value="id('id0')/a/b"/>
		<test value="id('id0')/c/c/a"/>
		<test value="id('id10')/a"/>
		<test value="id('id13')"/>
		<test value="id('id2')/a | id('id5') | id('id15')/a"/>
		<test value="id('id4')"/>
		<test value="id('id8')/b/b"/>
		<test value="id('id9')"/>
		<test value="id('nomatch')/@id"/>
		<test value="id(main/b)"/>
		<test value="id(main/b)"/>
		<test value="item[$n1]"/>
		<test value="item[position()=$n]"/>
		<test value="java:format($formatter, $date)"/>
		<test value="java:format($formatter, $javadate)"/>
		<test value="java:get ($counter-table, 'index')"/>
		<test value="java:java.lang.Long.parseLong(string(.))"/>
		<test value="java:java.text.SimpleDateFormat.new('yyyy.MM.dd hh:mm')"/>
		<test value="java:java.util.Calendar.getInstance()"/>
		<test value="java:java.util.Date.new($date)"/>
		<test value="java:java.util.Hashtable.new ()"/>
		<test value="key($keysp, 'Expressions')/subdiv/p"/>
		<test value="key($keysp, 'Introduction')/subdiv/p"/>
		<test value="key($keysp, 'Stylesheet Structure')/subdiv/p"/>
		<test value="key('MonthNum',month)"/>
		<test value="key('MonthNum',month)"/>
		<test value="key('baz:mykey', 'Expressions')/p"/>
		<test value="key('baz:mykey', 'Introduction')/p"/>
		<test value="key('baz:mykey', 'Stylesheet Structure')/p"/>
		<test value="key('bib',$lookup)"/>
		<test value="key('bigspace', 'Expressions')/subdiv/p"/>
		<test value="key('bigspace', 'Expressions')/subdiv/p"/>
		<test value="key('bigspace', 'Introduction')/subdiv/p"/>
		<test value="key('bigspace', 'Introduction')/subdiv/p"/>
		<test value="key('bigspace', 'Stylesheet Structure')/subdiv/p"/>
		<test value="key('bigspace', 'Stylesheet Structure')/subdiv/p"/>
		<test value="key('filterspace', 'Expressions')/subdiv/p"/>
		<test value="key('filterspace', 'Expressions')/subdiv/p"/>
		<test value="key('filterspace', 'Introduction')/subdiv/p"/>
		<test value="key('filterspace', 'Introduction')/subdiv/p"/>
		<test value="key('filterspace', 'Stylesheet Structure')/subdiv/p"/>
		<test value="key('filterspace', 'Stylesheet Structure')/subdiv/p"/>
		<test value="key('k','Albany')"/>
		<test value="key('k','Albany')"/>
		<test value="key('k','false')[position()=1]/num"/>
		<test value="key('k','false')[position()=2]/num"/>
		<test value="key('k','true')[1]/num"/>
		<test value="key('k','true')[1]/num"/>
		<test value="key('k','true')[3]/num"/>
		<test value="key('k','true')[3]/num"/>
		<test value="key('k','true')[4]/num"/>
		<test value="key('k','true')[4]/num"/>
		<test value="key('k','true')[last()=position()]"/>
		<test value="key('k','true')[last()]"/>
		<test value="key('k','true')[position()=1]/num"/>
		<test value="key('k','true')[position()=4]/num"/>
		<test value="key('key1','Mary Brady')|key('key2','Rick Rivello')"/>
		<test value="key('marks',key('titles', 'Expressions')/finder)"/>
		<test value="key('mykey', 'Expressions')"/>
		<test value="key('mykey', 'Expressions')/p"/>
		<test value="key('mykey', 'Introduction')/p"/>
		<test value="key('mykey', 'Patterns')"/>
		<test value="key('mykey', 'Second Title in Structure')/p"/>
		<test value="key('mykey', 'Stylesheet Structure')"/>
		<test value="key('mykey', 'Stylesheet Structure')/p"/>
		<test value="key('mykey', 1 )/p"/>
		<test value="key('mykey', 1+1 )/p"/>
		<test value="key('mykey', 3.0 )/p"/>
		<test value="key('mykey', 3.7 )/p"/>
		<test value="key('mykey',' ')/@title"/>
		<test value="key('mykey','')/p"/>
		<test value="key('mykey','Exp Section')/@title"/>
		<test value="key('mykey','Expressions')/p"/>
		<test value="key('mykey','Expressions')/p"/>
		<test value="key('mykey','Intro Section')/@title"/>
		<test value="key('mykey','Introduction')/p"/>
		<test value="key('mykey','Introduction')/p"/>
		<test value="key('mykey','SS Section')/@title"/>
		<test value="key('mykey','Sort Section')/@title"/>
		<test value="key('mykey','Sorting')/p"/>
		<test value="key('mykey','Sorting')/p"/>
		<test value="key('mykey','Stylesheet Structure')/p"/>
		<test value="key('mykey','Stylesheet Structure')/p"/>
		<test value="key('mykey',*//title)"/>
		<test value="key('mykey1','foo' )/p"/>
		<test value="key('mykey2', 1 )/p"/>
		<test value="key('one','3') | key('two','3')"/>
		<test value="key('smallspace', 'Expressions')/p"/>
		<test value="key('smallspace', 'Expressions')/p"/>
		<test value="key('smallspace', 'Introduction')/p"/>
		<test value="key('smallspace', 'Introduction')/p"/>
		<test value="key('smallspace', 'Stylesheet Structure')/p"/>
		<test value="key('smallspace', 'Stylesheet Structure')/p"/>
		<test value="key('test','foey')"/>
		<test value="key('titles', .)"/>
		<test value="key('two','3') | document('select59.xml')/child[@wide='3'] | child[@deep='3']"/>
		<test value="key('which','3')"/>
		<test value="keyword[@tag='sector']"/>
		<test value="keyword[@tag='ticker']"/>
		<test value="keyword[@tag='ticker']"/>
		<test value="keyword[@tag='ticker']"/>
		<test value="keyword[@tag='ticker']"/>
		<test value="lang('en')"/>
		<test value="last()"/>
		<test value="local-name()"/>
		<test value="local-name(.)"/>
		<test value="local-name(baz1:a)"/>
		<test value="local-name(baz2:b)"/>
		<test value="local-name(baz2:b/@baz1:attrib2)"/>
		<test value="local-name(namespace::*[1])"/>
		<test value="local-name(namespace::*[string()='http://www.w3.org/1999/XMLSchema-instance'])"/>
		<test value="local-name(namespace::*[string()='test'])"/>
		<test value="local-name(xalan:nodeset($rtf)/*)"/>
		<test value="main/a/descendant-or-self::*/@*"/>
		<test value="main/size[@for='d']"/>
		<test value="mi | do | fa | re"/>
		<test value="mi[@mi2='mi2'] | do | fa/so/@so | fa | mi/@* | re | fa/@fa | do/@do"/>
		<test value="month"/>
		<test value="month"/>
		<test value="month"/>
		<test value="n"/>
		<test value="n-2 - -n-1"/>
		<test value="n-2 - n-1"/>
		<test value="n-2+-n-1"/>
		<test value="n0 div n1 div n2 div n3 div n4 div n5"/>
		<test value="n0 div n1 div n2 div n3 div n4"/>
		<test value="n0 div n1 div n2 div n3"/>
		<test value="n1 div n2"/>
		<test value="n1 mod n2"/>
		<test value="n1*n2"/>
		<test value="n1*n2*n3*n4"/>
		<test value="n1*n2*n3*n4*n5*n6*n7*n8*n9*n10"/>
		<test value="n1+n2"/>
		<test value="n1/@attrib + n2/@attrib"/>
		<test value="n1/@attrib div n2/@attrib"/>
		<test value="n1/@attrib mod n2/@attrib"/>
		<test value="n2+3+$anum+7+n5"/>
		<test value="n4"/>
		<test value="n6*5-8*n2+5*2"/>
		<test value="name"/>
		<test value="name"/>
		<test value="name"/>
		<test value="name"/>
		<test value="name"/>
		<test value="name"/>
		<test value="name"/>
		<test value="name((ancestor::section|../ednote           |following::title|../bogus)[1])"/>
		<test value="name((ancestor::section|ancestor::simplesect           |ancestor::article)[last()])"/>
		<test value="name(/descendant-or-self::node()/child::near-north)"/>
		<test value="name(/descendant-or-self::node()/descendant-or-self::north)"/>
		<test value="name(/descendant-or-self::north)"/>
		<test value="name(/descendant-or-self::north/child::near-north)"/>
		<test value="name(/descendant-or-self::north/descendant-or-self::north)"/>
		<test value="name(/descendant::near-north)"/>
		<test value="name(/descendant::near-north/descendant-or-self::near-north)"/>
		<test value="name(/descendant::node()/descendant-or-self::near-north)"/>
		<test value="name(ancestor::*[1])"/>
		<test value="name(ancestor::*[1])"/>
		<test value="name(ancestor::*[2])"/>
		<test value="name(ancestor::*[2])"/>
		<test value="name(ancestor::*[3])"/>
		<test value="name(ancestor::*[3])"/>
		<test value="name(baz1:a)"/>
		<test value="name(baz1:a/@baz2:attrib1)"/>
		<test value="name(baz2:b)"/>
		<test value="name(baz2:b/@baz1:attrib2)"/>
		<test value="name(descendant-or-self::node()/child::near-north)"/>
		<test value="name(descendant-or-self::node()/child::node()/child::far-west)"/>
		<test value="name(descendant-or-self::node()/child::node()/descendant-or-self::near-north)"/>
		<test value="name(descendant-or-self::node()/descendant-or-self::node()/child::near-north)"/>
		<test value="name(descendant-or-self::node()/descendant-or-self::node()/descendant-or-self::north)"/>
		<test value="name(descendant-or-self::node()/descendant-or-self::north)"/>
		<test value="name(descendant-or-self::node()/descendant::near-north)"/>
		<test value="name(descendant-or-self::node()/descendant::node()/child::far-west)"/>
		<test value="name(descendant-or-self::node()/descendant::node()/descendant-or-self::near-north)"/>
		<test value="name(descendant-or-self::north/child::near-north)"/>
		<test value="name(descendant-or-self::north/child::near-north/child::far-west)"/>
		<test value="name(descendant-or-self::north/child::near-north/descendant-or-self::near-north)"/>
		<test value="name(descendant-or-self::north/descendant-or-self::north)"/>
		<test value="name(descendant-or-self::north/descendant-or-self::north/child::near-north)"/>
		<test value="name(descendant-or-self::north/descendant-or-self::north/descendant-or-self::north)"/>
		<test value="name(descendant-or-self::north/descendant::near-north)"/>
		<test value="name(descendant-or-self::north/descendant::near-north/child::far-west)"/>
		<test value="name(descendant-or-self::north/descendant::near-north/descendant-or-self::near-north)"/>
		<test value="name(descendant::near-north/descendant-or-self::near-north)"/>
		<test value="name(descendant::near-north/descendant-or-self::near-north/child::far-west)"/>
		<test value="name(descendant::near-north/descendant-or-self::near-north/descendant-or-self::near-north)"/>
		<test value="name(descendant::near-north/descendant::far-west)"/>
		<test value="name(descendant::near-north/descendant::far-west/descendant-or-self::far-west)"/>
		<test value="name(descendant::node()/descendant-or-self::near-north)"/>
		<test value="name(descendant::node()/descendant-or-self::node()/child::far-west)"/>
		<test value="name(descendant::node()/descendant-or-self::node()/descendant-or-self::near-north)"/>
		<test value="name(descendant::node()/descendant::far-west)"/>
		<test value="name(descendant::node()/descendant::node()/descendant-or-self::far-west)"/>
		<test value="name(namespace::*[1])"/>
		<test value="name(self::node()/descendant-or-self::node()/child::near-north)"/>
		<test value="name(self::node()/descendant-or-self::node()/descendant-or-self::north)"/>
		<test value="name(self::node()/descendant-or-self::north)"/>
		<test value="name(self::node()/descendant-or-self::north/child::near-north)"/>
		<test value="name(self::node()/descendant-or-self::north/descendant-or-self::north)"/>
		<test value="name(self::node()/descendant::near-north)"/>
		<test value="name(self::node()/descendant::near-north/child::far-west)"/>
		<test value="name(self::node()/descendant::near-north/descendant-or-self::far-west)"/>
		<test value="name(self::node()/descendant::node()/child::far-west)"/>
		<test value="name(self::node()/descendant::node()/descendant-or-self::far-west)"/>
		<test value="name(xalan:nodeset($rtf)/*)"/>
		<test value="namespace-uri(baz1:a-two/@attrib1)"/>
		<test value="namespace-uri(baz1:a/@baz2:attrib1)"/>
		<test value="namespace-uri(baz2:b)"/>
		<test value="namespace-uri(baz2:b-three)"/>
		<test value="namespace-uri(baz2:b-three/@baz1:attrib2)"/>
		<test value="namespace-uri(baz2:b-three/c-four)"/>
		<test value="namespace-uri(baz2:b/@baz1:attrib2)"/>
		<test value="namespace-uri(namespace::*[string()='http://www.w3.org/1999/XMLSchema-instance'])"/>
		<test value="namespace-uri(namespace::*[string()='test'])"/>
		<test value="namespace-uri(x)"/>
		<test value="namespace-uri(xalan:nodeset($rtf)/default:docelem)"/>
		<test value="namespace-uri(xalan:nodeset($rtf)/default:docelem/default:elem1)"/>
		<test value="namespace-uri(xalan:nodeset($rtf)/default:docelem/test:elem3)"/>
		<test value="namespace::*"/>
		<test value="namespace::node()"/>
		<test value="nitro:element(.)"/>
		<test value="node"/>
		<test value="node()|@*"/>
		<test value="normalize-space($texts[1])"/>
		<test value="normalize-space($thisvalue)"/>
		<test value="normalize-space('	&#10;&#13;        ab           cd	&#10;&#13;       ef	&#10;&#13; ')"/>
		<test value="normalize-space()"/>
		<test value="normalize-space(a)"/>
		<test value="north/* | north/dup1 | north/dup2"/>
		<test value="north/dup2 | document('select71.xml')/south/preceding-sibling[4] | north/*"/>
		<test value="north/dup2 | north/dup1 | north/*"/>
		<test value="not($x!='foo')"/>
		<test value="not('')"/>
		<test value="not('0')"/>
		<test value="not(false() = false())"/>
		<test value="not(false())"/>
		<test value="not(true() = false())"/>
		<test value="not(true())"/>
		<test value="note[1]"/>
		<test value="note[1]"/>
		<test value="number($ResultTreeFragTest)"/>
		<test value="number($emptyResultTreeFragTest)"/>
		<test value="number($pvar2)"/>
		<test value="number('')"/>
		<test value="number('3')"/>
		<test value="number('abc')"/>
		<test value="number('xxx') - 10"/>
		<test value="number('xxx') div 3"/>
		<test value="number('xxx') mod 3"/>
		<test value="number('xxx')=0"/>
		<test value="number('xxx')=number('xxx')"/>
		<test value="number()"/>
		<test value="number(2)"/>
		<test value="number(false())=0"/>
		<test value="number(foo)"/>
		<test value="number(n1)"/>
		<test value="number(string(1.0))=1"/>
		<test value="number(true())=1"/>
		<test value="number(xalan:nodeset($rtf)/default:docelem/default:elem3[2])"/>
		<test value="para[@id='1' and lang('en')]"/>
		<test value="parent::*"/>
		<test value="parent::*[1]"/>
		<test value="parent::foo"/>
		<test value="parent::near-north"/>
		<test value="position()"/>
		<test value="position()=1"/>
		<test value="preceding-sibling::*"/>
		<test value="preceding-sibling::*/following-sibling::*"/>
		<test value="preceding-sibling::*[2]"/>
		<test value="preceding-sibling::*[2]"/>
		<test value="preceding-sibling::*[2]/following-sibling::*"/>
		<test value="preceding-sibling::*[2]/following-sibling::*[4]"/>
		<test value="preceding-sibling::*[2]/following-sibling::*[4]/preceding-sibling::*[5]/following-sibling::*[4]/following-sibling::*[2]"/>
		<test value="preceding-sibling::*|following-sibling::*"/>
		<test value="preceding-sibling::child1|//child3"/>
		<test value="preceding-sibling::child1|following-sibling::child3"/>
		<test value="preceding-sibling::foo[1]/@att1"/>
		<test value="preceding-sibling::west"/>
		<test value="preceding::*"/>
		<test value="preceding::*[2]/../descendant::*[10]/following-sibling::east"/>
		<test value="preceding::*[2]/../following::*"/>
		<test value="preceding::*[4]"/>
		<test value="preceding::foo[1]/@att1"/>
		<test value="preceding::out-yonder-west"/>
		<test value="preceding::text()"/>
		<test value="preceding::text()[$this]"/>
		<test value="primary/name/first"/>
		<test value="primary/name/first"/>
		<test value="processing-instruction()"/>
		<test value="pt:xif('test')"/>
		<test value="pt:xif(string($val))"/>
		<test value="round(-1.1)=-1"/>
		<test value="round(-1.5)"/>
		<test value="round(-1.9)=-2"/>
		<test value="round(-2.5)=-2"/>
		<test value="round(0.0)"/>
		<test value="round(1.1)=1"/>
		<test value="round(1.24)"/>
		<test value="round(1.5)=2"/>
		<test value="round(1.9)=2"/>
		<test value="round(2.5)"/>
		<test value="round(2.999999)"/>
		<test value="round(count(.//LINE) div count(.//SPEECH))"/>
		<test value="round(n0)"/>
		<test value="round(n1)"/>
		<test value="round(n2)"/>
		<test value="round(number('xxx'))"/>
		<test value="row"/>
		<test value="self::*"/>
		<test value="self::*"/>
		<test value="self::*[1]"/>
		<test value="self::*[@center-attr-2]"/>
		<test value="self::*[near-south]"/>
		<test value="self::center"/>
		<test value="self::child1|self::child2"/>
		<test value="self::comment()"/>
		<test value="self::foo"/>
		<test value="self::node()"/>
		<test value="self::node()"/>
		<test value="self::node()"/>
		<test value="self::node()"/>
		<test value="self::processing-instruction()"/>
		<test value="self::text()"/>
		<test value="sigs"/>
		<test value="sss//i"/>
		<test value="sss//i"/>
		<test value="sss/sss"/>
		<test value="sss/sss"/>
		<test value="starts-with('','')"/>
		<test value="starts-with('ENCYCLOPEDIA', 'EN')"/>
		<test value="starts-with('ENCYCLOPEDIA', 'ENCY')"/>
		<test value="starts-with('ENCYCLOPEDIA', 'en')"/>
		<test value="starts-with('ab', 'abc')"/>
		<test value="starts-with('abc', '')"/>
		<test value="starts-with('abc', 'bc')"/>
		<test value="starts-with('true()', 'tr')"/>
		<test value="starts-with(doc, 'ENCY')"/>
		<test value="starts-with(doc, 'test')"/>
		<test value="starts-with(doc/@attr, 'slam')"/>
		<test value="starts-with(doc/@attr, 'wich')"/>
		<test value="str:new(string(doc))"/>
		<test value="str:toUpperCase($str-obj)"/>
		<test value="string($ResultTreeFragTest)"/>
		<test value="string($ResultTreeFragTest)"/>
		<test value="string($emptyResultTreeFragTest)"/>
		<test value="string($which)"/>
		<test value="string('!From m!')"/>
		<test value="string('!From n!')"/>
		<test value="string('!From o!')"/>
		<test value="string('!From p!')"/>
		<test value="string('')"/>
		<test value="string('test')"/>
		<test value="string()"/>
		<test value="string()"/>
		<test value="string(0)"/>
		<test value="string(2)"/>
		<test value="string(av//*)"/>
		<test value="string(doc)"/>
		<test value="string(foo)"/>
		<test value="string-length ()"/>
		<test value="string-length($str)"/>
		<test value="string-length('This is a test')"/>
		<test value="string-length()"/>
		<test value="string-length()"/>
		<test value="string-length(.)"/>
		<test value="string-length(doc)"/>
		<test value="string-length(doc/a)"/>
		<test value="sub1/child1|/doc/sub2/child2"/>
		<test value="sub1/child1|sub2/child2"/>
		<test value="subj"/>
		<!-- arg value="substring(&quot;12345&quot;, -1 div 0, 1 div 0)"/>
		<test value="substring(&quot;12345&quot;, -42, 1 div 0)"/>
		<test value="substring(&quot;12345&quot;, 0 div 0, 3)"/>
		<test value="substring(&quot;12345&quot;, 0, 3)"/>
		<test value="substring(&quot;12345&quot;, 1, 0 div 0)"/>
		<test value="substring(&quot;12345&quot;, 1.5, 2.6)"/ -->
		<test value="substring('1999/04/01', 1, 0)"/>
		<test value="substring('1999/04/01', 1, 4)"/>
		<test value="substring('ENCYCLOPEDIA', 8)"/>
		<test value="substring('ENCYCLOPEDIA', 8, 3)"/>
		<test value="substring('abcdefghi',2,4)"/>
		<test value="substring('abcdefghijk',0 div 0, 5)"/>
		<test value="substring('abcdefghijk',4, 6)"/>
		<test value="substring(@key,2,1)"/>
		<test value="substring(doc, 1, 4)"/>
		<test value="substring(doc/@attr, 1, 3)"/>
		<test value="substring(doc/@attr, 2.5, 3.6)"/>
		<test value="substring(doc/@attr, 4)"/>
		<test value="substring(foo, 12, 3)"/>
		<test value="substring(foo, 2, 2)"/>
		<test value="substring-after($words,' ')"/>
		<test value="substring-after('1999/04/01', '/')"/>
		<test value="substring-after('1999/04/01', '1')"/>
		<test value="substring-after('ENCYCLOPEDIA', '/')"/>
		<test value="substring-after('ENCYCLOPEDIA', 'C')"/>
		<test value="substring-after('abcdefghijk','l')"/>
		<test value="substring-after(doc, '/')"/>
		<test value="substring-after(doc/@attr, 'D')"/>
		<test value="substring-after(doc/@attr, 'd')"/>
		<test value="substring-after(doc/@attr, 'z')"/>
		<test value="substring-after(foo, '/')"/>
		<test value="substring-before('1999/04/01', '/')"/>
		<test value="substring-before('ENCYCLOPEDIA', '/')"/>
		<test value="substring-before('ENCYCLOPEDIA', 'C')"/>
		<test value="substring-before('ENCYCLOPEDIA', 'c')"/>
		<test value="substring-before('a','z')"/>
		<test value="substring-before(doc, '/')"/>
		<test value="substring-before(doc/@attr, 'D')"/>
		<test value="substring-before(doc/@attr, 'd')"/>
		<test value="substring-before(doc/@attr, 'z')"/>
		<test value="substring-before(foo, '/')"/>
		<test value="sum($rtf)"/>
		<test value="sum(e)"/>
		<test value="sum(e)"/>
		<test value="sum(n)"/>
		<test value="sum(n/@attrib)"/>
		<test value="sum(x)"/>
		<test value="sum(xalan:nodeset($rtf)/default:docelem/default:elem3)"/>
		<test value="system-property('xsl:vendor')"/>
		<!-- arg value="translate(&quot;B'B&quot;,&quot;'&quot;,&quot;`&quot;)"/>
		<test value="translate(&quot;BAR&quot;,&quot;Rab&quot;,&quot;TxX&quot;)"/>
		<test value="translate(&quot;BAR&quot;,&quot;abc&quot;,&quot;ABC&quot;)"/>
		<test value="translate(&quot;bar&quot;,&quot;RAB&quot;,&quot;xyz&quot;)"/>
		<test value="translate(&quot;bar&quot;,&quot;abc&quot;,&quot;ABC&quot;)"/>
		<test value="translate(&quot;ddaaadddd&quot;,&quot;abcd&quot;,&quot;ABCxy&quot;)"/>
		<test value="translate(&quot;zzaaazzz&quot;,&quot;abcz&quot;,&quot;ABC&quot;)"/>
		<test value="translate(.,'abcdefghijklmnopqrstuvwxyz','ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/>
		<test value="translate(a,&quot;abc&quot;,&quot;ABC&quot;)"/>
		<test value="translate(a/@attrib,&quot;lo&quot;,&quot;IT&quot;)"/>
		<test value="translate(b,&quot;ABC&quot;,&quot;abc&quot;)"/>
		<test value="translate(b/@attrib,&quot;LO&quot;,&quot;it&quot;)"/>
		<test value="translate(b/@attrib,&quot;lo&quot;,&quot;it&quot;)"/>
		<test value="translate(normalize-space($s), &quot; &quot;, &quot;_&quot;)"/ -->
		<test value="true() and false()"/>
		<test value="true() and true()"/>
		<test value="true() or 1 div 0"/>
		<test value="true() or false()"/>
		<test value="true() or true()"/>
		<test value="true()"/>
		<test value="true()=2"/>
		<test value="width * depth"/>
		<test value="xalan:nodeset($rtf)/default:docelem"/>
		<test value="xalan:nodeset($rtf)/default:docelem/*"/>
		<test value="xalan:nodeset($rtf)/default:docelem/default:elem1"/>
		<test value="xalan:nodeset($rtf)/default:docelem/default:elem1/default:elem1b"/>
		<test value="xalan:nodeset($rtf)/default:docelem/default:elem2/*"/>
		<test value="xalan:nodeset($rtf)/default:docelem/default:elem4"/>
		<test value="xalan:nodeset($rtf)/default:docelem/test:elem3"/>
		<test value="xalan:nodeset($sorted)/item"/>
    <test value="deep-equal(/,foo)"/>
</tests>
