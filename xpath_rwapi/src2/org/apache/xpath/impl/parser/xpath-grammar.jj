/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. C:/data/projects/xml-xalan-xslt20/java/xpath_rwapi/src2/org/apache/xpath/impl/parser\xpath-grammar.jj */
/*@egen*/options {

	  
    STATIC = false;                                                                                                                                                                                                                                         
	
}


    PARSER_BEGIN(XPath)


package org.apache.xpath.impl.parser;
	
		
import java.util.Stack;

public class XPath/*@bgen(jjtree)*/implements XPathTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTXPathState jjtree = new JJTXPathState();

/*@egen*/
      
    // Begin generated by etree.xsl:extra-parser-code 
    org.apache.xpath.patterns.FunctionPattern m_matchFunc = null; // short lived.

    int m_predLevel = 0;

    /**
     * Node factory for customized parser.  
     */
    NodeFactory m_nodeFactory;

    /**
     * Sets the node factory.  
     * @param nodeFactory to use.
     */
    public void setNodeFactory(NodeFactory nodeFactory) {      		
    	m_nodeFactory = nodeFactory;
    }

    /**
     * Returns the node factory.  
     * @return NodeFactory
     */
    public NodeFactory getNodeFactory() {
    	return m_nodeFactory;
    }

    /**
     * The "version" property as pertains to the XPath spec.
     * @serial
     */
    private double m_version;

    /**
     * Set the "version" property for XPath.
     *
     * @param v Value for the "version" property.
     */
    public void setVersion(double v)
    {
        m_version = v;
    }

    /**
     * Get the "version" property for XPath.
     *
     * @return The value of the "version" property.
     */
    public double getVersion()
    {
        return m_version;
    }
    // end generated by etree.xsl:extra-parser-code 

    

      boolean m_isMatchPattern = false;

		  Stack binaryTokenStack = new Stack();
		  
		  public Node createNode(int id) {
			  return null;
		  }
		  
		  
		  
		  public static void main(String args[])
		     throws Exception
		  {
         int numberArgsLeft = args.length;
         int argsStart = 0;
         boolean isMatchParser = false;
         if(numberArgsLeft > 0)
         {
           if(args[argsStart].equals("-match"))
           {
             isMatchParser = true;
             System.out.println("Match Pattern Parser");
             argsStart++;
             numberArgsLeft--;
           }
         }
		     if(numberArgsLeft > 0)
		    {
			try
			{
				for(int i = argsStart; i < args.length; i++)
				{
					System.out.println();
					System.out.println("Test["+i+"]: "+args[i]);
					XPath parser = new XPath(new java.io.StringBufferInputStream(args[i]));
          SimpleNode tree;
          if(isMatchParser)
          {
					tree = parser.MatchPattern();
          }
          else
          {
					tree = parser.XPath2();
          }
					((SimpleNode)tree.jjtGetChild(0)).dump("|") ;
				}
				System.out.println("Success!!!!");
			}
			catch(ParseException pe)
			{
				System.err.println(pe.getMessage());
			}
			return;
		   }
		    java.io.DataInputStream dinput = new java.io.DataInputStream(System.in);
		    while(true)
		    {
			  try
			  {
			      System.err.println("Type Expression: ");
			      String input =  dinput.readLine(); 
			      if(null == input || input.trim().length() == 0)
			        break;  
			      XPath parser = new XPath(new java.io.StringBufferInputStream(input));
          SimpleNode tree;
          if(isMatchParser)
          {
					tree = parser.MatchPattern();
          }
          else
          {
					tree = parser.XPath2();
          }
			      ((SimpleNode)tree.jjtGetChild(0)).dump("|") ;
			  }
			  catch(ParseException pe)
			  {
			  	System.err.println(pe.getMessage());
			  }
			  catch(Exception e)
			  {
			  	System.err.println(e.getMessage());
			  }
		    }		    
		  }
		}

    PARSER_END(XPath)

	

// jwr: why doesn't this use java.util.Stack() instead of java.util.Vector()?

TOKEN_MGR_DECLS : {
  private Stack stateStack = new Stack();
  static final int PARENMARKER = 2000;
  
  /**
   * Push the current state onto the state stack.
   */
  private void pushState()
  {
    stateStack.addElement(new Integer(curLexState));
  }
  
  /**
   * Push the given state onto the state stack.
   * @param state Must be a valid state.
   */
  private void pushState(int state)
  {
    stateStack.push(new Integer(state));
  }
  
  /**
   * Pop the state on the state stack, and switch to that state.
   */
  private void popState()
  {
    if (stateStack.size() == 0)
    {
      printLinePos();
    }

    int nextState = ((Integer) stateStack.pop()).intValue();
    if(nextState == PARENMARKER)
      printLinePos();
    SwitchTo(nextState);
  }

  /**
   * Push a parenthesis state.  This pushes, in addition to the 
   * lexical state value, a special marker that lets 
   * resetParenStateOrSwitch(int state)
   * know if it should pop and switch.  Used for the comma operator.
   */
  private void pushParenState(int commaState, int rparState)
  {
    stateStack.push(new Integer(rparState));
    stateStack.push(new Integer(commaState));
    stateStack.push(new Integer(PARENMARKER));
    SwitchTo(commaState);
  }


//  /**
//   * Push a parenthesis state.  This pushes, in addition to the 
//   * lexical state value, a special marker that lets 
//   * resetParenStateOrSwitch(int state)
//   * know if it should pop and switch.  Used for the comma operator.
//   */
//  private void pushParenState()
//  {
//    stateStack.push(new Integer(curLexState));
//    stateStack.push(new Integer(PARENMARKER));
//  }

  /**
   * If a PARENMARKER is on the stack, switch the state to 
   * the state underneath the marker.  Leave the stack in 
   * the same state.  If the stack is zero, do nothing.
   * @param state The state to switch to if the PARENMARKER is not found.
   */
  private void resetParenStateOrSwitch(int state)
  {
    if (stateStack.size() == 0)
    {
      SwitchTo(state);
      return;
    }

    int nextState = ((Integer) stateStack.peek()).intValue();
    if (PARENMARKER == nextState)
    {
      // Wait for right paren to do the pop!
      Integer intObj = (Integer) stateStack.elementAt(stateStack.size() - 2);
      nextState = intObj.intValue();
      SwitchTo(nextState);
    }
    else
      SwitchTo(state);
  }
  
//   /**
//    * Pop the lexical state stack two elements.
//    */
// private void popParenState()
//   {
//     if (stateStack.size() == 0)
//       return;
// 
//     int nextState = ((Integer) stateStack.peek()).intValue();
//     if (PARENMARKER == nextState)
//     {
//       stateStack.pop();
//       stateStack.pop();
//     }
//   }

  /**
   * Pop the lexical state stack two elements.
   */
  private void popParenState()
  {
    if (stateStack.size() == 0)
      return;

    int nextState = ((Integer) stateStack.peek()).intValue();
    if (PARENMARKER == nextState)
    {
      stateStack.pop();
      stateStack.pop();
      int rparState = ((Integer) stateStack.peek()).intValue();
      SwitchTo(rparState);
      stateStack.pop();
    }
  }

  /**
   * Print the current line position.
   */
  public void printLinePos()
  {
    System.err.println("Line: " + input_stream.getEndLine());
  }
}


		SimpleNode XPath2() :
		{/*@bgen(jjtree) XPath2 */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTXPATH2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
		{/*@bgen(jjtree) XPath2 */
                  try {
/*@egen*/
		  XPath()<EOF>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/
		  { return jjtn000 ; }/*@bgen(jjtree)*/
                  } catch (Throwable jjte000) {
                    if (jjtc000) {
                      jjtree.clearNodeScope(jjtn000);
                      jjtc000 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte000 instanceof RuntimeException) {
                      throw (RuntimeException)jjte000;
                    }
                    if (jjte000 instanceof ParseException) {
                      throw (ParseException)jjte000;
                    }
                    throw (Error)jjte000;
                  } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
                  }
/*@egen*/
		}
      
		SimpleNode MatchPattern() :
		{/*@bgen(jjtree) MatchPattern */
                 SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTMATCHPATTERN);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/m_isMatchPattern = true;}
		{/*@bgen(jjtree) MatchPattern */
                  try {
/*@egen*/
		  Pattern()<EOF>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/
		  { return jjtn000 ; }/*@bgen(jjtree)*/
                  } catch (Throwable jjte000) {
                    if (jjtc000) {
                      jjtree.clearNodeScope(jjtn000);
                      jjtc000 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte000 instanceof RuntimeException) {
                      throw (RuntimeException)jjte000;
                    }
                    if (jjte000 instanceof ParseException) {
                      throw (ParseException)jjte000;
                    }
                    throw (Error)jjte000;
                  } finally {
                    if (jjtc000) {
                      jjtree.closeNodeScope(jjtn000, true);
                    }
                  }
/*@egen*/
		}
    <DEFAULT, OPERATOR>
TOKEN :
{
  < IntegerLiteral : <Digits> > : OPERATOR
}

<DEFAULT, OPERATOR>
TOKEN :
{
  < DecimalLiteral : (("." <Digits>) | (<Digits> "." (["0" - "9"])*)) > : OPERATOR
}

<DEFAULT, OPERATOR>
TOKEN :
{
  < DoubleLiteral : (("." <Digits>) | (<Digits> ("." (["0" - "9"])*)?)) ["e", "E"] (["+", "-"])? <Digits> > : OPERATOR
}

<DEFAULT, OPERATOR, NAMESPACEKEYWORD>
TOKEN :
{
  < StringLiteral : (("\"" ((("\"" "\"") | ~["\""]))* "\"") | ("'" ((("'" "'") | ~["'"]))* "'")) > : OPERATOR
}

<DEFAULT, OPERATOR, QNAME, NAMESPACEDECL, XMLSPACE_DECL, ITEMTYPE, NAMESPACEKEYWORD, VARNAME, ELEMENT_CONTENT>
SPECIAL_TOKEN :
{
  < ExprComment : "{--" (~["}"])* "--}" >
}

<DEFAULT, OPERATOR, QNAME, NAMESPACEDECL, XMLSPACE_DECL, ITEMTYPE, NAMESPACEKEYWORD, VARNAME>
SKIP:
{
  <<skip_>>
}

TOKEN :
{
  < #skip_ : ((<WhitespaceChar> | <ExprComment>))+  >
}

<DEFAULT, OPERATOR, QNAME, START_TAG, NAMESPACEDECL, ITEMTYPE, NAMESPACEKEYWORD, END_TAG>
TOKEN :
{
  < S : (<WhitespaceChar>)+  >
}

<DEFAULT, QNAME>
TOKEN :
{
  < AxisChild : "child" (<skip_>)* "::" > : QNAME
}

<DEFAULT, QNAME>
TOKEN :
{
  < AxisDescendant : "descendant" (<skip_>)* "::" > : QNAME
}

<DEFAULT, QNAME>
TOKEN :
{
  < AxisParent : "parent" (<skip_>)* "::" > : QNAME
}

<DEFAULT, QNAME>
TOKEN :
{
  < AxisAttribute : "attribute" (<skip_>)* "::" > : QNAME
}

<DEFAULT, QNAME>
TOKEN :
{
  < AxisSelf : "self" (<skip_>)* "::" > : QNAME
}

<DEFAULT, QNAME>
TOKEN :
{
  < AxisDescendantOrSelf : "descendant-or-self" (<skip_>)* "::" > : QNAME
}

<DEFAULT, QNAME>
TOKEN :
{
  < AxisAncestor : "ancestor" (<skip_>)* "::" > : QNAME
}

<DEFAULT, QNAME>
TOKEN :
{
  < AxisFollowingSibling : "following-sibling" (<skip_>)* "::" > : QNAME
}

<DEFAULT, QNAME>
TOKEN :
{
  < AxisPrecedingSibling : "preceding-sibling" (<skip_>)* "::" > : QNAME
}

<DEFAULT, QNAME>
TOKEN :
{
  < AxisFollowing : "following" (<skip_>)* "::" > : QNAME
}

<DEFAULT, QNAME>
TOKEN :
{
  < AxisPreceding : "preceding" (<skip_>)* "::" > : QNAME
}

<DEFAULT, QNAME>
TOKEN :
{
  < AxisNamespace : "namespace" (<skip_>)* "::" > : QNAME
}

<DEFAULT, QNAME>
TOKEN :
{
  < AxisAncestorOrSelf : "ancestor-or-self" (<skip_>)* "::" > : QNAME
}

<OPERATOR>
TOKEN :
{
  < Or : "or" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < And : "and" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < Div : "div" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < Idiv : "idiv" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < Mod : "mod" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < Multiply : "*" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < In : "in" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < InContext : "context" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < Satisfies : "satisfies" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < Return : "return" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < Then : "then" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < Else : "else" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < To : "to" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < Intersect : "intersect" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < Union : "union" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < Except : "except" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < Instanceof : "instance" (<skip_>)+ "of" > : ITEMTYPE
}

<OPERATOR>
TOKEN :
{
  < Castable : "castable" (<skip_>)+ "as" > : ITEMTYPE
}

<ITEMTYPE>
TOKEN :
{
  < Item : "item" > : DEFAULT
}

<ITEMTYPE>
TOKEN :
{
  < ElementType : "element" > : DEFAULT
}

<ITEMTYPE>
TOKEN :
{
  < AttributeType : "attribute" > : DEFAULT
}

<DEFAULT>
TOKEN :
{
  < ElementQNameLbrace : "element" (<skip_>)+ <QName> (<skip_>)* "{" > { pushState(DEFAULT); } : DEFAULT
}

<DEFAULT>
TOKEN :
{
  < AttributeQNameLbrace : "attribute" (<skip_>)+ <QName> (<skip_>)* "{" > { pushState(DEFAULT); } : DEFAULT
}

<DEFAULT>
TOKEN :
{
  < ElementLbrace : "element" (<skip_>)* "{" > { pushState(DEFAULT); } : DEFAULT
}

<DEFAULT>
TOKEN :
{
  < AttributeLbrace : "attribute" (<skip_>)* "{" > { pushState(DEFAULT); } : DEFAULT
}

<DEFAULT, OPERATOR>
TOKEN :
{
  < DefaultCollationEquals : "default" (<skip_>)+ "collation" (<skip_>)+ "=" > : NAMESPACEDECL
}

<DEFAULT, OPERATOR>
TOKEN :
{
  < DefaultElement : "default" (<skip_>)+ "element" > : NAMESPACEKEYWORD
}

<DEFAULT, OPERATOR>
TOKEN :
{
  < DefaultFunction : "default" (<skip_>)+ "function" > : NAMESPACEKEYWORD
}

<DEFAULT, OPERATOR>
TOKEN :
{
  < OfType : "of" (<skip_>)+ "type" > : QNAME
}

<ITEMTYPE>
TOKEN :
{
  < AtomicValue : "atomic" (<skip_>)+ "value" > : DEFAULT
}

<DEFAULT>
TOKEN :
{
  < TypeQName : "type" (<skip_>)+ <QName> > : OPERATOR
}

<ITEMTYPE>
TOKEN :
{
  < Node : "node" > : DEFAULT
}

<ITEMTYPE>
TOKEN :
{
  < Empty : "empty" > : DEFAULT
}

TOKEN :
{
  < #Nmstart : (<Letter> | "_") >
}

TOKEN :
{
  < #Nmchar : (<Letter> | <CombiningChar> | <Extender> | <Digit> | "." | "-" | "_") >
}

<DEFAULT, QNAME>
TOKEN :
{
  < Star : "*" > : OPERATOR
}

<ITEMTYPE, QNAME, DEFAULT, OPERATOR>
TOKEN :
{
  < NCNameColonStar : <NCName> ":" "*" > : OPERATOR
}

<ITEMTYPE, QNAME, DEFAULT, OPERATOR>
TOKEN :
{
  < StarColonNCName : "*" ":" <NCName> > : OPERATOR
}

<DEFAULT, QNAME>
TOKEN :
{
  < Root : "/" > : QNAME
}

<DEFAULT, QNAME>
TOKEN :
{
  < RootDescendants : "//" > : QNAME
}

<OPERATOR>
TOKEN :
{
  < Slash : "/" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < SlashSlash : "//" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < Equals : "=" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < Is : "is" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < NotEquals : "!=" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < IsNot : "isnot" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < LtEquals : "<=" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < LtLt : "<<" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < GtEquals : ">=" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < GtGt : ">>" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < FortranEq : "eq" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < FortranNe : "ne" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < FortranGt : "gt" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < FortranGe : "ge" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < FortranLt : "lt" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < FortranLe : "le" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < Lt : "<" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < Gt : ">" > : DEFAULT
}

<DEFAULT, OPERATOR>
TOKEN :
{
  < Minus : "-" > : DEFAULT
}

<DEFAULT, OPERATOR>
TOKEN :
{
  < Plus : "+" > : DEFAULT
}

<DEFAULT, OPERATOR>
TOKEN :
{
  < QMark : "?" > : DEFAULT
}

<OPERATOR>
TOKEN :
{
  < Vbar : "|" > : DEFAULT
}

<DEFAULT, OPERATOR, QNAME>
TOKEN :
{
  < Lpar : "(" > : DEFAULT
}

<DEFAULT, QNAME>
TOKEN :
{
  < At : "@" > : QNAME
}

<DEFAULT, OPERATOR>
TOKEN :
{
  < Lbrack : "[" > : DEFAULT
}

<DEFAULT, OPERATOR>
TOKEN :
{
  < Rbrack : "]" > : OPERATOR
}

<DEFAULT, OPERATOR, ITEMTYPE, QNAME>
TOKEN :
{
  < Rpar : ")" > : OPERATOR
}

<DEFAULT, OPERATOR>
TOKEN :
{
  < Some : "some" (<skip_>)* <VariableIndicator> > : VARNAME
}

<DEFAULT, OPERATOR>
TOKEN :
{
  < Every : "every" (<skip_>)* <VariableIndicator> > : VARNAME
}

<DEFAULT, OPERATOR>
TOKEN :
{
  < ForVariable : "for" (<skip_>)* <VariableIndicator> > : VARNAME
}

<DEFAULT>
TOKEN :
{
  < CastAs : "cast" (<skip_>)+ "as" > : ITEMTYPE
}

<DEFAULT>
TOKEN :
{
  < TreatAs : "treat" (<skip_>)+ "as" > : ITEMTYPE
}

<DEFAULT, OPERATOR, ITEMTYPE>
TOKEN :
{
  < ValidateLbrace : "validate" (<skip_>)* "{" > { pushState(DEFAULT); } : DEFAULT
}

<DEFAULT>
TOKEN :
{
  < ValidateContext : "validate" (<skip_>)+ "context" > : DEFAULT
}

TOKEN :
{
  < #Digits : (["0" - "9"])+  >
}

<ITEMTYPE>
TOKEN :
{
  < Comment : "comment" > : DEFAULT
}

<ITEMTYPE>
TOKEN :
{
  < Document : "document" > : DEFAULT
}

<DEFAULT>
TOKEN :
{
  < DocumentLbrace : "document" (<skip_>)* "{" > { pushState(DEFAULT); } : DEFAULT
}

<ITEMTYPE>
TOKEN :
{
  < Text : "text" > : DEFAULT
}

<ITEMTYPE>
TOKEN :
{
  < Untyped : "untyped" > : DEFAULT
}

<ITEMTYPE>
TOKEN :
{
  < ProcessingInstruction : "processing-instruction" > : DEFAULT
}

<QNAME, DEFAULT>
TOKEN :
{
  < NodeLpar : "node" (<skip_>)* "(" > : DEFAULT
}

<QNAME, DEFAULT>
TOKEN :
{
  < CommentLpar : "comment" (<skip_>)* "(" > : DEFAULT
}

<QNAME, DEFAULT>
TOKEN :
{
  < TextLpar : "text" (<skip_>)* "(" > : DEFAULT
}

<QNAME, DEFAULT>
TOKEN :
{
  < ProcessingInstructionLpar : "processing-instruction" (<skip_>)* "(" > : DEFAULT
}

<DEFAULT>
TOKEN :
{
  < IfLpar : "if" (<skip_>)* "(" > : DEFAULT
}

<OPERATOR, DEFAULT, QNAME>
TOKEN :
{
  < Comma : "," > { resetParenStateOrSwitch(DEFAULT); }
}

<ITEMTYPE, QNAME, DEFAULT, OPERATOR>
TOKEN :
{
  < Dot : "." > : OPERATOR
}

<ITEMTYPE, QNAME, DEFAULT, OPERATOR>
TOKEN :
{
  < DotDot : ".." > : OPERATOR
}

TOKEN :
{
  < #NCName : <Nmstart> (<Nmchar>)* >
}

TOKEN :
{
  < #Prefix : <NCName> >
}

TOKEN :
{
  < #LocalPart : <NCName> >
}

<DEFAULT, OPERATOR, ITEMTYPE, QNAME>
TOKEN :
{
  < VariableIndicator : "$" > : VARNAME
}

<VARNAME>
TOKEN :
{
  < VarName : <QName> > : OPERATOR
}

<ITEMTYPE, QNAME, DEFAULT, OPERATOR>
TOKEN :
{
  < QName : (<Prefix> ":")? <LocalPart> > : OPERATOR
}

<DEFAULT>
TOKEN :
{
  < QNameLpar : <QName> (<skip_>)* "(" > : DEFAULT
}

void XPath()  :
{/*@bgen(jjtree) XPath */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTXPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) XPath */
  try {
/*@egen*/
  [ExprSequence()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExprSequence()  :
{/*@bgen(jjtree) ExprSequence */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTEXPRSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExprSequence */
  try {
/*@egen*/
  Expr() (<Comma> Expr())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Pattern()  :
{/*@bgen(jjtree) Pattern */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Pattern */
  try {
/*@egen*/
  PathPattern() [(<Union> | <Vbar>) Pattern()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PathPattern()  :
{/*@bgen(jjtree) PathPattern */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTPATHPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PathPattern */
  try {
/*@egen*/
  ((<Root>/*@bgen(jjtree) #Root( true) */
          {
            SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTROOT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001,  true);
            jjtc001 = false;
          }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  true);
            }
          }
/*@egen*/ [RelativePathPattern()]) | (<RootDescendants>/*@bgen(jjtree) #RootDescendants( true) */
                                                                                                  {
                                                                                                    SimpleNode jjtn002 = (SimpleNode)SimpleNode.jjtCreate(this, JJTROOTDESCENDANTS);
                                                                                                    boolean jjtc002 = true;
                                                                                                    jjtree.openNodeScope(jjtn002);
                                                                                                  }
                                                                                                  try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                  {
                                                                                                    jjtree.closeNodeScope(jjtn002,  true);
                                                                                                    jjtc002 = false;
                                                                                                  }
/*@egen*/{jjtn002.processToken(token);}/*@bgen(jjtree)*/
                                                                                                  } finally {
                                                                                                    if (jjtc002) {
                                                                                                      jjtree.closeNodeScope(jjtn002,  true);
                                                                                                    }
                                                                                                  }
/*@egen*/ RelativePathPattern()) | (IdKeyPattern() [(<Slash> | <SlashSlash>/*@bgen(jjtree) #SlashSlash( true) */
                                                                                                                                                                                                                         {
                                                                                                                                                                                                                           SimpleNode jjtn003 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSLASHSLASH);
                                                                                                                                                                                                                           boolean jjtc003 = true;
                                                                                                                                                                                                                           jjtree.openNodeScope(jjtn003);
                                                                                                                                                                                                                         }
                                                                                                                                                                                                                         try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                         {
                                                                                                                                                                                                                           jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                                                                           jjtc003 = false;
                                                                                                                                                                                                                         }
/*@egen*/{jjtn003.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                         } finally {
                                                                                                                                                                                                                           if (jjtc003) {
                                                                                                                                                                                                                             jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                                                                           }
                                                                                                                                                                                                                         }
/*@egen*/) RelativePathPattern()]) | RelativePathPattern())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void RelativePathPattern()        :
{}
{
  PatternStep() [(<Slash> | <SlashSlash>/*@bgen(jjtree) #SlashSlash( true) */
                                        {
                                          SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSLASHSLASH);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn001,  true);
                                          jjtc001 = false;
                                        }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001,  true);
                                          }
                                        }
/*@egen*/) RelativePathPattern()]
}

void PatternStep()  :
{/*@bgen(jjtree) PatternStep */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTPATTERNSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PatternStep */
  try {
/*@egen*/
  [PatternAxis()] NodeTest() Predicates()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PatternAxis()        :
{}
{
  (<AxisChild>/*@bgen(jjtree) #AxisChild( true) */
              {
                SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTAXISCHILD);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn001,  true);
                jjtc001 = false;
              }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  true);
                }
              }
/*@egen*/ | <AxisAttribute>/*@bgen(jjtree) #AxisAttribute( true) */
                                                                               {
                                                                                 SimpleNode jjtn002 = (SimpleNode)SimpleNode.jjtCreate(this, JJTAXISATTRIBUTE);
                                                                                 boolean jjtc002 = true;
                                                                                 jjtree.openNodeScope(jjtn002);
                                                                               }
                                                                               try {
/*@egen*//*@bgen(jjtree)*/
                                                                               {
                                                                                 jjtree.closeNodeScope(jjtn002,  true);
                                                                                 jjtc002 = false;
                                                                               }
/*@egen*/{jjtn002.processToken(token);}/*@bgen(jjtree)*/
                                                                               } finally {
                                                                                 if (jjtc002) {
                                                                                   jjtree.closeNodeScope(jjtn002,  true);
                                                                                 }
                                                                               }
/*@egen*/ | <At>/*@bgen(jjtree) #At( true) */
                                                                                                                                         {
                                                                                                                                           SimpleNode jjtn003 = (SimpleNode)SimpleNode.jjtCreate(this, JJTAT);
                                                                                                                                           boolean jjtc003 = true;
                                                                                                                                           jjtree.openNodeScope(jjtn003);
                                                                                                                                         }
                                                                                                                                         try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                         {
                                                                                                                                           jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                           jjtc003 = false;
                                                                                                                                         }
/*@egen*/{jjtn003.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                         } finally {
                                                                                                                                           if (jjtc003) {
                                                                                                                                             jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                           }
                                                                                                                                         }
/*@egen*/)
}

void IdKeyPattern()  :
{/*@bgen(jjtree) IdKeyPattern */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTIDKEYPATTERN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IdKeyPattern */
  try {
/*@egen*/
  <QNameLpar>/*@bgen(jjtree) #QNameLpar( true) */
             {
               SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTQNAMELPAR);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn001,  true);
               jjtc001 = false;
             }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  true);
               }
             }
/*@egen*/ IdKeyValue() [<Comma> IdKeyValue()] <Rpar>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IdKeyValue()        :
{}
{
  (<StringLiteral>/*@bgen(jjtree) #StringLiteral( true) */
                  {
                    SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSTRINGLITERAL);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001,  true);
                    jjtc001 = false;
                  }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  true);
                    }
                  }
/*@egen*/ | (<VariableIndicator> <VarName>/*@bgen(jjtree) #VarName( true) */
                                                                                                      {
                                                                                                        SimpleNode jjtn002 = (SimpleNode)SimpleNode.jjtCreate(this, JJTVARNAME);
                                                                                                        boolean jjtc002 = true;
                                                                                                        jjtree.openNodeScope(jjtn002);
                                                                                                      }
                                                                                                      try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                      {
                                                                                                        jjtree.closeNodeScope(jjtn002,  true);
                                                                                                        jjtc002 = false;
                                                                                                      }
/*@egen*/{jjtn002.processToken(token);}/*@bgen(jjtree)*/
                                                                                                      } finally {
                                                                                                        if (jjtc002) {
                                                                                                          jjtree.closeNodeScope(jjtn002,  true);
                                                                                                        }
                                                                                                      }
/*@egen*/))
}

void Expr()         :
{}
{
	OrExpr()
}

void OrExpr()              :
{/*@bgen(jjtree) #OrExpr(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTOREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #OrExpr(> 1) */
  try {
/*@egen*/
  AndExpr() (<Or>
        
         {binaryTokenStack.push(token);}
			 AndExpr()/*@bgen(jjtree) #OrExpr( 2) */
                {
                  SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTOREXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
		{
         try
         {
		       jjtn001.processToken((Token)binaryTokenStack.pop());
         }
         catch(java.util.EmptyStackException e)
         {
           token_source.printLinePos();
           e.printStackTrace();
           throw e;
         }
		}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void AndExpr()               :
{/*@bgen(jjtree) #AndExpr(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AndExpr(> 1) */
  try {
/*@egen*/
  FLWRExpr() (<And>
        
         {binaryTokenStack.push(token);}
			 FLWRExpr()/*@bgen(jjtree) #AndExpr( 2) */
                {
                  SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTANDEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
		{
         try
         {
		       jjtn001.processToken((Token)binaryTokenStack.pop());
         }
         catch(java.util.EmptyStackException e)
         {
           token_source.printLinePos();
           e.printStackTrace();
           throw e;
         }
		}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void FLWRExpr()                :
{/*@bgen(jjtree) #FLWRExpr(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTFLWREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #FLWRExpr(> 1) */
  try {
/*@egen*/
  (SimpleForClause() <Return>/*@bgen(jjtree) #Return( true) */
                             {
                               SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTRETURN);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                             }
                             try {
/*@egen*//*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn001,  true);
                               jjtc001 = false;
                             }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  true);
                               }
                             }
/*@egen*/)* QuantifiedExpr()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void QuantifiedExpr()                      :
{/*@bgen(jjtree) #QuantifiedExpr(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTQUANTIFIEDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #QuantifiedExpr(> 1) */
  try {
/*@egen*/
  ((<Some>/*@bgen(jjtree) #Some( true) */
          {
            SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSOME);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001,  true);
            jjtc001 = false;
          }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  true);
            }
          }
/*@egen*/ | <Every>/*@bgen(jjtree) #Every( true) */
                                                              {
                                                                SimpleNode jjtn002 = (SimpleNode)SimpleNode.jjtCreate(this, JJTEVERY);
                                                                boolean jjtc002 = true;
                                                                jjtree.openNodeScope(jjtn002);
                                                              }
                                                              try {
/*@egen*//*@bgen(jjtree)*/
                                                              {
                                                                jjtree.closeNodeScope(jjtn002,  true);
                                                                jjtc002 = false;
                                                              }
/*@egen*/{jjtn002.processToken(token);}/*@bgen(jjtree)*/
                                                              } finally {
                                                                if (jjtc002) {
                                                                  jjtree.closeNodeScope(jjtn002,  true);
                                                                }
                                                              }
/*@egen*/) <VarName>/*@bgen(jjtree) #VarName( true) */
                                                                                                                    {
                                                                                                                      SimpleNode jjtn003 = (SimpleNode)SimpleNode.jjtCreate(this, JJTVARNAME);
                                                                                                                      boolean jjtc003 = true;
                                                                                                                      jjtree.openNodeScope(jjtn003);
                                                                                                                    }
                                                                                                                    try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                    {
                                                                                                                      jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                      jjtc003 = false;
                                                                                                                    }
/*@egen*/{jjtn003.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                    } finally {
                                                                                                                      if (jjtc003) {
                                                                                                                        jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                      }
                                                                                                                    }
/*@egen*/  <In>/*@bgen(jjtree) #In( true) */
                                                                                                                                                                       {
                                                                                                                                                                         SimpleNode jjtn004 = (SimpleNode)SimpleNode.jjtCreate(this, JJTIN);
                                                                                                                                                                         boolean jjtc004 = true;
                                                                                                                                                                         jjtree.openNodeScope(jjtn004);
                                                                                                                                                                       }
                                                                                                                                                                       try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                       {
                                                                                                                                                                         jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                         jjtc004 = false;
                                                                                                                                                                       }
/*@egen*/{jjtn004.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                       } finally {
                                                                                                                                                                         if (jjtc004) {
                                                                                                                                                                           jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                         }
                                                                                                                                                                       }
/*@egen*/ Expr() (<Comma> (<VariableIndicator> <VarName>/*@bgen(jjtree) #VarName( true) */
                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                SimpleNode jjtn005 = (SimpleNode)SimpleNode.jjtCreate(this, JJTVARNAME);
                                                                                                                                                                                                                                                                boolean jjtc005 = true;
                                                                                                                                                                                                                                                                jjtree.openNodeScope(jjtn005);
                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                              try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                                                              {
                                                                                                                                                                                                                                                                jjtree.closeNodeScope(jjtn005,  true);
                                                                                                                                                                                                                                                                jjtc005 = false;
                                                                                                                                                                                                                                                              }
/*@egen*/{jjtn005.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                              } finally {
                                                                                                                                                                                                                                                                if (jjtc005) {
                                                                                                                                                                                                                                                                  jjtree.closeNodeScope(jjtn005,  true);
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                              }
/*@egen*/ ) <In>/*@bgen(jjtree) #In( true) */
                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                    SimpleNode jjtn006 = (SimpleNode)SimpleNode.jjtCreate(this, JJTIN);
                                                                                                                                                                                                                                                                                                                    boolean jjtc006 = true;
                                                                                                                                                                                                                                                                                                                    jjtree.openNodeScope(jjtn006);
                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                  try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                    jjtree.closeNodeScope(jjtn006,  true);
                                                                                                                                                                                                                                                                                                                    jjtc006 = false;
                                                                                                                                                                                                                                                                                                                  }
/*@egen*/{jjtn006.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                  } finally {
                                                                                                                                                                                                                                                                                                                    if (jjtc006) {
                                                                                                                                                                                                                                                                                                                      jjtree.closeNodeScope(jjtn006,  true);
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                  }
/*@egen*/ Expr())* <Satisfies>/*@bgen(jjtree) #Satisfies( true) */
                                                                                                                                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                                                                                                                                 SimpleNode jjtn007 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSATISFIES);
                                                                                                                                                                                                                                                                                                                                                                                 boolean jjtc007 = true;
                                                                                                                                                                                                                                                                                                                                                                                 jjtree.openNodeScope(jjtn007);
                                                                                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                                                                                               try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                                                                                                                                 jjtree.closeNodeScope(jjtn007,  true);
                                                                                                                                                                                                                                                                                                                                                                                 jjtc007 = false;
                                                                                                                                                                                                                                                                                                                                                                               }
/*@egen*/{jjtn007.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                                               } finally {
                                                                                                                                                                                                                                                                                                                                                                                 if (jjtc007) {
                                                                                                                                                                                                                                                                                                                                                                                   jjtree.closeNodeScope(jjtn007,  true);
                                                                                                                                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                                                                                                                                               }
/*@egen*/)* IfExpr()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void IfExpr()              :
{/*@bgen(jjtree) #IfExpr(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTIFEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #IfExpr(> 1) */
  try {
/*@egen*/
  (<IfLpar> Expr() <Rpar> <Then> Expr() <Else>)* InstanceofExpr()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void InstanceofExpr()                      :
{/*@bgen(jjtree) #InstanceofExpr(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTINSTANCEOFEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #InstanceofExpr(> 1) */
  try {
/*@egen*/
  CastableExpr() (<Instanceof> SequenceType())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void CastableExpr()                    :
{/*@bgen(jjtree) #CastableExpr(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTCASTABLEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #CastableExpr(> 1) */
  try {
/*@egen*/
  ComparisonExpr() (<Castable> SingleType())?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void ComparisonExpr()                      :
{/*@bgen(jjtree) #ComparisonExpr(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTCOMPARISONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #ComparisonExpr(> 1) */
  try {
/*@egen*/
  RangeExpr() ((ValueComp() | GeneralComp() | NodeComp() | OrderComp()) RangeExpr()/*@bgen(jjtree) #ComparisonExpr( 2) */
                {
                  SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTCOMPARISONEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
		{
         try
         {
		       jjtn001.processToken((Token)binaryTokenStack.pop());
         }
         catch(java.util.EmptyStackException e)
         {
           token_source.printLinePos();
           e.printStackTrace();
           throw e;
         }
		}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void RangeExpr()                 :
{/*@bgen(jjtree) #RangeExpr(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTRANGEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #RangeExpr(> 1) */
  try {
/*@egen*/
  AdditiveExpr() (<To>
        
         {binaryTokenStack.push(token);}
			 AdditiveExpr()/*@bgen(jjtree) #RangeExpr( 2) */
                {
                  SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTRANGEEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
		{
         try
         {
		       jjtn001.processToken((Token)binaryTokenStack.pop());
         }
         catch(java.util.EmptyStackException e)
         {
           token_source.printLinePos();
           e.printStackTrace();
           throw e;
         }
		}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void AdditiveExpr()                    :
{/*@bgen(jjtree) #AdditiveExpr(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTADDITIVEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #AdditiveExpr(> 1) */
  try {
/*@egen*/
  MultiplicativeExpr() ((<Plus>
        
         {binaryTokenStack.push(token);}
			 | <Minus>
        
         {binaryTokenStack.push(token);}
			) MultiplicativeExpr()/*@bgen(jjtree) #AdditiveExpr( 2) */
                {
                  SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTADDITIVEEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
		{
         try
         {
		       jjtn001.processToken((Token)binaryTokenStack.pop());
         }
         catch(java.util.EmptyStackException e)
         {
           token_source.printLinePos();
           e.printStackTrace();
           throw e;
         }
		}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void MultiplicativeExpr()                          :
{/*@bgen(jjtree) #MultiplicativeExpr(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTMULTIPLICATIVEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #MultiplicativeExpr(> 1) */
  try {
/*@egen*/
  UnaryExpr() ((<Multiply>
        
         {binaryTokenStack.push(token);}
			 | <Div>
        
         {binaryTokenStack.push(token);}
			 | <Idiv>
        
         {binaryTokenStack.push(token);}
			 | <Mod>
        
         {binaryTokenStack.push(token);}
			) UnaryExpr()/*@bgen(jjtree) #MultiplicativeExpr( 2) */
                {
                  SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTMULTIPLICATIVEEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
		{
         try
         {
		       jjtn001.processToken((Token)binaryTokenStack.pop());
         }
         catch(java.util.EmptyStackException e)
         {
           token_source.printLinePos();
           e.printStackTrace();
           throw e;
         }
		}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void UnaryExpr()                       :
{/*@bgen(jjtree) #UnaryExpr( keepUnary) */
 SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTUNARYEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/boolean keepUnary=false;}
{/*@bgen(jjtree) #UnaryExpr( keepUnary) */
  try {
/*@egen*/
  (<Minus>/*@bgen(jjtree) #Minus( true) */
          {
            SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTMINUS);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001,  true);
            jjtc001 = false;
          }
/*@egen*/{keepUnary=true;jjtn001.processToken(token);}/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  true);
            }
          }
/*@egen*/ | <Plus>/*@bgen(jjtree) #Plus( true) */
                                                                             {
                                                                               SimpleNode jjtn002 = (SimpleNode)SimpleNode.jjtCreate(this, JJTPLUS);
                                                                               boolean jjtc002 = true;
                                                                               jjtree.openNodeScope(jjtn002);
                                                                             }
                                                                             try {
/*@egen*//*@bgen(jjtree)*/
                                                                             {
                                                                               jjtree.closeNodeScope(jjtn002,  true);
                                                                               jjtc002 = false;
                                                                             }
/*@egen*/{keepUnary=true;jjtn002.processToken(token);}/*@bgen(jjtree)*/
                                                                             } finally {
                                                                               if (jjtc002) {
                                                                                 jjtree.closeNodeScope(jjtn002,  true);
                                                                               }
                                                                             }
/*@egen*/)* UnionExpr()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000,  keepUnary);
    }
  }
/*@egen*/
}

void UnionExpr()                 :
{/*@bgen(jjtree) #UnionExpr(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTUNIONEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #UnionExpr(> 1) */
  try {
/*@egen*/
  IntersectExceptExpr() ((<Union>
        
         {binaryTokenStack.push(token);}
			 | <Vbar>
        
         {binaryTokenStack.push(token);}
			) IntersectExceptExpr()/*@bgen(jjtree) #UnionExpr( 2) */
                {
                  SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTUNIONEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
		{
         try
         {
		       jjtn001.processToken((Token)binaryTokenStack.pop());
         }
         catch(java.util.EmptyStackException e)
         {
           token_source.printLinePos();
           e.printStackTrace();
           throw e;
         }
		}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void IntersectExceptExpr()                           :
{/*@bgen(jjtree) #IntersectExceptExpr(> 1) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTINTERSECTEXCEPTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #IntersectExceptExpr(> 1) */
  try {
/*@egen*/
  ValueExpr() ((<Intersect>
        
         {binaryTokenStack.push(token);}
			 | <Except>
        
         {binaryTokenStack.push(token);}
			) ValueExpr()/*@bgen(jjtree) #IntersectExceptExpr( 2) */
                {
                  SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTINTERSECTEXCEPTEXPR);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn001,  2);
                  jjtc001 = false;
                }
/*@egen*/
		{
         try
         {
		       jjtn001.processToken((Token)binaryTokenStack.pop());
         }
         catch(java.util.EmptyStackException e)
         {
           token_source.printLinePos();
           e.printStackTrace();
           throw e;
         }
		}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001,  2);
                  }
                }
/*@egen*/)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void ValueExpr()       :
{}
{
  (ValidateExpr() | CastExpr() | TreatExpr() | PathExpr())
}

void PathExpr()                :
{/*@bgen(jjtree) #PathExpr(> 0) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTPATHEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #PathExpr(> 0) */
  try {
/*@egen*/
  ((<Root>/*@bgen(jjtree) #Root( true) */
          {
            SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTROOT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001,  true);
            jjtc001 = false;
          }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  true);
            }
          }
/*@egen*/ [RelativePathExpr()]) | (<RootDescendants>/*@bgen(jjtree) #RootDescendants( true) */
                                                                                               {
                                                                                                 SimpleNode jjtn002 = (SimpleNode)SimpleNode.jjtCreate(this, JJTROOTDESCENDANTS);
                                                                                                 boolean jjtc002 = true;
                                                                                                 jjtree.openNodeScope(jjtn002);
                                                                                               }
                                                                                               try {
/*@egen*//*@bgen(jjtree)*/
                                                                                               {
                                                                                                 jjtree.closeNodeScope(jjtn002,  true);
                                                                                                 jjtc002 = false;
                                                                                               }
/*@egen*/{jjtn002.processToken(token);}/*@bgen(jjtree)*/
                                                                                               } finally {
                                                                                                 if (jjtc002) {
                                                                                                   jjtree.closeNodeScope(jjtn002,  true);
                                                                                                 }
                                                                                               }
/*@egen*/ RelativePathExpr()) | RelativePathExpr())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
    }
  }
/*@egen*/
}

void RelativePathExpr()        :
{}
{
  StepExpr() ((<Slash> | <SlashSlash>/*@bgen(jjtree) #SlashSlash( true) */
                                     {
                                       SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSLASHSLASH);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn001,  true);
                                       jjtc001 = false;
                                     }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  true);
                                       }
                                     }
/*@egen*/) StepExpr())*
}

void StepExpr()                          :
{/*@bgen(jjtree) #StepExpr(> 1 || isStep) */
 SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSTEPEXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/boolean isStep=false;}
{/*@bgen(jjtree) #StepExpr(> 1 || isStep) */
  try {
/*@egen*/
  (ForwardStep(){isStep=true;} | ReverseStep(){isStep=true;} | PrimaryExpr()) Predicates()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1 || isStep);
    }
  }
/*@egen*/
}

void SimpleForClause()        :
{}
{
  <ForVariable> <VarName>/*@bgen(jjtree) #VarName( true) */
                         {
                           SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTVARNAME);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn001,  true);
                           jjtc001 = false;
                         }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  true);
                           }
                         }
/*@egen*/ <In>/*@bgen(jjtree) #In( true) */
                                                                           {
                                                                             SimpleNode jjtn002 = (SimpleNode)SimpleNode.jjtCreate(this, JJTIN);
                                                                             boolean jjtc002 = true;
                                                                             jjtree.openNodeScope(jjtn002);
                                                                           }
                                                                           try {
/*@egen*//*@bgen(jjtree)*/
                                                                           {
                                                                             jjtree.closeNodeScope(jjtn002,  true);
                                                                             jjtc002 = false;
                                                                           }
/*@egen*/{jjtn002.processToken(token);}/*@bgen(jjtree)*/
                                                                           } finally {
                                                                             if (jjtc002) {
                                                                               jjtree.closeNodeScope(jjtn002,  true);
                                                                             }
                                                                           }
/*@egen*/ Expr() (<Comma> (<VariableIndicator> <VarName>/*@bgen(jjtree) #VarName( true) */
                                                                                                                                                                  {
                                                                                                                                                                    SimpleNode jjtn003 = (SimpleNode)SimpleNode.jjtCreate(this, JJTVARNAME);
                                                                                                                                                                    boolean jjtc003 = true;
                                                                                                                                                                    jjtree.openNodeScope(jjtn003);
                                                                                                                                                                  }
                                                                                                                                                                  try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                  {
                                                                                                                                                                    jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                    jjtc003 = false;
                                                                                                                                                                  }
/*@egen*/{jjtn003.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                  } finally {
                                                                                                                                                                    if (jjtc003) {
                                                                                                                                                                      jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                    }
                                                                                                                                                                  }
/*@egen*/) <In>/*@bgen(jjtree) #In( true) */
                                                                                                                                                                                                                     {
                                                                                                                                                                                                                       SimpleNode jjtn004 = (SimpleNode)SimpleNode.jjtCreate(this, JJTIN);
                                                                                                                                                                                                                       boolean jjtc004 = true;
                                                                                                                                                                                                                       jjtree.openNodeScope(jjtn004);
                                                                                                                                                                                                                     }
                                                                                                                                                                                                                     try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                     {
                                                                                                                                                                                                                       jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                                       jjtc004 = false;
                                                                                                                                                                                                                     }
/*@egen*/{jjtn004.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                     } finally {
                                                                                                                                                                                                                       if (jjtc004) {
                                                                                                                                                                                                                         jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                                       }
                                                                                                                                                                                                                     }
/*@egen*/ Expr())*
}

void ValidateExpr()  :
{/*@bgen(jjtree) ValidateExpr */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTVALIDATEEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ValidateExpr */
  try {
/*@egen*/
  (<ValidateLbrace>/*@bgen(jjtree) #ValidateLbrace( true) */
                   {
                     SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTVALIDATELBRACE);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001,  true);
                     jjtc001 = false;
                   }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  true);
                     }
                   }
/*@egen*/ | (<ValidateContext>/*@bgen(jjtree) #ValidateContext( true) */
                                                                                            {
                                                                                              SimpleNode jjtn002 = (SimpleNode)SimpleNode.jjtCreate(this, JJTVALIDATECONTEXT);
                                                                                              boolean jjtc002 = true;
                                                                                              jjtree.openNodeScope(jjtn002);
                                                                                            }
                                                                                            try {
/*@egen*//*@bgen(jjtree)*/
                                                                                            {
                                                                                              jjtree.closeNodeScope(jjtn002,  true);
                                                                                              jjtc002 = false;
                                                                                            }
/*@egen*/{jjtn002.processToken(token);}/*@bgen(jjtree)*/
                                                                                            } finally {
                                                                                              if (jjtc002) {
                                                                                                jjtree.closeNodeScope(jjtn002,  true);
                                                                                              }
                                                                                            }
/*@egen*/ SchemaGlobalContext() (<Slash>/*@bgen(jjtree) #Slash( true) */
                                                                                                                                                                                {
                                                                                                                                                                                  SimpleNode jjtn003 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSLASH);
                                                                                                                                                                                  boolean jjtc003 = true;
                                                                                                                                                                                  jjtree.openNodeScope(jjtn003);
                                                                                                                                                                                }
                                                                                                                                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                {
                                                                                                                                                                                  jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                                  jjtc003 = false;
                                                                                                                                                                                }
/*@egen*/{jjtn003.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                } finally {
                                                                                                                                                                                  if (jjtc003) {
                                                                                                                                                                                    jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                                  }
                                                                                                                                                                                }
/*@egen*/ SchemaContextStep())* <LbraceExprEnclosure>/*@bgen(jjtree) #LbraceExprEnclosure( true) */
                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                         SimpleNode jjtn004 = (SimpleNode)SimpleNode.jjtCreate(this, JJTLBRACEEXPRENCLOSURE);
                                                                                                                                                                                                                                                                         boolean jjtc004 = true;
                                                                                                                                                                                                                                                                         jjtree.openNodeScope(jjtn004);
                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                       try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                         jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                                                                                         jjtc004 = false;
                                                                                                                                                                                                                                                                       }
/*@egen*/{jjtn004.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                       } finally {
                                                                                                                                                                                                                                                                         if (jjtc004) {
                                                                                                                                                                                                                                                                           jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                       }
/*@egen*/)) Expr() <Rbrace>/*@bgen(jjtree) #Rbrace( true) */
                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                    SimpleNode jjtn005 = (SimpleNode)SimpleNode.jjtCreate(this, JJTRBRACE);
                                                                                                                                                                                                                                                                                                                                                    boolean jjtc005 = true;
                                                                                                                                                                                                                                                                                                                                                    jjtree.openNodeScope(jjtn005);
                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                  try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                  {
                                                                                                                                                                                                                                                                                                                                                    jjtree.closeNodeScope(jjtn005,  true);
                                                                                                                                                                                                                                                                                                                                                    jjtc005 = false;
                                                                                                                                                                                                                                                                                                                                                  }
/*@egen*/{jjtn005.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                  } finally {
                                                                                                                                                                                                                                                                                                                                                    if (jjtc005) {
                                                                                                                                                                                                                                                                                                                                                      jjtree.closeNodeScope(jjtn005,  true);
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                  }
/*@egen*//*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CastExpr()  :
{/*@bgen(jjtree) CastExpr */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTCASTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CastExpr */
  try {
/*@egen*/
  (<CastAs> SingleType()) ParenthesizedExpr()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TreatExpr()  :
{/*@bgen(jjtree) TreatExpr */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTTREATEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TreatExpr */
  try {
/*@egen*/
  (<TreatAs> SequenceType()) ParenthesizedExpr()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void GeneralComp()        :
{}
{
  (<Equals>
        
         {binaryTokenStack.push(token);}
			 | <NotEquals>
        
         {binaryTokenStack.push(token);}
			 | <Lt>
        
         {binaryTokenStack.push(token);}
			 | <LtEquals>
        
         {binaryTokenStack.push(token);}
			 | <Gt>
        
         {binaryTokenStack.push(token);}
			 | <GtEquals>
        
         {binaryTokenStack.push(token);}
			)
}

void ValueComp()        :
{}
{
  (<FortranEq>
        
         {binaryTokenStack.push(token);}
			 | <FortranNe>
        
         {binaryTokenStack.push(token);}
			 | <FortranLt>
        
         {binaryTokenStack.push(token);}
			 | <FortranLe>
        
         {binaryTokenStack.push(token);}
			 | <FortranGt>
        
         {binaryTokenStack.push(token);}
			 | <FortranGe>
        
         {binaryTokenStack.push(token);}
			)
}

void NodeComp()        :
{}
{
  (<Is>
        
         {binaryTokenStack.push(token);}
			 | <IsNot>
        
         {binaryTokenStack.push(token);}
			)
}

void OrderComp()        :
{}
{
  (<LtLt>
        
         {binaryTokenStack.push(token);}
			 | <GtGt>
        
         {binaryTokenStack.push(token);}
			)
}

void PrimaryExpr()        :
{}
{
  (Literal() | FunctionCall() | (<VariableIndicator> <VarName>/*@bgen(jjtree) #VarName( true) */
                                                              {
                                                                SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTVARNAME);
                                                                boolean jjtc001 = true;
                                                                jjtree.openNodeScope(jjtn001);
                                                              }
                                                              try {
/*@egen*//*@bgen(jjtree)*/
                                                              {
                                                                jjtree.closeNodeScope(jjtn001,  true);
                                                                jjtc001 = false;
                                                              }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
                                                              } finally {
                                                                if (jjtc001) {
                                                                  jjtree.closeNodeScope(jjtn001,  true);
                                                                }
                                                              }
/*@egen*/) | ParenthesizedExpr())
}

void ForwardAxis()        :
{}
{
  (<AxisChild>/*@bgen(jjtree) #AxisChild( true) */
              {
                SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTAXISCHILD);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
              }
              try {
/*@egen*//*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn001,  true);
                jjtc001 = false;
              }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001,  true);
                }
              }
/*@egen*/ | <AxisDescendant>/*@bgen(jjtree) #AxisDescendant( true) */
                                                                                {
                                                                                  SimpleNode jjtn002 = (SimpleNode)SimpleNode.jjtCreate(this, JJTAXISDESCENDANT);
                                                                                  boolean jjtc002 = true;
                                                                                  jjtree.openNodeScope(jjtn002);
                                                                                }
                                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                                {
                                                                                  jjtree.closeNodeScope(jjtn002,  true);
                                                                                  jjtc002 = false;
                                                                                }
/*@egen*/{jjtn002.processToken(token);}/*@bgen(jjtree)*/
                                                                                } finally {
                                                                                  if (jjtc002) {
                                                                                    jjtree.closeNodeScope(jjtn002,  true);
                                                                                  }
                                                                                }
/*@egen*/ | <AxisAttribute>/*@bgen(jjtree) #AxisAttribute( true) */
                                                                                                                                                      {
                                                                                                                                                        SimpleNode jjtn003 = (SimpleNode)SimpleNode.jjtCreate(this, JJTAXISATTRIBUTE);
                                                                                                                                                        boolean jjtc003 = true;
                                                                                                                                                        jjtree.openNodeScope(jjtn003);
                                                                                                                                                      }
                                                                                                                                                      try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                      {
                                                                                                                                                        jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                        jjtc003 = false;
                                                                                                                                                      }
/*@egen*/{jjtn003.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                      } finally {
                                                                                                                                                        if (jjtc003) {
                                                                                                                                                          jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                        }
                                                                                                                                                      }
/*@egen*/ | <AxisSelf>/*@bgen(jjtree) #AxisSelf( true) */
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        SimpleNode jjtn004 = (SimpleNode)SimpleNode.jjtCreate(this, JJTAXISSELF);
                                                                                                                                                                                                                        boolean jjtc004 = true;
                                                                                                                                                                                                                        jjtree.openNodeScope(jjtn004);
                                                                                                                                                                                                                      }
                                                                                                                                                                                                                      try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                      {
                                                                                                                                                                                                                        jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                                        jjtc004 = false;
                                                                                                                                                                                                                      }
/*@egen*/{jjtn004.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                      } finally {
                                                                                                                                                                                                                        if (jjtc004) {
                                                                                                                                                                                                                          jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                      }
/*@egen*/ | <AxisDescendantOrSelf>/*@bgen(jjtree) #AxisDescendantOrSelf( true) */
                                                                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                                                               SimpleNode jjtn005 = (SimpleNode)SimpleNode.jjtCreate(this, JJTAXISDESCENDANTORSELF);
                                                                                                                                                                                                                                                                                               boolean jjtc005 = true;
                                                                                                                                                                                                                                                                                               jjtree.openNodeScope(jjtn005);
                                                                                                                                                                                                                                                                                             }
                                                                                                                                                                                                                                                                                             try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                             {
                                                                                                                                                                                                                                                                                               jjtree.closeNodeScope(jjtn005,  true);
                                                                                                                                                                                                                                                                                               jjtc005 = false;
                                                                                                                                                                                                                                                                                             }
/*@egen*/{jjtn005.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                             } finally {
                                                                                                                                                                                                                                                                                               if (jjtc005) {
                                                                                                                                                                                                                                                                                                 jjtree.closeNodeScope(jjtn005,  true);
                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                             }
/*@egen*/ | <AxisFollowingSibling>/*@bgen(jjtree) #AxisFollowingSibling( true) */
                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                  SimpleNode jjtn006 = (SimpleNode)SimpleNode.jjtCreate(this, JJTAXISFOLLOWINGSIBLING);
                                                                                                                                                                                                                                                                                                                                                                                  boolean jjtc006 = true;
                                                                                                                                                                                                                                                                                                                                                                                  jjtree.openNodeScope(jjtn006);
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                                                {
                                                                                                                                                                                                                                                                                                                                                                                  jjtree.closeNodeScope(jjtn006,  true);
                                                                                                                                                                                                                                                                                                                                                                                  jjtc006 = false;
                                                                                                                                                                                                                                                                                                                                                                                }
/*@egen*/{jjtn006.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                                                } finally {
                                                                                                                                                                                                                                                                                                                                                                                  if (jjtc006) {
                                                                                                                                                                                                                                                                                                                                                                                    jjtree.closeNodeScope(jjtn006,  true);
                                                                                                                                                                                                                                                                                                                                                                                  }
                                                                                                                                                                                                                                                                                                                                                                                }
/*@egen*/ | <AxisFollowing>/*@bgen(jjtree) #AxisFollowing( true) */
                                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              SimpleNode jjtn007 = (SimpleNode)SimpleNode.jjtCreate(this, JJTAXISFOLLOWING);
                                                                                                                                                                                                                                                                                                                                                                                                                                                              boolean jjtc007 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                              jjtree.openNodeScope(jjtn007);
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                                                                                                                            {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              jjtree.closeNodeScope(jjtn007,  true);
                                                                                                                                                                                                                                                                                                                                                                                                                                                              jjtc007 = false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
/*@egen*/{jjtn007.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                                                                                                                            } finally {
                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (jjtc007) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                jjtree.closeNodeScope(jjtn007,  true);
                                                                                                                                                                                                                                                                                                                                                                                                                                                              }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
/*@egen*/ | <AxisNamespace>/*@bgen(jjtree) #AxisNamespace( true) */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 {
impleNode jjtn008 = (SimpleNode)SimpleNode.jjtCreate(this, JJTAXISNAMESPACE);
boolean jjtc008 = true;
jjtree.openNodeScope(jjtn008);
}
try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 {
jjtree.closeNodeScope(jjtn008,  true);
jjtc008 = false;
}
/*@egen*/{jjtn008.processToken(token);}/*@bgen(jjtree)*/
} finally {
if (jjtc008) {
jjtree.closeNodeScope(jjtn008,  true);
}
}
/*@egen*/)
}

void ReverseAxis()        :
{}
{
  (<AxisParent>/*@bgen(jjtree) #AxisParent( true) */
               {
                 SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTAXISPARENT);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
               }
               try {
/*@egen*//*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn001,  true);
                 jjtc001 = false;
               }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  true);
                 }
               }
/*@egen*/ | <AxisAncestor>/*@bgen(jjtree) #AxisAncestor( true) */
                                                                                {
                                                                                  SimpleNode jjtn002 = (SimpleNode)SimpleNode.jjtCreate(this, JJTAXISANCESTOR);
                                                                                  boolean jjtc002 = true;
                                                                                  jjtree.openNodeScope(jjtn002);
                                                                                }
                                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                                {
                                                                                  jjtree.closeNodeScope(jjtn002,  true);
                                                                                  jjtc002 = false;
                                                                                }
/*@egen*/{jjtn002.processToken(token);}/*@bgen(jjtree)*/
                                                                                } finally {
                                                                                  if (jjtc002) {
                                                                                    jjtree.closeNodeScope(jjtn002,  true);
                                                                                  }
                                                                                }
/*@egen*/ | <AxisPrecedingSibling>/*@bgen(jjtree) #AxisPrecedingSibling( true) */
                                                                                                                                                           {
                                                                                                                                                             SimpleNode jjtn003 = (SimpleNode)SimpleNode.jjtCreate(this, JJTAXISPRECEDINGSIBLING);
                                                                                                                                                             boolean jjtc003 = true;
                                                                                                                                                             jjtree.openNodeScope(jjtn003);
                                                                                                                                                           }
                                                                                                                                                           try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                           {
                                                                                                                                                             jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                             jjtc003 = false;
                                                                                                                                                           }
/*@egen*/{jjtn003.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                           } finally {
                                                                                                                                                             if (jjtc003) {
                                                                                                                                                               jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                             }
                                                                                                                                                           }
/*@egen*/ | <AxisPreceding>/*@bgen(jjtree) #AxisPreceding( true) */
                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                         SimpleNode jjtn004 = (SimpleNode)SimpleNode.jjtCreate(this, JJTAXISPRECEDING);
                                                                                                                                                                                                                                         boolean jjtc004 = true;
                                                                                                                                                                                                                                         jjtree.openNodeScope(jjtn004);
                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                       try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                         jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                                                         jjtc004 = false;
                                                                                                                                                                                                                                       }
/*@egen*/{jjtn004.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                                       } finally {
                                                                                                                                                                                                                                         if (jjtc004) {
                                                                                                                                                                                                                                           jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                       }
/*@egen*/ | <AxisAncestorOrSelf>/*@bgen(jjtree) #AxisAncestorOrSelf( true) */
                                                                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                                                                   SimpleNode jjtn005 = (SimpleNode)SimpleNode.jjtCreate(this, JJTAXISANCESTORORSELF);
                                                                                                                                                                                                                                                                                                                   boolean jjtc005 = true;
                                                                                                                                                                                                                                                                                                                   jjtree.openNodeScope(jjtn005);
                                                                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                                                                                 try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                                                                   jjtree.closeNodeScope(jjtn005,  true);
                                                                                                                                                                                                                                                                                                                   jjtc005 = false;
                                                                                                                                                                                                                                                                                                                 }
/*@egen*/{jjtn005.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                 } finally {
                                                                                                                                                                                                                                                                                                                   if (jjtc005) {
                                                                                                                                                                                                                                                                                                                     jjtree.closeNodeScope(jjtn005,  true);
                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                 }
/*@egen*/)
}

void NodeTest()  :
{/*@bgen(jjtree) NodeTest */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTNODETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NodeTest */
  try {
/*@egen*/
  (KindTest() | NameTest())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NameTest()  :
{/*@bgen(jjtree) NameTest */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTNAMETEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NameTest */
  try {
/*@egen*/
  (<QName>/*@bgen(jjtree) #QName( true) */
          {
            SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTQNAME);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001,  true);
            jjtc001 = false;
          }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  true);
            }
          }
/*@egen*/ | Wildcard())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Wildcard()        :
{}
{
  (<Star>/*@bgen(jjtree) #Star( true) */
         {
           SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSTAR);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*//*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn001,  true);
           jjtc001 = false;
         }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  true);
           }
         }
/*@egen*/ | <NCNameColonStar>/*@bgen(jjtree) #NCNameColonStar( true) */
                                                                       {
                                                                         SimpleNode jjtn002 = (SimpleNode)SimpleNode.jjtCreate(this, JJTNCNAMECOLONSTAR);
                                                                         boolean jjtc002 = true;
                                                                         jjtree.openNodeScope(jjtn002);
                                                                       }
                                                                       try {
/*@egen*//*@bgen(jjtree)*/
                                                                       {
                                                                         jjtree.closeNodeScope(jjtn002,  true);
                                                                         jjtc002 = false;
                                                                       }
/*@egen*/{jjtn002.processToken(token);}/*@bgen(jjtree)*/
                                                                       } finally {
                                                                         if (jjtc002) {
                                                                           jjtree.closeNodeScope(jjtn002,  true);
                                                                         }
                                                                       }
/*@egen*/ | <StarColonNCName>/*@bgen(jjtree) #StarColonNCName( true) */
                                                                                                                                                {
                                                                                                                                                  SimpleNode jjtn003 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSTARCOLONNCNAME);
                                                                                                                                                  boolean jjtc003 = true;
                                                                                                                                                  jjtree.openNodeScope(jjtn003);
                                                                                                                                                }
                                                                                                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                {
                                                                                                                                                  jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                  jjtc003 = false;
                                                                                                                                                }
/*@egen*/{jjtn003.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                } finally {
                                                                                                                                                  if (jjtc003) {
                                                                                                                                                    jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                  }
                                                                                                                                                }
/*@egen*/)
}

void KindTest()        :
{}
{
  (ProcessingInstructionTest() | CommentTest() | TextTest() | AnyKindTest())
}

void ProcessingInstructionTest()  :
{/*@bgen(jjtree) ProcessingInstructionTest */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTPROCESSINGINSTRUCTIONTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ProcessingInstructionTest */
  try {
/*@egen*/
  <ProcessingInstructionLpar> [<StringLiteral>/*@bgen(jjtree) #StringLiteral( true) */
                                              {
                                                SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSTRINGLITERAL);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
                                              }
                                              try {
/*@egen*//*@bgen(jjtree)*/
                                              {
                                                jjtree.closeNodeScope(jjtn001,  true);
                                                jjtc001 = false;
                                              }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
                                              } finally {
                                                if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001,  true);
                                                }
                                              }
/*@egen*/] <Rpar>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CommentTest()  :
{/*@bgen(jjtree) CommentTest */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTCOMMENTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CommentTest */
  try {
/*@egen*/
  <CommentLpar> <Rpar>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TextTest()  :
{/*@bgen(jjtree) TextTest */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTTEXTTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TextTest */
  try {
/*@egen*/
  <TextLpar> <Rpar>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AnyKindTest()  :
{/*@bgen(jjtree) AnyKindTest */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTANYKINDTEST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AnyKindTest */
  try {
/*@egen*/
  <NodeLpar> <Rpar>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ForwardStep()        :
{}
{
  ((ForwardAxis() (NodeTest())) | AbbreviatedForwardStep())
}

void ReverseStep()        :
{}
{
  ((ReverseAxis() (NodeTest())) | AbbreviatedReverseStep())
}

void AbbreviatedForwardStep()        :
{}
{
  (<Dot>/*@bgen(jjtree) #Dot( true) */
        {
          SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTDOT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001,  true);
          jjtc001 = false;
        }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  true);
          }
        }
/*@egen*/ | (<At>/*@bgen(jjtree) #At( true) */
                                                         {
                                                           SimpleNode jjtn002 = (SimpleNode)SimpleNode.jjtCreate(this, JJTAT);
                                                           boolean jjtc002 = true;
                                                           jjtree.openNodeScope(jjtn002);
                                                         }
                                                         try {
/*@egen*//*@bgen(jjtree)*/
                                                         {
                                                           jjtree.closeNodeScope(jjtn002,  true);
                                                           jjtc002 = false;
                                                         }
/*@egen*/{jjtn002.processToken(token);}/*@bgen(jjtree)*/
                                                         } finally {
                                                           if (jjtc002) {
                                                             jjtree.closeNodeScope(jjtn002,  true);
                                                           }
                                                         }
/*@egen*/ NameTest()) | NodeTest())
}

void AbbreviatedReverseStep()        :
{}
{
  <DotDot>/*@bgen(jjtree) #DotDot( true) */
          {
            SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTDOTDOT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001,  true);
            jjtc001 = false;
          }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  true);
            }
          }
/*@egen*/
}

void Predicates()                   :
{/*@bgen(jjtree) #Predicates(> 0) */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTPREDICATES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Predicates(> 0) */
  try {
/*@egen*/
  (((<Lbrack> Expr() <Rbrack>)))*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
    }
  }
/*@egen*/
}

void NumericLiteral()        :
{}
{
  (<IntegerLiteral>/*@bgen(jjtree) #IntegerLiteral( true) */
                   {
                     SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTINTEGERLITERAL);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*//*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn001,  true);
                     jjtc001 = false;
                   }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  true);
                     }
                   }
/*@egen*/ | <DecimalLiteral>/*@bgen(jjtree) #DecimalLiteral( true) */
                                                                                          {
                                                                                            SimpleNode jjtn002 = (SimpleNode)SimpleNode.jjtCreate(this, JJTDECIMALLITERAL);
                                                                                            boolean jjtc002 = true;
                                                                                            jjtree.openNodeScope(jjtn002);
                                                                                          }
                                                                                          try {
/*@egen*//*@bgen(jjtree)*/
                                                                                          {
                                                                                            jjtree.closeNodeScope(jjtn002,  true);
                                                                                            jjtc002 = false;
                                                                                          }
/*@egen*/{jjtn002.processToken(token);}/*@bgen(jjtree)*/
                                                                                          } finally {
                                                                                            if (jjtc002) {
                                                                                              jjtree.closeNodeScope(jjtn002,  true);
                                                                                            }
                                                                                          }
/*@egen*/ | <DoubleLiteral>/*@bgen(jjtree) #DoubleLiteral( true) */
                                                                                                                                                                {
                                                                                                                                                                  SimpleNode jjtn003 = (SimpleNode)SimpleNode.jjtCreate(this, JJTDOUBLELITERAL);
                                                                                                                                                                  boolean jjtc003 = true;
                                                                                                                                                                  jjtree.openNodeScope(jjtn003);
                                                                                                                                                                }
                                                                                                                                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                {
                                                                                                                                                                  jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                  jjtc003 = false;
                                                                                                                                                                }
/*@egen*/{jjtn003.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                } finally {
                                                                                                                                                                  if (jjtc003) {
                                                                                                                                                                    jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                  }
                                                                                                                                                                }
/*@egen*/)
}

void Literal()        :
{}
{
  (NumericLiteral() | <StringLiteral>/*@bgen(jjtree) #StringLiteral( true) */
                                     {
                                       SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSTRINGLITERAL);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn001,  true);
                                       jjtc001 = false;
                                     }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  true);
                                       }
                                     }
/*@egen*/)
}

void ParenthesizedExpr()        :
{}
{
  <Lpar> [ExprSequence()]  <Rpar>
}

void FunctionCall()  :
{/*@bgen(jjtree) FunctionCall */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTFUNCTIONCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FunctionCall */
  try {
/*@egen*/
  <QNameLpar>/*@bgen(jjtree) #QNameLpar( true) */
             {
               SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTQNAMELPAR);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn001,  true);
               jjtc001 = false;
             }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  true);
               }
             }
/*@egen*/ [Expr() (<Comma> Expr())*] <Rpar>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SchemaContext()  :
{/*@bgen(jjtree) SchemaContext */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSCHEMACONTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SchemaContext */
  try {
/*@egen*/
  <InContext>/*@bgen(jjtree) #InContext( true) */
             {
               SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTINCONTEXT);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn001,  true);
               jjtc001 = false;
             }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  true);
               }
             }
/*@egen*/ SchemaGlobalContext() (<Slash>/*@bgen(jjtree) #Slash( true) */
                                                                                           {
                                                                                             SimpleNode jjtn002 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSLASH);
                                                                                             boolean jjtc002 = true;
                                                                                             jjtree.openNodeScope(jjtn002);
                                                                                           }
                                                                                           try {
/*@egen*//*@bgen(jjtree)*/
                                                                                           {
                                                                                             jjtree.closeNodeScope(jjtn002,  true);
                                                                                             jjtc002 = false;
                                                                                           }
/*@egen*/{jjtn002.processToken(token);}/*@bgen(jjtree)*/
                                                                                           } finally {
                                                                                             if (jjtc002) {
                                                                                               jjtree.closeNodeScope(jjtn002,  true);
                                                                                             }
                                                                                           }
/*@egen*/ SchemaContextStep())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SchemaGlobalContext()  :
{/*@bgen(jjtree) SchemaGlobalContext */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSCHEMAGLOBALCONTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SchemaGlobalContext */
  try {
/*@egen*/
  (<QName>/*@bgen(jjtree) #QName( true) */
          {
            SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTQNAME);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001,  true);
            jjtc001 = false;
          }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  true);
            }
          }
/*@egen*/ | <TypeQName>/*@bgen(jjtree) #TypeQName( true) */
                                                                   {
                                                                     SimpleNode jjtn002 = (SimpleNode)SimpleNode.jjtCreate(this, JJTTYPEQNAME);
                                                                     boolean jjtc002 = true;
                                                                     jjtree.openNodeScope(jjtn002);
                                                                   }
                                                                   try {
/*@egen*//*@bgen(jjtree)*/
                                                                   {
                                                                     jjtree.closeNodeScope(jjtn002,  true);
                                                                     jjtc002 = false;
                                                                   }
/*@egen*/{jjtn002.processToken(token);}/*@bgen(jjtree)*/
                                                                   } finally {
                                                                     if (jjtc002) {
                                                                       jjtree.closeNodeScope(jjtn002,  true);
                                                                     }
                                                                   }
/*@egen*/)/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SchemaContextStep()  :
{/*@bgen(jjtree) SchemaContextStep */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSCHEMACONTEXTSTEP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SchemaContextStep */
  try {
/*@egen*/
  <QName>/*@bgen(jjtree) #QName( true) */
         {
           SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTQNAME);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*//*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn001,  true);
           jjtc001 = false;
         }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  true);
           }
         }
/*@egen*//*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SingleType()  :
{/*@bgen(jjtree) SingleType */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSINGLETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SingleType */
  try {
/*@egen*/
  AtomicType() [<QMark>/*@bgen(jjtree) #QMark( true) */
                       {
                         SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTQMARK);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn001,  true);
                         jjtc001 = false;
                       }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  true);
                         }
                       }
/*@egen*/]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SequenceType()  :
{/*@bgen(jjtree) SequenceType */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSEQUENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SequenceType */
  try {
/*@egen*/
  ((ItemType() OccurrenceIndicator()) | <Empty>/*@bgen(jjtree) #Empty( true) */
                                               {
                                                 SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTEMPTY);
                                                 boolean jjtc001 = true;
                                                 jjtree.openNodeScope(jjtn001);
                                               }
                                               try {
/*@egen*//*@bgen(jjtree)*/
                                               {
                                                 jjtree.closeNodeScope(jjtn001,  true);
                                                 jjtc001 = false;
                                               }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
                                               } finally {
                                                 if (jjtc001) {
                                                   jjtree.closeNodeScope(jjtn001,  true);
                                                 }
                                               }
/*@egen*/)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ItemType()        :
{}
{
  (((<ElementType>/*@bgen(jjtree) #ElementType( true) */
                  {
                    SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTELEMENTTYPE);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                  }
                  try {
/*@egen*//*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn001,  true);
                    jjtc001 = false;
                  }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001,  true);
                    }
                  }
/*@egen*/ | <AttributeType>/*@bgen(jjtree) #AttributeType( true) */
                                                                                     {
                                                                                       SimpleNode jjtn002 = (SimpleNode)SimpleNode.jjtCreate(this, JJTATTRIBUTETYPE);
                                                                                       boolean jjtc002 = true;
                                                                                       jjtree.openNodeScope(jjtn002);
                                                                                     }
                                                                                     try {
/*@egen*//*@bgen(jjtree)*/
                                                                                     {
                                                                                       jjtree.closeNodeScope(jjtn002,  true);
                                                                                       jjtc002 = false;
                                                                                     }
/*@egen*/{jjtn002.processToken(token);}/*@bgen(jjtree)*/
                                                                                     } finally {
                                                                                       if (jjtc002) {
                                                                                         jjtree.closeNodeScope(jjtn002,  true);
                                                                                       }
                                                                                     }
/*@egen*/) [ElemOrAttrType()]) | <Node>/*@bgen(jjtree) #Node( true) */
                                                                                                                                                                      {
                                                                                                                                                                        SimpleNode jjtn003 = (SimpleNode)SimpleNode.jjtCreate(this, JJTNODE);
                                                                                                                                                                        boolean jjtc003 = true;
                                                                                                                                                                        jjtree.openNodeScope(jjtn003);
                                                                                                                                                                      }
                                                                                                                                                                      try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                      {
                                                                                                                                                                        jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                        jjtc003 = false;
                                                                                                                                                                      }
/*@egen*/{jjtn003.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                      } finally {
                                                                                                                                                                        if (jjtc003) {
                                                                                                                                                                          jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                                                                        }
                                                                                                                                                                      }
/*@egen*/ | <ProcessingInstruction>/*@bgen(jjtree) #ProcessingInstruction( true) */
                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                            SimpleNode jjtn004 = (SimpleNode)SimpleNode.jjtCreate(this, JJTPROCESSINGINSTRUCTION);
                                                                                                                                                                                                                                            boolean jjtc004 = true;
                                                                                                                                                                                                                                            jjtree.openNodeScope(jjtn004);
                                                                                                                                                                                                                                          }
                                                                                                                                                                                                                                          try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                                          {
                                                                                                                                                                                                                                            jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                                                            jjtc004 = false;
                                                                                                                                                                                                                                          }
/*@egen*/{jjtn004.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                                          } finally {
                                                                                                                                                                                                                                            if (jjtc004) {
                                                                                                                                                                                                                                              jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                          }
/*@egen*/ | <Comment>/*@bgen(jjtree) #Comment( true) */
                                                                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                                                                   SimpleNode jjtn005 = (SimpleNode)SimpleNode.jjtCreate(this, JJTCOMMENT);
                                                                                                                                                                                                                                                                                                                   boolean jjtc005 = true;
                                                                                                                                                                                                                                                                                                                   jjtree.openNodeScope(jjtn005);
                                                                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                                                                                 try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                 {
                                                                                                                                                                                                                                                                                                                   jjtree.closeNodeScope(jjtn005,  true);
                                                                                                                                                                                                                                                                                                                   jjtc005 = false;
                                                                                                                                                                                                                                                                                                                 }
/*@egen*/{jjtn005.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                 } finally {
                                                                                                                                                                                                                                                                                                                   if (jjtc005) {
                                                                                                                                                                                                                                                                                                                     jjtree.closeNodeScope(jjtn005,  true);
                                                                                                                                                                                                                                                                                                                   }
                                                                                                                                                                                                                                                                                                                 }
/*@egen*/ | <Text>/*@bgen(jjtree) #Text( true) */
                                                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                                                         SimpleNode jjtn006 = (SimpleNode)SimpleNode.jjtCreate(this, JJTTEXT);
                                                                                                                                                                                                                                                                                                                                                                         boolean jjtc006 = true;
                                                                                                                                                                                                                                                                                                                                                                         jjtree.openNodeScope(jjtn006);
                                                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                                                       try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                                                         jjtree.closeNodeScope(jjtn006,  true);
                                                                                                                                                                                                                                                                                                                                                                         jjtc006 = false;
                                                                                                                                                                                                                                                                                                                                                                       }
/*@egen*/{jjtn006.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                                       } finally {
                                                                                                                                                                                                                                                                                                                                                                         if (jjtc006) {
                                                                                                                                                                                                                                                                                                                                                                           jjtree.closeNodeScope(jjtn006,  true);
                                                                                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                                                                                       }
/*@egen*/ | (<Document>/*@bgen(jjtree) #Document( true) */
                                                                                                                                                                                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                                                                                                                                                                                 SimpleNode jjtn007 = (SimpleNode)SimpleNode.jjtCreate(this, JJTDOCUMENT);
                                                                                                                                                                                                                                                                                                                                                                                                                                 boolean jjtc007 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                 jjtree.openNodeScope(jjtn007);
                                                                                                                                                                                                                                                                                                                                                                                                                               }
                                                                                                                                                                                                                                                                                                                                                                                                                               try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                                                                                               {
                                                                                                                                                                                                                                                                                                                                                                                                                                 jjtree.closeNodeScope(jjtn007,  true);
                                                                                                                                                                                                                                                                                                                                                                                                                                 jjtc007 = false;
                                                                                                                                                                                                                                                                                                                                                                                                                               }
/*@egen*/{jjtn007.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                                                                                               } finally {
                                                                                                                                                                                                                                                                                                                                                                                                                                 if (jjtc007) {
                                                                                                                                                                                                                                                                                                                                                                                                                                   jjtree.closeNodeScope(jjtn007,  true);
                                                                                                                                                                                                                                                                                                                                                                                                                                 }
                                                                                                                                                                                                                                                                                                                                                                                                                               }
/*@egen*/) | <Item>/*@bgen(jjtree) #Item( true) */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         SimpleNode jjtn008 = (SimpleNode)SimpleNode.jjtCreate(this, JJTITEM);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         boolean jjtc008 = true;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         jjtree.openNodeScope(jjtn008);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         jjtree.closeNodeScope(jjtn008,  true);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         jjtc008 = false;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       }
/*@egen*/{jjtn008.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       } finally {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         if (jjtc008) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           jjtree.closeNodeScope(jjtn008,  true);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       }
/*@egen*/ | AtomicType() | <Untyped>/*@bgen(jjtree) #Untyped( true) */
{
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              SimpleNode jjtn009 = (SimpleNode)SimpleNode.jjtCreate(this, JJTUNTYPED);
boolean jjtc009 = true;
jjtree.openNodeScope(jjtn009);
}
try {
/*@egen*//*@bgen(jjtree)*/
{
jjtree.closeNodeScope(jjtn009,  true);
jjtc009 = false;
}
/*@egen*/{jjtn009.processToken(token);}/*@bgen(jjtree)*/
} finally {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              if (jjtc009) {
jjtree.closeNodeScope(jjtn009,  true);
}
}
/*@egen*/ | <AtomicValue>/*@bgen(jjtree) #AtomicValue( true) */
{
impleNode jjtn010 = (SimpleNode)SimpleNode.jjtCreate(this, JJTATOMICVALUE);
boolean jjtc010 = true;
jjtree.openNodeScope(jjtn010);
}
try {
/*@egen*//*@bgen(jjtree)*/
{
jjtree.closeNodeScope(jjtn010,  true);
jjtc010 = false;
}
/*@egen*/{jjtn010.processToken(token);}/*@bgen(jjtree)*/
} finally {
if (jjtc010) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             jjtree.closeNodeScope(jjtn010,  true);
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         }
/*@egen*/)
}

void ElemOrAttrType()  :
{/*@bgen(jjtree) ElemOrAttrType */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTELEMORATTRTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ElemOrAttrType */
  try {
/*@egen*/
  ((<QName>/*@bgen(jjtree) #QName( true) */
           {
             SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTQNAME);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
           }
           try {
/*@egen*//*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn001,  true);
             jjtc001 = false;
           }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001,  true);
             }
           }
/*@egen*/ (SchemaType() | [SchemaContext()])) | SchemaType())/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SchemaType()  :
{/*@bgen(jjtree) SchemaType */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSCHEMATYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SchemaType */
  try {
/*@egen*/
  <OfType>/*@bgen(jjtree) #OfType( true) */
          {
            SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTOFTYPE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001,  true);
            jjtc001 = false;
          }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  true);
            }
          }
/*@egen*/ <QName>/*@bgen(jjtree) #QName( true) */
                                                              {
                                                                SimpleNode jjtn002 = (SimpleNode)SimpleNode.jjtCreate(this, JJTQNAME);
                                                                boolean jjtc002 = true;
                                                                jjtree.openNodeScope(jjtn002);
                                                              }
                                                              try {
/*@egen*//*@bgen(jjtree)*/
                                                              {
                                                                jjtree.closeNodeScope(jjtn002,  true);
                                                                jjtc002 = false;
                                                              }
/*@egen*/{jjtn002.processToken(token);}/*@bgen(jjtree)*/
                                                              } finally {
                                                                if (jjtc002) {
                                                                  jjtree.closeNodeScope(jjtn002,  true);
                                                                }
                                                              }
/*@egen*//*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AtomicType()  :
{/*@bgen(jjtree) AtomicType */
  SimpleNode jjtn000 = (SimpleNode)SimpleNode.jjtCreate(this, JJTATOMICTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AtomicType */
  try {
/*@egen*/
  <QName>/*@bgen(jjtree) #QName( true) */
         {
           SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTQNAME);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*//*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn001,  true);
           jjtc001 = false;
         }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  true);
           }
         }
/*@egen*//*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OccurrenceIndicator()        :
{}
{
  [(<Star>/*@bgen(jjtree) #Star( true) */
          {
            SimpleNode jjtn001 = (SimpleNode)SimpleNode.jjtCreate(this, JJTSTAR);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*//*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn001,  true);
            jjtc001 = false;
          }
/*@egen*/{jjtn001.processToken(token);}/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001,  true);
            }
          }
/*@egen*/ | <Multiply>/*@bgen(jjtree) #Multiply( true) */
                                                                 {
                                                                   SimpleNode jjtn002 = (SimpleNode)SimpleNode.jjtCreate(this, JJTMULTIPLY);
                                                                   boolean jjtc002 = true;
                                                                   jjtree.openNodeScope(jjtn002);
                                                                 }
                                                                 try {
/*@egen*//*@bgen(jjtree)*/
                                                                 {
                                                                   jjtree.closeNodeScope(jjtn002,  true);
                                                                   jjtc002 = false;
                                                                 }
/*@egen*/{jjtn002.processToken(token);}/*@bgen(jjtree)*/
                                                                 } finally {
                                                                   if (jjtc002) {
                                                                     jjtree.closeNodeScope(jjtn002,  true);
                                                                   }
                                                                 }
/*@egen*/ | <Plus>/*@bgen(jjtree) #Plus( true) */
                                                                                                                        {
                                                                                                                          SimpleNode jjtn003 = (SimpleNode)SimpleNode.jjtCreate(this, JJTPLUS);
                                                                                                                          boolean jjtc003 = true;
                                                                                                                          jjtree.openNodeScope(jjtn003);
                                                                                                                        }
                                                                                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                        {
                                                                                                                          jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                          jjtc003 = false;
                                                                                                                        }
/*@egen*/{jjtn003.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                        } finally {
                                                                                                                          if (jjtc003) {
                                                                                                                            jjtree.closeNodeScope(jjtn003,  true);
                                                                                                                          }
                                                                                                                        }
/*@egen*/ | <QMark>/*@bgen(jjtree) #QMark( true) */
                                                                                                                                                                            {
                                                                                                                                                                              SimpleNode jjtn004 = (SimpleNode)SimpleNode.jjtCreate(this, JJTQMARK);
                                                                                                                                                                              boolean jjtc004 = true;
                                                                                                                                                                              jjtree.openNodeScope(jjtn004);
                                                                                                                                                                            }
                                                                                                                                                                            try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                                                            {
                                                                                                                                                                              jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                              jjtc004 = false;
                                                                                                                                                                            }
/*@egen*/{jjtn004.processToken(token);}/*@bgen(jjtree)*/
                                                                                                                                                                            } finally {
                                                                                                                                                                              if (jjtc004) {
                                                                                                                                                                                jjtree.closeNodeScope(jjtn004,  true);
                                                                                                                                                                              }
                                                                                                                                                                            }
/*@egen*/)]
}

<START_TAG, END_TAG, ELEMENT_CONTENT, QUOT_ATTRIBUTE_CONTENT, APOS_ATTRIBUTE_CONTENT>
TOKEN :
{
  < Lbrace : "{" > { pushState(); } : DEFAULT
}

<DEFAULT, OPERATOR, ITEMTYPE>
TOKEN :
{
  < LbraceExprEnclosure : "{" > { pushState(DEFAULT); } : DEFAULT
}

<QUOT_ATTRIBUTE_CONTENT, OPERATOR, DEFAULT>
TOKEN :
{
  < Rbrace : "}" > { popState(); }
}

<ELEMENT_CONTENT, CDATA_SECTION, QUOT_ATTRIBUTE_CONTENT, APOS_ATTRIBUTE_CONTENT, PROCESSING_INSTRUCTION_CONTENT, XML_COMMENT, XQUERY_COMMENT>
TOKEN :
{
  < Char : ["\t", "\r", "\n", " " - "\ufffd"] >
}

TOKEN :
{
  < #WhitespaceChar : ["\t", "\r", "\n", " "] >
}

TOKEN :
{
  < #Letter : (<BaseChar> | <Ideographic>) >
}

TOKEN :
{
  < #BaseChar : ["A" - "Z", "a" - "z", "\u00c0" - "\u00d6", "\u00d8" - "\u00f6", "\u00f8" - "\u00ff", "\u0100" - "\u0131", "\u0134" - "\u013e", "\u0141" - "\u0148", "\u014a" - "\u017e", "\u0180" - "\u01c3", "\u01cd" - "\u01f0", "\u01f4" - "\u01f5", "\u01fa" - "\u0217", "\u0250" - "\u02a8", "\u02bb" - "\u02c1", "\u0386", "\u0388" - "\u038a", "\u038c", "\u038e" - "\u03a1", "\u03a3" - "\u03ce", "\u03d0" - "\u03d6", "\u03da", "\u03dc", "\u03de", "\u03e0", "\u03e2" - "\u03f3", "\u0401" - "\u040c", "\u040e" - "\u044f", "\u0451" - "\u045c", "\u045e" - "\u0481", "\u0490" - "\u04c4", "\u04c7" - "\u04c8", "\u04cb" - "\u04cc", "\u04d0" - "\u04eb", "\u04ee" - "\u04f5", "\u04f8" - "\u04f9", "\u0531" - "\u0556", "\u0559", "\u0561" - "\u0586", "\u05d0" - "\u05ea", "\u05f0" - "\u05f2", "\u0621" - "\u063a", "\u0641" - "\u064a", "\u0671" - "\u06b7", "\u06ba" - "\u06be", "\u06c0" - "\u06ce", "\u06d0" - "\u06d3", "\u06d5", "\u06e5" - "\u06e6", "\u0905" - "\u0939", "\u093d", "\u0958" - "\u0961", "\u0985" - "\u098c", "\u098f" - "\u0990", "\u0993" - "\u09a8", "\u09aa" - "\u09b0", "\u09b2", "\u09b6" - "\u09b9", "\u09dc" - "\u09dd", "\u09df" - "\u09e1", "\u09f0" - "\u09f1", "\u0a05" - "\u0a0a", "\u0a0f" - "\u0a10", "\u0a13" - "\u0a28", "\u0a2a" - "\u0a30", "\u0a32" - "\u0a33", "\u0a35" - "\u0a36", "\u0a38" - "\u0a39", "\u0a59" - "\u0a5c", "\u0a5e", "\u0a72" - "\u0a74", "\u0a85" - "\u0a8b", "\u0a8d", "\u0a8f" - "\u0a91", "\u0a93" - "\u0aa8", "\u0aaa" - "\u0ab0", "\u0ab2" - "\u0ab3", "\u0ab5" - "\u0ab9", "\u0abd", "\u0ae0", "\u0b05" - "\u0b0c", "\u0b0f" - "\u0b10", "\u0b13" - "\u0b28", "\u0b2a" - "\u0b30", "\u0b32" - "\u0b33", "\u0b36" - "\u0b39", "\u0b3d", "\u0b5c" - "\u0b5d", "\u0b5f" - "\u0b61", "\u0b85" - "\u0b8a", "\u0b8e" - "\u0b90", "\u0b92" - "\u0b95", "\u0b99" - "\u0b9a", "\u0b9c", "\u0b9e" - "\u0b9f", "\u0ba3" - "\u0ba4", "\u0ba8" - "\u0baa", "\u0bae" - "\u0bb5", "\u0bb7" - "\u0bb9", "\u0c05" - "\u0c0c", "\u0c0e" - "\u0c10", "\u0c12" - "\u0c28", "\u0c2a" - "\u0c33", "\u0c35" - "\u0c39", "\u0c60" - "\u0c61", "\u0c85" - "\u0c8c", "\u0c8e" - "\u0c90", "\u0c92" - "\u0ca8", "\u0caa" - "\u0cb3", "\u0cb5" - "\u0cb9", "\u0cde", "\u0ce0" - "\u0ce1", "\u0d05" - "\u0d0c", "\u0d0e" - "\u0d10", "\u0d12" - "\u0d28", "\u0d2a" - "\u0d39", "\u0d60" - "\u0d61", "\u0e01" - "\u0e2e", "\u0e30", "\u0e32" - "\u0e33", "\u0e40" - "\u0e45", "\u0e81" - "\u0e82", "\u0e84", "\u0e87" - "\u0e88", "\u0e8a", "\u0e8d", "\u0e94" - "\u0e97", "\u0e99" - "\u0e9f", "\u0ea1" - "\u0ea3", "\u0ea5", "\u0ea7", "\u0eaa" - "\u0eab", "\u0ead" - "\u0eae", "\u0eb0", "\u0eb2" - "\u0eb3", "\u0ebd", "\u0ec0" - "\u0ec4", "\u0f40" - "\u0f47", "\u0f49" - "\u0f69", "\u10a0" - "\u10c5", "\u10d0" - "\u10f6", "\u1100", "\u1102" - "\u1103", "\u1105" - "\u1107", "\u1109", "\u110b" - "\u110c", "\u110e" - "\u1112", "\u113c", "\u113e", "\u1140", "\u114c", "\u114e", "\u1150", "\u1154" - "\u1155", "\u1159", "\u115f" - "\u1161", "\u1163", "\u1165", "\u1167", "\u1169", "\u116d" - "\u116e", "\u1172" - "\u1173", "\u1175", "\u119e", "\u11a8", "\u11ab", "\u11ae" - "\u11af", "\u11b7" - "\u11b8", "\u11ba", "\u11bc" - "\u11c2", "\u11eb", "\u11f0", "\u11f9", "\u1e00" - "\u1e9b", "\u1ea0" - "\u1ef9", "\u1f00" - "\u1f15", "\u1f18" - "\u1f1d", "\u1f20" - "\u1f45", "\u1f48" - "\u1f4d", "\u1f50" - "\u1f57", "\u1f59", "\u1f5b", "\u1f5d", "\u1f5f" - "\u1f7d", "\u1f80" - "\u1fb4", "\u1fb6" - "\u1fbc", "\u1fbe", "\u1fc2" - "\u1fc4", "\u1fc6" - "\u1fcc", "\u1fd0" - "\u1fd3", "\u1fd6" - "\u1fdb", "\u1fe0" - "\u1fec", "\u1ff2" - "\u1ff4", "\u1ff6" - "\u1ffc", "\u2126", "\u212a" - "\u212b", "\u212e", "\u2180" - "\u2182", "\u3041" - "\u3094", "\u30a1" - "\u30fa", "\u3105" - "\u312c", "\uac00" - "\ud7a3"] >
}

TOKEN :
{
  < #Ideographic : ["\u4e00" - "\u9fa5", "\u3007", "\u3021" - "\u3029"] >
}

TOKEN :
{
  < #CombiningChar : ["\u0300" - "\u0345", "\u0360" - "\u0361", "\u0483" - "\u0486", "\u0591" - "\u05a1", "\u05a3" - "\u05b9", "\u05bb" - "\u05bd", "\u05bf", "\u05c1" - "\u05c2", "\u05c4", "\u064b" - "\u0652", "\u0670", "\u06d6" - "\u06dc", "\u06dd" - "\u06df", "\u06e0" - "\u06e4", "\u06e7" - "\u06e8", "\u06ea" - "\u06ed", "\u0901" - "\u0903", "\u093c", "\u093e" - "\u094c", "\u094d", "\u0951" - "\u0954", "\u0962" - "\u0963", "\u0981" - "\u0983", "\u09bc", "\u09be", "\u09bf", "\u09c0" - "\u09c4", "\u09c7" - "\u09c8", "\u09cb" - "\u09cd", "\u09d7", "\u09e2" - "\u09e3", "\u0a02", "\u0a3c", "\u0a3e", "\u0a3f", "\u0a40" - "\u0a42", "\u0a47" - "\u0a48", "\u0a4b" - "\u0a4d", "\u0a70" - "\u0a71", "\u0a81" - "\u0a83", "\u0abc", "\u0abe" - "\u0ac5", "\u0ac7" - "\u0ac9", "\u0acb" - "\u0acd", "\u0b01" - "\u0b03", "\u0b3c", "\u0b3e" - "\u0b43", "\u0b47" - "\u0b48", "\u0b4b" - "\u0b4d", "\u0b56" - "\u0b57", "\u0b82" - "\u0b83", "\u0bbe" - "\u0bc2", "\u0bc6" - "\u0bc8", "\u0bca" - "\u0bcd", "\u0bd7", "\u0c01" - "\u0c03", "\u0c3e" - "\u0c44", "\u0c46" - "\u0c48", "\u0c4a" - "\u0c4d", "\u0c55" - "\u0c56", "\u0c82" - "\u0c83", "\u0cbe" - "\u0cc4", "\u0cc6" - "\u0cc8", "\u0cca" - "\u0ccd", "\u0cd5" - "\u0cd6", "\u0d02" - "\u0d03", "\u0d3e" - "\u0d43", "\u0d46" - "\u0d48", "\u0d4a" - "\u0d4d", "\u0d57", "\u0e31", "\u0e34" - "\u0e3a", "\u0e47" - "\u0e4e", "\u0eb1", "\u0eb4" - "\u0eb9", "\u0ebb" - "\u0ebc", "\u0ec8" - "\u0ecd", "\u0f18" - "\u0f19", "\u0f35", "\u0f37", "\u0f39", "\u0f3e", "\u0f3f", "\u0f71" - "\u0f84", "\u0f86" - "\u0f8b", "\u0f90" - "\u0f95", "\u0f97", "\u0f99" - "\u0fad", "\u0fb1" - "\u0fb7", "\u0fb9", "\u20d0" - "\u20dc", "\u20e1", "\u302a" - "\u302f", "\u3099", "\u309a"] >
}

TOKEN :
{
  < #Digit : ["0" - "9", "\u0660" - "\u0669", "\u06f0" - "\u06f9", "\u0966" - "\u096f", "\u09e6" - "\u09ef", "\u0a66" - "\u0a6f", "\u0ae6" - "\u0aef", "\u0b66" - "\u0b6f", "\u0be7" - "\u0bef", "\u0c66" - "\u0c6f", "\u0ce6" - "\u0cef", "\u0d66" - "\u0d6f", "\u0e50" - "\u0e59", "\u0ed0" - "\u0ed9", "\u0f20" - "\u0f29"] >
}

TOKEN :
{
  < #Extender : ["\u00b7", "\u02d0", "\u02d1", "\u0387", "\u0640", "\u0e46", "\u0ec6", "\u3005", "\u3031" - "\u3035", "\u309d" - "\u309e", "\u30fc" - "\u30fe"] >
}

